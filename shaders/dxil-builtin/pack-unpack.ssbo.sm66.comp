StructuredBuffer<uint> RO : register(t0);
RWStructuredBuffer<uint4> RW : register(u0);
RWStructuredBuffer<uint16_t4> RW16 : register(u1);

[numthreads(64, 1, 1)]
void main(uint thr : SV_DispatchThreadID)
{
	uint8_t4_packed p = RO[thr];

	{
		uint4 p4 = unpack_u8u32(p);
		RW[thr] = p4;
	}

	{
		uint16_t4 p4 = unpack_u8u16(p);
		RW16[thr] = p4;
	}

	{
		int4 p4 = unpack_s8s32(p);
		RW[thr] = p4;
	}

	{
		int16_t4 p4 = unpack_s8s16(p);
		RW16[thr] = p4;
	}

	{
		uint4 u32s = RW[thr + 100000];
		uint p0 = pack_u8(u32s);
		uint p1 = pack_s8(int4(u32s));
		uint p2 = pack_clamp_u8(int4(u32s));
		uint p3 = pack_clamp_s8(int4(u32s));
		RW[thr + 1000] = uint4(p0, p1, p2, p3);
	}

	{
		uint16_t4 u16s = RW16[thr + 100000];
		uint p0 = pack_u8(u16s);
		uint p1 = pack_s8(int16_t4(u16s));
		uint p2 = pack_clamp_u8(int16_t4(u16s));
		uint p3 = pack_clamp_s8(int16_t4(u16s));
		RW16[thr + 1000] = uint16_t4(p0, p1, p2, p3);
	}
}
