#version 460
#extension GL_EXT_shader_explicit_arithmetic_types_int16 : require
#extension GL_EXT_shader_16bit_storage : require
#if defined(GL_AMD_gpu_shader_half_float)
#extension GL_AMD_gpu_shader_half_float : require
#elif defined(GL_EXT_shader_explicit_arithmetic_types_float16)
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : require
#else
#error No extension available for FP16.
#endif
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_nonuniform_qualifier : require
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(set = 4, binding = 0, std430) buffer SSBO
{
    uint16_t _m0[];
} _14[];

layout(set = 4, binding = 0, std430) buffer _16_19
{
    uint16_t _m0[];
} _19[];

layout(set = 4, binding = 0, std430) buffer _21_24
{
    uint _m0[];
} _24[];

layout(set = 4, binding = 0, std430) writeonly buffer _26_29
{
    uint16_t _m0[];
} _29[];

layout(set = 4, binding = 0, std430) buffer _31_34
{
    uint16_t _m0[];
} _34[];

layout(push_constant, std430) uniform RootConstants
{
    uint _m0;
    uint _m1;
    uint _m2;
    uint _m3;
    uint _m4;
    uint _m5;
    uint _m6;
    uint _m7;
} registers;

void main()
{
    uint _41 = registers._m4 + 6u;
    uint _46 = registers._m4 + 5u;
    uint _52 = registers._m4 + 4u;
    uint _57 = registers._m4 + 4u;
    uint _62 = registers._m4 + 3u;
    uint _67 = registers._m4 + 2u;
    uint _72 = registers._m4 + 1u;
    _14[registers._m4]._m0[gl_GlobalInvocationID.x] = float16BitsToUint16(uint16BitsToFloat16(_14[registers._m4]._m0[gl_GlobalInvocationID.x]) + float16_t(1.0));
    uint _93 = gl_GlobalInvocationID.x * 2u;
    uint16_t _95 = _14[_72]._m0[_93];
    uint16_t _98 = _14[_72]._m0[_93 + 1u];
    u16vec2 _100 = u16vec2(_95, _98);
    uint _106 = gl_GlobalInvocationID.x * 2u;
    _14[_72]._m0[_106] = _100.x + 2us;
    _14[_72]._m0[_106 + 1u] = _100.y + 2us;
    uint _110 = gl_GlobalInvocationID.x * 3u;
    uint16_t _112 = _14[_67]._m0[_110];
    uint16_t _115 = _14[_67]._m0[_110 + 1u];
    uint16_t _118 = _14[_67]._m0[_110 + 2u];
    f16vec3 _122 = uint16BitsToFloat16(u16vec3(_112, _115, _118));
    uint _130 = gl_GlobalInvocationID.x * 3u;
    _14[_67]._m0[_130] = float16BitsToUint16(_122.x + float16_t(3.0));
    _14[_67]._m0[_130 + 1u] = float16BitsToUint16(_122.y + float16_t(3.0));
    _14[_67]._m0[_130 + 2u] = float16BitsToUint16(_122.z + float16_t(3.0));
    uint _139 = gl_GlobalInvocationID.x * 4u;
    uint16_t _141 = _14[_62]._m0[_139];
    uint16_t _144 = _14[_62]._m0[_139 + 1u];
    uint16_t _147 = _14[_62]._m0[_139 + 2u];
    uint16_t _150 = _14[_62]._m0[_139 + 3u];
    u16vec4 _152 = u16vec4(_141, _144, _147, _150);
    uint _162 = gl_GlobalInvocationID.x * 4u;
    _14[_62]._m0[_162] = _152.x + 4us;
    _14[_62]._m0[_162 + 1u] = _152.y + 4us;
    _14[_62]._m0[_162 + 2u] = _152.z + 4us;
    _14[_62]._m0[_162 + 3u] = _152.w + 4us;
    uint16_t _172 = _19[_52]._m0[gl_GlobalInvocationID.x];
    float _175 = float(uint16BitsToFloat16(_172));
    uint _177 = gl_GlobalInvocationID.x * 2u;
    uint16_t _179 = _19[_52]._m0[_177];
    uint16_t _182 = _19[_52]._m0[_177 + 1u];
    f16vec2 _185 = uint16BitsToFloat16(u16vec2(_179, _182));
    float _189 = float(_185.y);
    float _190 = float(_185.x) + _175;
    uint _193 = gl_GlobalInvocationID.x * 3u;
    uint16_t _195 = _19[_52]._m0[_193];
    uint16_t _198 = _19[_52]._m0[_193 + 1u];
    uint16_t _201 = _19[_52]._m0[_193 + 2u];
    f16vec3 _203 = uint16BitsToFloat16(u16vec3(_195, _198, _201));
    float _207 = float(_203.x);
    uint _214 = gl_GlobalInvocationID.x * 4u;
    uint16_t _216 = _19[_52]._m0[_214];
    uint16_t _219 = _19[_52]._m0[_214 + 1u];
    uint16_t _222 = _19[_52]._m0[_214 + 2u];
    uint16_t _225 = _19[_52]._m0[_214 + 3u];
    f16vec4 _228 = uint16BitsToFloat16(u16vec4(_216, _219, _222, _225));
    uint16_t _241 = _19[_52]._m0[gl_GlobalInvocationID.x];
    float _242 = float(_241);
    uint _246 = gl_GlobalInvocationID.x * 2u;
    uint16_t _248 = _19[_52]._m0[_246];
    uint16_t _251 = _19[_52]._m0[_246 + 1u];
    u16vec2 _252 = u16vec2(_248, _251);
    float _255 = float(_252.x);
    float _256 = float(_252.y);
    uint _260 = gl_GlobalInvocationID.x * 3u;
    uint16_t _262 = _19[_52]._m0[_260];
    uint16_t _265 = _19[_52]._m0[_260 + 1u];
    uint16_t _268 = _19[_52]._m0[_260 + 2u];
    u16vec3 _269 = u16vec3(_262, _265, _268);
    float _273 = float(_269.x);
    uint _279 = gl_GlobalInvocationID.x * 4u;
    uint16_t _281 = _19[_52]._m0[_279];
    uint16_t _284 = _19[_52]._m0[_279 + 1u];
    uint16_t _287 = _19[_52]._m0[_279 + 2u];
    uint16_t _290 = _19[_52]._m0[_279 + 3u];
    u16vec4 _291 = u16vec4(_281, _284, _287, _290);
    _29[_46]._m0[gl_GlobalInvocationID.x] = float16BitsToUint16(float16_t(1.0));
    uint _305 = gl_GlobalInvocationID.x * 2u;
    _29[_46]._m0[_305] = float16BitsToUint16(float16_t(2.0));
    _29[_46]._m0[_305 + 1u] = float16BitsToUint16(float16_t(4.0));
    uint _313 = gl_GlobalInvocationID.x * 3u;
    _29[_46]._m0[_313] = float16BitsToUint16(float16_t(4.0));
    _29[_46]._m0[_313 + 1u] = float16BitsToUint16(float16_t(5.0));
    _29[_46]._m0[_313 + 2u] = float16BitsToUint16(float16_t(6.0));
    uint _324 = gl_GlobalInvocationID.x * 4u;
    _29[_46]._m0[_324] = float16BitsToUint16(float16_t(7.0));
    _29[_46]._m0[_324 + 1u] = float16BitsToUint16(float16_t(8.0));
    _29[_46]._m0[_324 + 2u] = float16BitsToUint16(float16_t(9.0));
    _29[_46]._m0[_324 + 3u] = float16BitsToUint16(float16_t(10.0));
    _29[_41]._m0[gl_GlobalInvocationID.x] = 1us;
    uint _342 = gl_GlobalInvocationID.x * 2u;
    _29[_41]._m0[_342] = 2us;
    _29[_41]._m0[_342 + 1u] = 4us;
    uint _346 = gl_GlobalInvocationID.x * 3u;
    _29[_41]._m0[_346] = 4us;
    _29[_41]._m0[_346 + 1u] = 5us;
    _29[_41]._m0[_346 + 2u] = 6us;
    uint _354 = gl_GlobalInvocationID.x * 4u;
    _29[_41]._m0[_354] = 7us;
    _29[_41]._m0[_354 + 1u] = 8us;
    _29[_41]._m0[_354 + 2u] = 9us;
    _29[_41]._m0[_354 + 3u] = 10us;
    uint _368 = _24[_57]._m0[gl_GlobalInvocationID.x];
    float _369 = uintBitsToFloat(_368);
    uint _378 = registers._m4 + (gl_GlobalInvocationID.x + 0u);
    uint16_t _381 = _34[nonuniformEXT(_378)]._m0[gl_GlobalInvocationID.x * 2u];
    float _383 = float(uint16BitsToFloat16(_381));
    float _384 = (((((((_190 + _207) + float(_228.x)) + _242) + _255) + _273) + float(_291.x)) + _369) + _383;
    float _385 = (((((((_190 + float(_203.y)) + float(_228.y)) + _242) + _255) + float(_269.y)) + float(_291.y)) + _369) + _383;
    uint _389 = gl_GlobalInvocationID.x * 4u;
    _34[nonuniformEXT(_378)]._m0[_389] = float16BitsToUint16(float16_t(_384));
    _34[nonuniformEXT(_378)]._m0[_389 + 1u] = float16BitsToUint16(float16_t(_385));
    uint _425 = gl_GlobalInvocationID.x * 4u;
    _24[_57]._m0[_425] = uint((float(uint(_14[registers._m4]._m0.length()) / 1u) + _384) + float(uint(_29[_46]._m0.length()) * 2u));
    _24[_57]._m0[_425 + 1u] = uint(_385 + 2.0);
    _24[_57]._m0[_425 + 2u] = uint((((((((((_189 + _175) + float(_203.z)) + float(_228.z)) + _242) + _256) + float(_269.z)) + float(_291.z)) + _369) + _383) + float(uint(_14[_62]._m0.length()) / 4u));
    _24[_57]._m0[_425 + 3u] = uint((((((((((_175 + 8.0) + _189) + _207) + float(_228.w)) + _242) + _256) + _273) + float(_291.w)) + _369) + _383);
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 435
; Schema: 0
OpCapability Shader
OpCapability Float16
OpCapability Int16
OpCapability StorageBufferArrayDynamicIndexing
OpCapability ImageQuery
OpCapability RuntimeDescriptorArray
OpCapability StorageBufferArrayNonUniformIndexing
OpCapability PhysicalStorageBufferAddresses
OpExtension "SPV_EXT_descriptor_indexing"
OpExtension "SPV_KHR_physical_storage_buffer"
OpMemoryModel PhysicalStorageBuffer64 GLSL450
OpEntryPoint GLCompute %3 "main" %79
OpExecutionMode %3 LocalSize 64 1 1
OpName %3 "main"
OpName %6 "RootConstants"
OpName %8 "registers"
OpName %11 "SSBO"
OpName %16 "SSBO"
OpName %21 "SSBO"
OpName %26 "SSBO"
OpName %31 "SSBO"
OpDecorate %6 Block
OpMemberDecorate %6 0 Offset 0
OpMemberDecorate %6 1 Offset 4
OpMemberDecorate %6 2 Offset 8
OpMemberDecorate %6 3 Offset 12
OpMemberDecorate %6 4 Offset 16
OpMemberDecorate %6 5 Offset 20
OpMemberDecorate %6 6 Offset 24
OpMemberDecorate %6 7 Offset 28
OpDecorate %10 ArrayStride 2
OpMemberDecorate %11 0 Offset 0
OpDecorate %11 Block
OpDecorate %14 DescriptorSet 4
OpDecorate %14 Binding 0
OpDecorate %15 ArrayStride 2
OpMemberDecorate %16 0 Offset 0
OpDecorate %16 Block
OpDecorate %19 DescriptorSet 4
OpDecorate %19 Binding 0
OpDecorate %19 Aliased
OpDecorate %20 ArrayStride 4
OpMemberDecorate %21 0 Offset 0
OpDecorate %21 Block
OpDecorate %24 DescriptorSet 4
OpDecorate %24 Binding 0
OpDecorate %24 Aliased
OpDecorate %25 ArrayStride 2
OpMemberDecorate %26 0 Offset 0
OpDecorate %26 Block
OpDecorate %29 DescriptorSet 4
OpDecorate %29 Binding 0
OpDecorate %29 NonReadable
OpDecorate %30 ArrayStride 2
OpMemberDecorate %31 0 Offset 0
OpDecorate %31 Block
OpDecorate %34 DescriptorSet 4
OpDecorate %34 Binding 0
OpDecorate %79 BuiltIn GlobalInvocationId
OpDecorate %378 NonUniform
OpDecorate %375 NonUniform
OpDecorate %380 NonUniform
OpDecorate %392 NonUniform
OpDecorate %393 NonUniform
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeStruct %5 %5 %5 %5 %5 %5 %5 %5
%7 = OpTypePointer PushConstant %6
%8 = OpVariable %7 PushConstant
%9 = OpTypeInt 16 0
%10 = OpTypeRuntimeArray %9
%11 = OpTypeStruct %10
%12 = OpTypeRuntimeArray %11
%13 = OpTypePointer StorageBuffer %12
%14 = OpVariable %13 StorageBuffer
%15 = OpTypeRuntimeArray %9
%16 = OpTypeStruct %15
%17 = OpTypeRuntimeArray %16
%18 = OpTypePointer StorageBuffer %17
%19 = OpVariable %18 StorageBuffer
%20 = OpTypeRuntimeArray %5
%21 = OpTypeStruct %20
%22 = OpTypeRuntimeArray %21
%23 = OpTypePointer StorageBuffer %22
%24 = OpVariable %23 StorageBuffer
%25 = OpTypeRuntimeArray %9
%26 = OpTypeStruct %25
%27 = OpTypeRuntimeArray %26
%28 = OpTypePointer StorageBuffer %27
%29 = OpVariable %28 StorageBuffer
%30 = OpTypeRuntimeArray %9
%31 = OpTypeStruct %30
%32 = OpTypeRuntimeArray %31
%33 = OpTypePointer StorageBuffer %32
%34 = OpVariable %33 StorageBuffer
%35 = OpTypePointer StorageBuffer %26
%37 = OpTypePointer PushConstant %5
%39 = OpConstant %5 4
%42 = OpConstant %5 6
%47 = OpConstant %5 5
%48 = OpTypePointer StorageBuffer %16
%53 = OpTypePointer StorageBuffer %21
%58 = OpTypePointer StorageBuffer %11
%63 = OpConstant %5 3
%68 = OpConstant %5 2
%73 = OpConstant %5 1
%77 = OpTypeVector %5 3
%78 = OpTypePointer Input %77
%79 = OpVariable %78 Input
%80 = OpTypePointer Input %5
%82 = OpConstant %5 0
%84 = OpTypePointer StorageBuffer %9
%87 = OpTypeFloat 16
%90 = OpConstant %87 0x1p+0
%99 = OpTypeVector %9 2
%104 = OpConstant %9 2
%119 = OpTypeVector %9 3
%121 = OpTypeVector %87 3
%127 = OpConstant %87 0x1.8p+1
%151 = OpTypeVector %9 4
%158 = OpConstant %9 4
%174 = OpTypeFloat 32
%184 = OpTypeVector %87 2
%227 = OpTypeVector %87 4
%306 = OpConstant %87 0x1p+1
%308 = OpConstant %87 0x1p+2
%315 = OpConstant %87 0x1.4p+2
%317 = OpConstant %87 0x1.8p+2
%325 = OpConstant %87 0x1.cp+2
%327 = OpConstant %87 0x1p+3
%329 = OpConstant %87 0x1.2p+3
%331 = OpConstant %87 0x1.4p+3
%340 = OpConstant %9 1
%347 = OpConstant %9 5
%348 = OpConstant %9 6
%355 = OpConstant %9 7
%356 = OpConstant %9 8
%357 = OpConstant %9 9
%358 = OpConstant %9 10
%366 = OpTypePointer StorageBuffer %5
%374 = OpTypePointer StorageBuffer %31
%400 = OpConstant %174 2
%406 = OpConstant %174 8
%3 = OpFunction %1 None %2
%4 = OpLabel
OpBranch %433
%433 = OpLabel
%38 = OpAccessChain %37 %8 %39
%40 = OpLoad %5 %38
%41 = OpIAdd %5 %40 %42
%36 = OpAccessChain %35 %29 %41
%44 = OpAccessChain %37 %8 %39
%45 = OpLoad %5 %44
%46 = OpIAdd %5 %45 %47
%43 = OpAccessChain %35 %29 %46
%50 = OpAccessChain %37 %8 %39
%51 = OpLoad %5 %50
%52 = OpIAdd %5 %51 %39
%49 = OpAccessChain %48 %19 %52
%55 = OpAccessChain %37 %8 %39
%56 = OpLoad %5 %55
%57 = OpIAdd %5 %56 %39
%54 = OpAccessChain %53 %24 %57
%60 = OpAccessChain %37 %8 %39
%61 = OpLoad %5 %60
%62 = OpIAdd %5 %61 %63
%59 = OpAccessChain %58 %14 %62
%65 = OpAccessChain %37 %8 %39
%66 = OpLoad %5 %65
%67 = OpIAdd %5 %66 %68
%64 = OpAccessChain %58 %14 %67
%70 = OpAccessChain %37 %8 %39
%71 = OpLoad %5 %70
%72 = OpIAdd %5 %71 %73
%69 = OpAccessChain %58 %14 %72
%75 = OpAccessChain %37 %8 %39
%76 = OpLoad %5 %75
%74 = OpAccessChain %58 %14 %76
%81 = OpAccessChain %80 %79 %82
%83 = OpLoad %5 %81
%85 = OpAccessChain %84 %74 %82 %83
%86 = OpLoad %9 %85
%88 = OpBitcast %87 %86
%89 = OpFAdd %87 %88 %90
%91 = OpBitcast %9 %89
%92 = OpAccessChain %84 %74 %82 %83
OpStore %92 %91
%93 = OpIMul %5 %83 %68
%94 = OpAccessChain %84 %69 %82 %93
%95 = OpLoad %9 %94
%97 = OpIAdd %5 %93 %73
%96 = OpAccessChain %84 %69 %82 %97
%98 = OpLoad %9 %96
%100 = OpCompositeConstruct %99 %95 %98
%101 = OpCompositeExtract %9 %100 0
%102 = OpCompositeExtract %9 %100 1
%103 = OpIAdd %9 %101 %104
%105 = OpIAdd %9 %102 %104
%106 = OpIMul %5 %83 %68
%107 = OpAccessChain %84 %69 %82 %106
OpStore %107 %103
%109 = OpIAdd %5 %106 %73
%108 = OpAccessChain %84 %69 %82 %109
OpStore %108 %105
%110 = OpIMul %5 %83 %63
%111 = OpAccessChain %84 %64 %82 %110
%112 = OpLoad %9 %111
%114 = OpIAdd %5 %110 %73
%113 = OpAccessChain %84 %64 %82 %114
%115 = OpLoad %9 %113
%117 = OpIAdd %5 %110 %68
%116 = OpAccessChain %84 %64 %82 %117
%118 = OpLoad %9 %116
%120 = OpCompositeConstruct %119 %112 %115 %118
%122 = OpBitcast %121 %120
%123 = OpCompositeExtract %87 %122 0
%124 = OpCompositeExtract %87 %122 1
%125 = OpCompositeExtract %87 %122 2
%126 = OpFAdd %87 %123 %127
%128 = OpFAdd %87 %124 %127
%129 = OpFAdd %87 %125 %127
%130 = OpIMul %5 %83 %63
%131 = OpBitcast %9 %126
%132 = OpBitcast %9 %128
%133 = OpBitcast %9 %129
%134 = OpAccessChain %84 %64 %82 %130
OpStore %134 %131
%136 = OpIAdd %5 %130 %73
%135 = OpAccessChain %84 %64 %82 %136
OpStore %135 %132
%138 = OpIAdd %5 %130 %68
%137 = OpAccessChain %84 %64 %82 %138
OpStore %137 %133
%139 = OpIMul %5 %83 %39
%140 = OpAccessChain %84 %59 %82 %139
%141 = OpLoad %9 %140
%143 = OpIAdd %5 %139 %73
%142 = OpAccessChain %84 %59 %82 %143
%144 = OpLoad %9 %142
%146 = OpIAdd %5 %139 %68
%145 = OpAccessChain %84 %59 %82 %146
%147 = OpLoad %9 %145
%149 = OpIAdd %5 %139 %63
%148 = OpAccessChain %84 %59 %82 %149
%150 = OpLoad %9 %148
%152 = OpCompositeConstruct %151 %141 %144 %147 %150
%153 = OpCompositeExtract %9 %152 0
%154 = OpCompositeExtract %9 %152 1
%155 = OpCompositeExtract %9 %152 2
%156 = OpCompositeExtract %9 %152 3
%157 = OpIAdd %9 %153 %158
%159 = OpIAdd %9 %154 %158
%160 = OpIAdd %9 %155 %158
%161 = OpIAdd %9 %156 %158
%162 = OpIMul %5 %83 %39
%163 = OpAccessChain %84 %59 %82 %162
OpStore %163 %157
%165 = OpIAdd %5 %162 %73
%164 = OpAccessChain %84 %59 %82 %165
OpStore %164 %159
%167 = OpIAdd %5 %162 %68
%166 = OpAccessChain %84 %59 %82 %167
OpStore %166 %160
%169 = OpIAdd %5 %162 %63
%168 = OpAccessChain %84 %59 %82 %169
OpStore %168 %161
%170 = OpShiftLeftLogical %5 %83 %73
%171 = OpAccessChain %84 %49 %82 %83
%172 = OpLoad %9 %171
%173 = OpBitcast %87 %172
%175 = OpFConvert %174 %173
%176 = OpShiftLeftLogical %5 %83 %68
%177 = OpIMul %5 %83 %68
%178 = OpAccessChain %84 %49 %82 %177
%179 = OpLoad %9 %178
%181 = OpIAdd %5 %177 %73
%180 = OpAccessChain %84 %49 %82 %181
%182 = OpLoad %9 %180
%183 = OpCompositeConstruct %99 %179 %182
%185 = OpBitcast %184 %183
%186 = OpCompositeExtract %87 %185 0
%187 = OpCompositeExtract %87 %185 1
%188 = OpFConvert %174 %186
%189 = OpFConvert %174 %187
%190 = OpFAdd %174 %188 %175
%191 = OpFAdd %174 %189 %175
%192 = OpIMul %5 %83 %42
%193 = OpIMul %5 %83 %63
%194 = OpAccessChain %84 %49 %82 %193
%195 = OpLoad %9 %194
%197 = OpIAdd %5 %193 %73
%196 = OpAccessChain %84 %49 %82 %197
%198 = OpLoad %9 %196
%200 = OpIAdd %5 %193 %68
%199 = OpAccessChain %84 %49 %82 %200
%201 = OpLoad %9 %199
%202 = OpCompositeConstruct %119 %195 %198 %201
%203 = OpBitcast %121 %202
%204 = OpCompositeExtract %87 %203 0
%205 = OpCompositeExtract %87 %203 1
%206 = OpCompositeExtract %87 %203 2
%207 = OpFConvert %174 %204
%208 = OpFConvert %174 %205
%209 = OpFConvert %174 %206
%210 = OpFAdd %174 %190 %207
%211 = OpFAdd %174 %190 %208
%212 = OpFAdd %174 %191 %209
%213 = OpShiftLeftLogical %5 %83 %63
%214 = OpIMul %5 %83 %39
%215 = OpAccessChain %84 %49 %82 %214
%216 = OpLoad %9 %215
%218 = OpIAdd %5 %214 %73
%217 = OpAccessChain %84 %49 %82 %218
%219 = OpLoad %9 %217
%221 = OpIAdd %5 %214 %68
%220 = OpAccessChain %84 %49 %82 %221
%222 = OpLoad %9 %220
%224 = OpIAdd %5 %214 %63
%223 = OpAccessChain %84 %49 %82 %224
%225 = OpLoad %9 %223
%226 = OpCompositeConstruct %151 %216 %219 %222 %225
%228 = OpBitcast %227 %226
%229 = OpCompositeExtract %87 %228 0
%230 = OpCompositeExtract %87 %228 1
%231 = OpCompositeExtract %87 %228 2
%232 = OpCompositeExtract %87 %228 3
%233 = OpFConvert %174 %229
%234 = OpFConvert %174 %230
%235 = OpFConvert %174 %231
%236 = OpFConvert %174 %232
%237 = OpFAdd %174 %210 %233
%238 = OpFAdd %174 %211 %234
%239 = OpFAdd %174 %212 %235
%240 = OpAccessChain %84 %49 %82 %83
%241 = OpLoad %9 %240
%242 = OpConvertUToF %174 %241
%243 = OpFAdd %174 %237 %242
%244 = OpFAdd %174 %238 %242
%245 = OpFAdd %174 %239 %242
%246 = OpIMul %5 %83 %68
%247 = OpAccessChain %84 %49 %82 %246
%248 = OpLoad %9 %247
%250 = OpIAdd %5 %246 %73
%249 = OpAccessChain %84 %49 %82 %250
%251 = OpLoad %9 %249
%252 = OpCompositeConstruct %99 %248 %251
%253 = OpCompositeExtract %9 %252 0
%254 = OpCompositeExtract %9 %252 1
%255 = OpConvertUToF %174 %253
%256 = OpConvertUToF %174 %254
%257 = OpFAdd %174 %243 %255
%258 = OpFAdd %174 %244 %255
%259 = OpFAdd %174 %245 %256
%260 = OpIMul %5 %83 %63
%261 = OpAccessChain %84 %49 %82 %260
%262 = OpLoad %9 %261
%264 = OpIAdd %5 %260 %73
%263 = OpAccessChain %84 %49 %82 %264
%265 = OpLoad %9 %263
%267 = OpIAdd %5 %260 %68
%266 = OpAccessChain %84 %49 %82 %267
%268 = OpLoad %9 %266
%269 = OpCompositeConstruct %119 %262 %265 %268
%270 = OpCompositeExtract %9 %269 0
%271 = OpCompositeExtract %9 %269 1
%272 = OpCompositeExtract %9 %269 2
%273 = OpConvertUToF %174 %270
%274 = OpConvertUToF %174 %271
%275 = OpConvertUToF %174 %272
%276 = OpFAdd %174 %257 %273
%277 = OpFAdd %174 %258 %274
%278 = OpFAdd %174 %259 %275
%279 = OpIMul %5 %83 %39
%280 = OpAccessChain %84 %49 %82 %279
%281 = OpLoad %9 %280
%283 = OpIAdd %5 %279 %73
%282 = OpAccessChain %84 %49 %82 %283
%284 = OpLoad %9 %282
%286 = OpIAdd %5 %279 %68
%285 = OpAccessChain %84 %49 %82 %286
%287 = OpLoad %9 %285
%289 = OpIAdd %5 %279 %63
%288 = OpAccessChain %84 %49 %82 %289
%290 = OpLoad %9 %288
%291 = OpCompositeConstruct %151 %281 %284 %287 %290
%292 = OpCompositeExtract %9 %291 0
%293 = OpCompositeExtract %9 %291 1
%294 = OpCompositeExtract %9 %291 2
%295 = OpCompositeExtract %9 %291 3
%296 = OpConvertUToF %174 %292
%297 = OpConvertUToF %174 %293
%298 = OpConvertUToF %174 %294
%299 = OpConvertUToF %174 %295
%300 = OpFAdd %174 %276 %296
%301 = OpFAdd %174 %277 %297
%302 = OpFAdd %174 %278 %298
%303 = OpBitcast %9 %90
%304 = OpAccessChain %84 %43 %82 %83
OpStore %304 %303
%305 = OpIMul %5 %83 %68
%307 = OpBitcast %9 %306
%309 = OpBitcast %9 %308
%310 = OpAccessChain %84 %43 %82 %305
OpStore %310 %307
%312 = OpIAdd %5 %305 %73
%311 = OpAccessChain %84 %43 %82 %312
OpStore %311 %309
%313 = OpIMul %5 %83 %63
%314 = OpBitcast %9 %308
%316 = OpBitcast %9 %315
%318 = OpBitcast %9 %317
%319 = OpAccessChain %84 %43 %82 %313
OpStore %319 %314
%321 = OpIAdd %5 %313 %73
%320 = OpAccessChain %84 %43 %82 %321
OpStore %320 %316
%323 = OpIAdd %5 %313 %68
%322 = OpAccessChain %84 %43 %82 %323
OpStore %322 %318
%324 = OpIMul %5 %83 %39
%326 = OpBitcast %9 %325
%328 = OpBitcast %9 %327
%330 = OpBitcast %9 %329
%332 = OpBitcast %9 %331
%333 = OpAccessChain %84 %43 %82 %324
OpStore %333 %326
%335 = OpIAdd %5 %324 %73
%334 = OpAccessChain %84 %43 %82 %335
OpStore %334 %328
%337 = OpIAdd %5 %324 %68
%336 = OpAccessChain %84 %43 %82 %337
OpStore %336 %330
%339 = OpIAdd %5 %324 %63
%338 = OpAccessChain %84 %43 %82 %339
OpStore %338 %332
%341 = OpAccessChain %84 %36 %82 %83
OpStore %341 %340
%342 = OpIMul %5 %83 %68
%343 = OpAccessChain %84 %36 %82 %342
OpStore %343 %104
%345 = OpIAdd %5 %342 %73
%344 = OpAccessChain %84 %36 %82 %345
OpStore %344 %158
%346 = OpIMul %5 %83 %63
%349 = OpAccessChain %84 %36 %82 %346
OpStore %349 %158
%351 = OpIAdd %5 %346 %73
%350 = OpAccessChain %84 %36 %82 %351
OpStore %350 %347
%353 = OpIAdd %5 %346 %68
%352 = OpAccessChain %84 %36 %82 %353
OpStore %352 %348
%354 = OpIMul %5 %83 %39
%359 = OpAccessChain %84 %36 %82 %354
OpStore %359 %355
%361 = OpIAdd %5 %354 %73
%360 = OpAccessChain %84 %36 %82 %361
OpStore %360 %356
%363 = OpIAdd %5 %354 %68
%362 = OpAccessChain %84 %36 %82 %363
OpStore %362 %357
%365 = OpIAdd %5 %354 %63
%364 = OpAccessChain %84 %36 %82 %365
OpStore %364 %358
%367 = OpAccessChain %366 %54 %82 %83
%368 = OpLoad %5 %367
%369 = OpBitcast %174 %368
%370 = OpFAdd %174 %300 %369
%371 = OpFAdd %174 %301 %369
%372 = OpFAdd %174 %302 %369
%373 = OpIAdd %5 %83 %82
%376 = OpAccessChain %37 %8 %39
%377 = OpLoad %5 %376
%378 = OpIAdd %5 %377 %373
%375 = OpAccessChain %374 %34 %378
%379 = OpIMul %5 %83 %68
%380 = OpAccessChain %84 %375 %82 %379
%381 = OpLoad %9 %380
%382 = OpBitcast %87 %381
%383 = OpFConvert %174 %382
%384 = OpFAdd %174 %370 %383
%385 = OpFAdd %174 %371 %383
%386 = OpFAdd %174 %372 %383
%387 = OpFConvert %87 %384
%388 = OpFConvert %87 %385
%389 = OpIMul %5 %83 %39
%390 = OpBitcast %9 %387
%391 = OpBitcast %9 %388
%392 = OpAccessChain %84 %375 %82 %389
OpStore %392 %390
%394 = OpIAdd %5 %389 %73
%393 = OpAccessChain %84 %375 %82 %394
OpStore %393 %391
%395 = OpArrayLength %5 %74 0
%396 = OpUDiv %5 %395 %73
%397 = OpConvertUToF %174 %396
%398 = OpFAdd %174 %397 %384
%399 = OpFAdd %174 %385 %400
%401 = OpArrayLength %5 %59 0
%402 = OpUDiv %5 %401 %39
%403 = OpConvertUToF %174 %402
%404 = OpFAdd %174 %386 %403
%405 = OpFAdd %174 %175 %406
%407 = OpFAdd %174 %405 %189
%408 = OpFAdd %174 %407 %207
%409 = OpFAdd %174 %408 %236
%410 = OpFAdd %174 %409 %242
%411 = OpFAdd %174 %410 %256
%412 = OpFAdd %174 %411 %273
%413 = OpFAdd %174 %412 %299
%414 = OpFAdd %174 %413 %369
%415 = OpFAdd %174 %414 %383
%416 = OpArrayLength %5 %43 0
%417 = OpIMul %5 %416 %68
%418 = OpConvertUToF %174 %417
%419 = OpFAdd %174 %398 %418
%420 = OpConvertFToU %5 %419
%421 = OpConvertFToU %5 %399
%422 = OpConvertFToU %5 %404
%423 = OpConvertFToU %5 %415
%424 = OpShiftLeftLogical %5 %83 %39
%425 = OpIMul %5 %83 %39
%426 = OpAccessChain %366 %54 %82 %425
OpStore %426 %420
%428 = OpIAdd %5 %425 %73
%427 = OpAccessChain %366 %54 %82 %428
OpStore %427 %421
%430 = OpIAdd %5 %425 %68
%429 = OpAccessChain %366 %54 %82 %430
OpStore %429 %422
%432 = OpIAdd %5 %425 %63
%431 = OpAccessChain %366 %54 %82 %432
OpStore %431 %423
OpReturn
OpFunctionEnd
#endif
