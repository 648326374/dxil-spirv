#version 460
#extension GL_EXT_shader_explicit_arithmetic_types_int16 : require
#extension GL_EXT_shader_16bit_storage : require
#if defined(GL_AMD_gpu_shader_half_float)
#extension GL_AMD_gpu_shader_half_float : require
#elif defined(GL_EXT_shader_explicit_arithmetic_types_float16)
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : require
#else
#error No extension available for FP16.
#endif
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_scalar_block_layout : require
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(set = 4, binding = 0, std430) buffer SSBO
{
    uint16_t _m0[];
} _14[];

layout(set = 4, binding = 0, std430) buffer _16_19
{
    uint16_t _m0[];
} _19[];

layout(set = 4, binding = 0, std430) buffer _22_25
{
    u16vec2 _m0[];
} _25[];

layout(set = 4, binding = 0, scalar) buffer _28_31
{
    u16vec3 _m0[];
} _31[];

layout(set = 4, binding = 0, std430) buffer _34_37
{
    u16vec4 _m0[];
} _37[];

layout(set = 4, binding = 0, std430) buffer _39_42
{
    uint _m0[];
} _42[];

layout(set = 4, binding = 0, std430) buffer _45_48
{
    uvec4 _m0[];
} _48[];

layout(set = 4, binding = 0, std430) writeonly buffer _50_53
{
    uint16_t _m0[];
} _53[];

layout(set = 4, binding = 0, std430) writeonly buffer _55_58
{
    u16vec2 _m0[];
} _58[];

layout(set = 4, binding = 0, scalar) writeonly buffer _60_63
{
    u16vec3 _m0[];
} _63[];

layout(set = 4, binding = 0, std430) writeonly buffer _65_68
{
    u16vec4 _m0[];
} _68[];

layout(push_constant, std430) uniform RootConstants
{
    uint _m0;
    uint _m1;
    uint _m2;
    uint _m3;
    uint _m4;
    uint _m5;
    uint _m6;
    uint _m7;
} registers;

void main()
{
    uint _108 = registers._m4 + 5u;
    uint _113 = registers._m4 + 4u;
    uint _118 = registers._m4 + 4u;
    uint _123 = registers._m4 + 4u;
    uint _128 = registers._m4 + 4u;
    uint _143 = registers._m4 + 3u;
    uint _148 = registers._m4 + 2u;
    uint _153 = registers._m4 + 1u;
    _14[registers._m4]._m0[gl_GlobalInvocationID.x] = float16BitsToUint16(uint16BitsToFloat16(_14[registers._m4]._m0[gl_GlobalInvocationID.x]) + float16_t(1.0));
    uint _174 = gl_GlobalInvocationID.x * 2u;
    uint16_t _176 = _14[_153]._m0[_174];
    uint16_t _179 = _14[_153]._m0[_174 + 1u];
    u16vec2 _180 = u16vec2(_176, _179);
    uint _186 = gl_GlobalInvocationID.x * 2u;
    _14[_153]._m0[_186] = _180.x + 2us;
    _14[_153]._m0[_186 + 1u] = _180.y + 2us;
    uint _190 = gl_GlobalInvocationID.x * 3u;
    uint16_t _192 = _14[_148]._m0[_190];
    uint16_t _195 = _14[_148]._m0[_190 + 1u];
    uint16_t _198 = _14[_148]._m0[_190 + 2u];
    f16vec3 _201 = uint16BitsToFloat16(u16vec3(_192, _195, _198));
    uint _209 = gl_GlobalInvocationID.x * 3u;
    _14[_148]._m0[_209] = float16BitsToUint16(_201.x + float16_t(3.0));
    _14[_148]._m0[_209 + 1u] = float16BitsToUint16(_201.y + float16_t(3.0));
    _14[_148]._m0[_209 + 2u] = float16BitsToUint16(_201.z + float16_t(3.0));
    uint _218 = gl_GlobalInvocationID.x * 4u;
    uint16_t _220 = _14[_143]._m0[_218];
    uint16_t _223 = _14[_143]._m0[_218 + 1u];
    uint16_t _226 = _14[_143]._m0[_218 + 2u];
    uint16_t _229 = _14[_143]._m0[_218 + 3u];
    u16vec4 _230 = u16vec4(_220, _223, _226, _229);
    uint _240 = gl_GlobalInvocationID.x * 4u;
    _14[_143]._m0[_240] = _230.x + 4us;
    _14[_143]._m0[_240 + 1u] = _230.y + 4us;
    _14[_143]._m0[_240 + 2u] = _230.z + 4us;
    _14[_143]._m0[_240 + 3u] = _230.w + 4us;
    uint16_t _250 = _19[_113]._m0[gl_GlobalInvocationID.x];
    float _253 = float(uint16BitsToFloat16(_250));
    u16vec2 _257 = _25[_118]._m0[gl_GlobalInvocationID.x];
    f16vec2 _259 = uint16BitsToFloat16(_257);
    float _263 = float(_259.y);
    float _264 = float(_259.x) + _253;
    u16vec3 _269 = _31[_123]._m0[gl_GlobalInvocationID.x];
    f16vec3 _270 = uint16BitsToFloat16(_269);
    float _274 = float(_270.x);
    u16vec4 _283 = _37[_128]._m0[gl_GlobalInvocationID.x];
    f16vec4 _285 = uint16BitsToFloat16(_283);
    uint16_t _298 = _19[_113]._m0[gl_GlobalInvocationID.x];
    float _299 = float(_298);
    u16vec2 _304 = _25[_118]._m0[gl_GlobalInvocationID.x];
    float _307 = float(_304.x);
    float _308 = float(_304.y);
    u16vec3 _313 = _31[_123]._m0[gl_GlobalInvocationID.x];
    float _317 = float(_313.x);
    u16vec4 _324 = _37[_128]._m0[gl_GlobalInvocationID.x];
    _53[registers._m4 + 5u]._m0[gl_GlobalInvocationID.x] = float16BitsToUint16(float16_t(1.0));
    _58[registers._m4 + 5u]._m0[gl_GlobalInvocationID.x] = u16vec2(float16BitsToUint16(float16_t(2.0)), float16BitsToUint16(float16_t(4.0)));
    _63[registers._m4 + 5u]._m0[gl_GlobalInvocationID.x] = u16vec3(float16BitsToUint16(float16_t(4.0)), float16BitsToUint16(float16_t(5.0)), float16BitsToUint16(float16_t(6.0)));
    _68[_108]._m0[gl_GlobalInvocationID.x] = u16vec4(float16BitsToUint16(float16_t(7.0)), float16BitsToUint16(float16_t(8.0)), float16BitsToUint16(float16_t(9.0)), float16BitsToUint16(float16_t(10.0)));
    _53[registers._m4 + 6u]._m0[gl_GlobalInvocationID.x] = 1us;
    _58[registers._m4 + 6u]._m0[gl_GlobalInvocationID.x] = u16vec2(2us, 4us);
    _63[registers._m4 + 6u]._m0[gl_GlobalInvocationID.x] = u16vec3(4us, 5us, 6us);
    _68[registers._m4 + 6u]._m0[gl_GlobalInvocationID.x] = u16vec4(7us, 8us, 9us, 10us);
    uint _377 = _42[registers._m4 + 4u]._m0[gl_GlobalInvocationID.x];
    float _378 = uintBitsToFloat(_377);
    uint _382 = gl_GlobalInvocationID.x + 0u;
    uint16_t _393 = _19[nonuniformEXT(registers._m4 + _382)]._m0[gl_GlobalInvocationID.x * 2u];
    float _395 = float(uint16BitsToFloat16(_393));
    float _396 = (((((((_264 + _274) + float(_285.x)) + _299) + _307) + _317) + float(_324.x)) + _378) + _395;
    float _397 = (((((((_264 + float(_270.y)) + float(_285.y)) + _299) + _307) + float(_313.y)) + float(_324.y)) + _378) + _395;
    _25[nonuniformEXT(registers._m4 + _382)]._m0[gl_GlobalInvocationID.x * 2u] = u16vec2(float16BitsToUint16(float16_t(_396)), float16BitsToUint16(float16_t(_397)));
    _48[registers._m4 + 4u]._m0[gl_GlobalInvocationID.x] = uvec4(uint((float(uint(_14[registers._m4]._m0.length()) / 1u) + _396) + float(uint(_68[_108]._m0.length()) * 8u)), uint(_397 + 2.0), uint((((((((((_263 + _253) + float(_270.z)) + float(_285.z)) + _299) + _308) + float(_313.z)) + float(_324.z)) + _378) + _395) + float(uint(_14[_143]._m0.length()) / 4u)), uint((((((((((_253 + 8.0) + _263) + _274) + float(_285.w)) + _299) + _308) + _317) + float(_324.w)) + _378) + _395));
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 442
; Schema: 0
OpCapability Shader
OpCapability Float16
OpCapability Int16
OpCapability StorageBufferArrayDynamicIndexing
OpCapability ImageQuery
OpCapability RuntimeDescriptorArray
OpCapability StorageBufferArrayNonUniformIndexing
OpCapability PhysicalStorageBufferAddresses
OpExtension "SPV_EXT_descriptor_indexing"
OpExtension "SPV_KHR_physical_storage_buffer"
OpMemoryModel PhysicalStorageBuffer64 GLSL450
OpEntryPoint GLCompute %3 "main" %160
OpExecutionMode %3 LocalSize 64 1 1
OpName %3 "main"
OpName %6 "RootConstants"
OpName %8 "registers"
OpName %11 "SSBO"
OpName %16 "SSBO"
OpName %22 "SSBO"
OpName %28 "SSBO"
OpName %34 "SSBO"
OpName %39 "SSBO"
OpName %45 "SSBO"
OpName %50 "SSBO"
OpName %55 "SSBO"
OpName %60 "SSBO"
OpName %65 "SSBO"
OpDecorate %6 Block
OpMemberDecorate %6 0 Offset 0
OpMemberDecorate %6 1 Offset 4
OpMemberDecorate %6 2 Offset 8
OpMemberDecorate %6 3 Offset 12
OpMemberDecorate %6 4 Offset 16
OpMemberDecorate %6 5 Offset 20
OpMemberDecorate %6 6 Offset 24
OpMemberDecorate %6 7 Offset 28
OpDecorate %10 ArrayStride 2
OpMemberDecorate %11 0 Offset 0
OpDecorate %11 Block
OpDecorate %14 DescriptorSet 4
OpDecorate %14 Binding 0
OpDecorate %15 ArrayStride 2
OpMemberDecorate %16 0 Offset 0
OpDecorate %16 Block
OpDecorate %19 DescriptorSet 4
OpDecorate %19 Binding 0
OpDecorate %19 Aliased
OpDecorate %21 ArrayStride 4
OpMemberDecorate %22 0 Offset 0
OpDecorate %22 Block
OpDecorate %25 DescriptorSet 4
OpDecorate %25 Binding 0
OpDecorate %25 Aliased
OpDecorate %27 ArrayStride 6
OpMemberDecorate %28 0 Offset 0
OpDecorate %28 Block
OpDecorate %31 DescriptorSet 4
OpDecorate %31 Binding 0
OpDecorate %31 Aliased
OpDecorate %33 ArrayStride 8
OpMemberDecorate %34 0 Offset 0
OpDecorate %34 Block
OpDecorate %37 DescriptorSet 4
OpDecorate %37 Binding 0
OpDecorate %37 Aliased
OpDecorate %38 ArrayStride 4
OpMemberDecorate %39 0 Offset 0
OpDecorate %39 Block
OpDecorate %42 DescriptorSet 4
OpDecorate %42 Binding 0
OpDecorate %42 Aliased
OpDecorate %44 ArrayStride 16
OpMemberDecorate %45 0 Offset 0
OpDecorate %45 Block
OpDecorate %48 DescriptorSet 4
OpDecorate %48 Binding 0
OpDecorate %48 Aliased
OpDecorate %49 ArrayStride 2
OpMemberDecorate %50 0 Offset 0
OpDecorate %50 Block
OpDecorate %53 DescriptorSet 4
OpDecorate %53 Binding 0
OpDecorate %53 NonReadable
OpDecorate %53 Aliased
OpDecorate %54 ArrayStride 4
OpMemberDecorate %55 0 Offset 0
OpDecorate %55 Block
OpDecorate %58 DescriptorSet 4
OpDecorate %58 Binding 0
OpDecorate %58 NonReadable
OpDecorate %58 Aliased
OpDecorate %59 ArrayStride 6
OpMemberDecorate %60 0 Offset 0
OpDecorate %60 Block
OpDecorate %63 DescriptorSet 4
OpDecorate %63 Binding 0
OpDecorate %63 NonReadable
OpDecorate %63 Aliased
OpDecorate %64 ArrayStride 8
OpMemberDecorate %65 0 Offset 0
OpDecorate %65 Block
OpDecorate %68 DescriptorSet 4
OpDecorate %68 Binding 0
OpDecorate %68 NonReadable
OpDecorate %68 Aliased
OpDecorate %160 BuiltIn GlobalInvocationId
OpDecorate %386 NonUniform
OpDecorate %383 NonUniform
OpDecorate %390 NonUniform
OpDecorate %387 NonUniform
OpDecorate %392 NonUniform
OpDecorate %405 NonUniform
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeStruct %5 %5 %5 %5 %5 %5 %5 %5
%7 = OpTypePointer PushConstant %6
%8 = OpVariable %7 PushConstant
%9 = OpTypeInt 16 0
%10 = OpTypeRuntimeArray %9
%11 = OpTypeStruct %10
%12 = OpTypeRuntimeArray %11
%13 = OpTypePointer StorageBuffer %12
%14 = OpVariable %13 StorageBuffer
%15 = OpTypeRuntimeArray %9
%16 = OpTypeStruct %15
%17 = OpTypeRuntimeArray %16
%18 = OpTypePointer StorageBuffer %17
%19 = OpVariable %18 StorageBuffer
%20 = OpTypeVector %9 2
%21 = OpTypeRuntimeArray %20
%22 = OpTypeStruct %21
%23 = OpTypeRuntimeArray %22
%24 = OpTypePointer StorageBuffer %23
%25 = OpVariable %24 StorageBuffer
%26 = OpTypeVector %9 3
%27 = OpTypeRuntimeArray %26
%28 = OpTypeStruct %27
%29 = OpTypeRuntimeArray %28
%30 = OpTypePointer StorageBuffer %29
%31 = OpVariable %30 StorageBuffer
%32 = OpTypeVector %9 4
%33 = OpTypeRuntimeArray %32
%34 = OpTypeStruct %33
%35 = OpTypeRuntimeArray %34
%36 = OpTypePointer StorageBuffer %35
%37 = OpVariable %36 StorageBuffer
%38 = OpTypeRuntimeArray %5
%39 = OpTypeStruct %38
%40 = OpTypeRuntimeArray %39
%41 = OpTypePointer StorageBuffer %40
%42 = OpVariable %41 StorageBuffer
%43 = OpTypeVector %5 4
%44 = OpTypeRuntimeArray %43
%45 = OpTypeStruct %44
%46 = OpTypeRuntimeArray %45
%47 = OpTypePointer StorageBuffer %46
%48 = OpVariable %47 StorageBuffer
%49 = OpTypeRuntimeArray %9
%50 = OpTypeStruct %49
%51 = OpTypeRuntimeArray %50
%52 = OpTypePointer StorageBuffer %51
%53 = OpVariable %52 StorageBuffer
%54 = OpTypeRuntimeArray %20
%55 = OpTypeStruct %54
%56 = OpTypeRuntimeArray %55
%57 = OpTypePointer StorageBuffer %56
%58 = OpVariable %57 StorageBuffer
%59 = OpTypeRuntimeArray %26
%60 = OpTypeStruct %59
%61 = OpTypeRuntimeArray %60
%62 = OpTypePointer StorageBuffer %61
%63 = OpVariable %62 StorageBuffer
%64 = OpTypeRuntimeArray %32
%65 = OpTypeStruct %64
%66 = OpTypeRuntimeArray %65
%67 = OpTypePointer StorageBuffer %66
%68 = OpVariable %67 StorageBuffer
%69 = OpTypePointer StorageBuffer %50
%71 = OpTypePointer PushConstant %5
%73 = OpConstant %5 4
%76 = OpConstant %5 6
%77 = OpTypePointer StorageBuffer %55
%82 = OpTypePointer StorageBuffer %60
%87 = OpTypePointer StorageBuffer %65
%96 = OpConstant %5 5
%109 = OpTypePointer StorageBuffer %16
%114 = OpTypePointer StorageBuffer %22
%119 = OpTypePointer StorageBuffer %28
%124 = OpTypePointer StorageBuffer %34
%129 = OpTypePointer StorageBuffer %39
%134 = OpTypePointer StorageBuffer %45
%139 = OpTypePointer StorageBuffer %11
%144 = OpConstant %5 3
%149 = OpConstant %5 2
%154 = OpConstant %5 1
%158 = OpTypeVector %5 3
%159 = OpTypePointer Input %158
%160 = OpVariable %159 Input
%161 = OpTypePointer Input %5
%163 = OpConstant %5 0
%165 = OpTypePointer StorageBuffer %9
%168 = OpTypeFloat 16
%171 = OpConstant %168 0x1p+0
%184 = OpConstant %9 2
%200 = OpTypeVector %168 3
%206 = OpConstant %168 0x1.8p+1
%236 = OpConstant %9 4
%252 = OpTypeFloat 32
%255 = OpTypePointer StorageBuffer %20
%258 = OpTypeVector %168 2
%267 = OpTypePointer StorageBuffer %26
%281 = OpTypePointer StorageBuffer %32
%284 = OpTypeVector %168 4
%338 = OpConstant %168 0x1p+1
%340 = OpConstant %168 0x1p+2
%345 = OpConstant %168 0x1.4p+2
%347 = OpConstant %168 0x1.8p+2
%351 = OpConstant %168 0x1.cp+2
%353 = OpConstant %168 0x1p+3
%355 = OpConstant %168 0x1.2p+3
%357 = OpConstant %168 0x1.4p+3
%361 = OpConstant %9 1
%365 = OpConstant %9 5
%366 = OpConstant %9 6
%369 = OpConstant %9 7
%370 = OpConstant %9 8
%371 = OpConstant %9 9
%372 = OpConstant %9 10
%375 = OpTypePointer StorageBuffer %5
%411 = OpConstant %252 2
%417 = OpConstant %252 8
%429 = OpConstant %5 8
%438 = OpTypePointer StorageBuffer %43
%3 = OpFunction %1 None %2
%4 = OpLabel
OpBranch %440
%440 = OpLabel
%72 = OpAccessChain %71 %8 %73
%74 = OpLoad %5 %72
%75 = OpIAdd %5 %74 %76
%70 = OpAccessChain %69 %53 %75
%79 = OpAccessChain %71 %8 %73
%80 = OpLoad %5 %79
%81 = OpIAdd %5 %80 %76
%78 = OpAccessChain %77 %58 %81
%84 = OpAccessChain %71 %8 %73
%85 = OpLoad %5 %84
%86 = OpIAdd %5 %85 %76
%83 = OpAccessChain %82 %63 %86
%89 = OpAccessChain %71 %8 %73
%90 = OpLoad %5 %89
%91 = OpIAdd %5 %90 %76
%88 = OpAccessChain %87 %68 %91
%93 = OpAccessChain %71 %8 %73
%94 = OpLoad %5 %93
%95 = OpIAdd %5 %94 %96
%92 = OpAccessChain %69 %53 %95
%98 = OpAccessChain %71 %8 %73
%99 = OpLoad %5 %98
%100 = OpIAdd %5 %99 %96
%97 = OpAccessChain %77 %58 %100
%102 = OpAccessChain %71 %8 %73
%103 = OpLoad %5 %102
%104 = OpIAdd %5 %103 %96
%101 = OpAccessChain %82 %63 %104
%106 = OpAccessChain %71 %8 %73
%107 = OpLoad %5 %106
%108 = OpIAdd %5 %107 %96
%105 = OpAccessChain %87 %68 %108
%111 = OpAccessChain %71 %8 %73
%112 = OpLoad %5 %111
%113 = OpIAdd %5 %112 %73
%110 = OpAccessChain %109 %19 %113
%116 = OpAccessChain %71 %8 %73
%117 = OpLoad %5 %116
%118 = OpIAdd %5 %117 %73
%115 = OpAccessChain %114 %25 %118
%121 = OpAccessChain %71 %8 %73
%122 = OpLoad %5 %121
%123 = OpIAdd %5 %122 %73
%120 = OpAccessChain %119 %31 %123
%126 = OpAccessChain %71 %8 %73
%127 = OpLoad %5 %126
%128 = OpIAdd %5 %127 %73
%125 = OpAccessChain %124 %37 %128
%131 = OpAccessChain %71 %8 %73
%132 = OpLoad %5 %131
%133 = OpIAdd %5 %132 %73
%130 = OpAccessChain %129 %42 %133
%136 = OpAccessChain %71 %8 %73
%137 = OpLoad %5 %136
%138 = OpIAdd %5 %137 %73
%135 = OpAccessChain %134 %48 %138
%141 = OpAccessChain %71 %8 %73
%142 = OpLoad %5 %141
%143 = OpIAdd %5 %142 %144
%140 = OpAccessChain %139 %14 %143
%146 = OpAccessChain %71 %8 %73
%147 = OpLoad %5 %146
%148 = OpIAdd %5 %147 %149
%145 = OpAccessChain %139 %14 %148
%151 = OpAccessChain %71 %8 %73
%152 = OpLoad %5 %151
%153 = OpIAdd %5 %152 %154
%150 = OpAccessChain %139 %14 %153
%156 = OpAccessChain %71 %8 %73
%157 = OpLoad %5 %156
%155 = OpAccessChain %139 %14 %157
%162 = OpAccessChain %161 %160 %163
%164 = OpLoad %5 %162
%166 = OpAccessChain %165 %155 %163 %164
%167 = OpLoad %9 %166
%169 = OpBitcast %168 %167
%170 = OpFAdd %168 %169 %171
%172 = OpBitcast %9 %170
%173 = OpAccessChain %165 %155 %163 %164
OpStore %173 %172
%174 = OpIMul %5 %164 %149
%175 = OpAccessChain %165 %150 %163 %174
%176 = OpLoad %9 %175
%178 = OpIAdd %5 %174 %154
%177 = OpAccessChain %165 %150 %163 %178
%179 = OpLoad %9 %177
%180 = OpCompositeConstruct %20 %176 %179
%181 = OpCompositeExtract %9 %180 0
%182 = OpCompositeExtract %9 %180 1
%183 = OpIAdd %9 %181 %184
%185 = OpIAdd %9 %182 %184
%186 = OpIMul %5 %164 %149
%187 = OpAccessChain %165 %150 %163 %186
OpStore %187 %183
%189 = OpIAdd %5 %186 %154
%188 = OpAccessChain %165 %150 %163 %189
OpStore %188 %185
%190 = OpIMul %5 %164 %144
%191 = OpAccessChain %165 %145 %163 %190
%192 = OpLoad %9 %191
%194 = OpIAdd %5 %190 %154
%193 = OpAccessChain %165 %145 %163 %194
%195 = OpLoad %9 %193
%197 = OpIAdd %5 %190 %149
%196 = OpAccessChain %165 %145 %163 %197
%198 = OpLoad %9 %196
%199 = OpCompositeConstruct %26 %192 %195 %198
%201 = OpBitcast %200 %199
%202 = OpCompositeExtract %168 %201 0
%203 = OpCompositeExtract %168 %201 1
%204 = OpCompositeExtract %168 %201 2
%205 = OpFAdd %168 %202 %206
%207 = OpFAdd %168 %203 %206
%208 = OpFAdd %168 %204 %206
%209 = OpIMul %5 %164 %144
%210 = OpBitcast %9 %205
%211 = OpBitcast %9 %207
%212 = OpBitcast %9 %208
%213 = OpAccessChain %165 %145 %163 %209
OpStore %213 %210
%215 = OpIAdd %5 %209 %154
%214 = OpAccessChain %165 %145 %163 %215
OpStore %214 %211
%217 = OpIAdd %5 %209 %149
%216 = OpAccessChain %165 %145 %163 %217
OpStore %216 %212
%218 = OpIMul %5 %164 %73
%219 = OpAccessChain %165 %140 %163 %218
%220 = OpLoad %9 %219
%222 = OpIAdd %5 %218 %154
%221 = OpAccessChain %165 %140 %163 %222
%223 = OpLoad %9 %221
%225 = OpIAdd %5 %218 %149
%224 = OpAccessChain %165 %140 %163 %225
%226 = OpLoad %9 %224
%228 = OpIAdd %5 %218 %144
%227 = OpAccessChain %165 %140 %163 %228
%229 = OpLoad %9 %227
%230 = OpCompositeConstruct %32 %220 %223 %226 %229
%231 = OpCompositeExtract %9 %230 0
%232 = OpCompositeExtract %9 %230 1
%233 = OpCompositeExtract %9 %230 2
%234 = OpCompositeExtract %9 %230 3
%235 = OpIAdd %9 %231 %236
%237 = OpIAdd %9 %232 %236
%238 = OpIAdd %9 %233 %236
%239 = OpIAdd %9 %234 %236
%240 = OpIMul %5 %164 %73
%241 = OpAccessChain %165 %140 %163 %240
OpStore %241 %235
%243 = OpIAdd %5 %240 %154
%242 = OpAccessChain %165 %140 %163 %243
OpStore %242 %237
%245 = OpIAdd %5 %240 %149
%244 = OpAccessChain %165 %140 %163 %245
OpStore %244 %238
%247 = OpIAdd %5 %240 %144
%246 = OpAccessChain %165 %140 %163 %247
OpStore %246 %239
%248 = OpShiftLeftLogical %5 %164 %154
%249 = OpAccessChain %165 %110 %163 %164
%250 = OpLoad %9 %249
%251 = OpBitcast %168 %250
%253 = OpFConvert %252 %251
%254 = OpShiftLeftLogical %5 %164 %149
%256 = OpAccessChain %255 %115 %163 %164
%257 = OpLoad %20 %256
%259 = OpBitcast %258 %257
%260 = OpCompositeExtract %168 %259 0
%261 = OpCompositeExtract %168 %259 1
%262 = OpFConvert %252 %260
%263 = OpFConvert %252 %261
%264 = OpFAdd %252 %262 %253
%265 = OpFAdd %252 %263 %253
%266 = OpIMul %5 %164 %76
%268 = OpAccessChain %267 %120 %163 %164
%269 = OpLoad %26 %268
%270 = OpBitcast %200 %269
%271 = OpCompositeExtract %168 %270 0
%272 = OpCompositeExtract %168 %270 1
%273 = OpCompositeExtract %168 %270 2
%274 = OpFConvert %252 %271
%275 = OpFConvert %252 %272
%276 = OpFConvert %252 %273
%277 = OpFAdd %252 %264 %274
%278 = OpFAdd %252 %264 %275
%279 = OpFAdd %252 %265 %276
%280 = OpShiftLeftLogical %5 %164 %144
%282 = OpAccessChain %281 %125 %163 %164
%283 = OpLoad %32 %282
%285 = OpBitcast %284 %283
%286 = OpCompositeExtract %168 %285 0
%287 = OpCompositeExtract %168 %285 1
%288 = OpCompositeExtract %168 %285 2
%289 = OpCompositeExtract %168 %285 3
%290 = OpFConvert %252 %286
%291 = OpFConvert %252 %287
%292 = OpFConvert %252 %288
%293 = OpFConvert %252 %289
%294 = OpFAdd %252 %277 %290
%295 = OpFAdd %252 %278 %291
%296 = OpFAdd %252 %279 %292
%297 = OpAccessChain %165 %110 %163 %164
%298 = OpLoad %9 %297
%299 = OpConvertUToF %252 %298
%300 = OpFAdd %252 %294 %299
%301 = OpFAdd %252 %295 %299
%302 = OpFAdd %252 %296 %299
%303 = OpAccessChain %255 %115 %163 %164
%304 = OpLoad %20 %303
%305 = OpCompositeExtract %9 %304 0
%306 = OpCompositeExtract %9 %304 1
%307 = OpConvertUToF %252 %305
%308 = OpConvertUToF %252 %306
%309 = OpFAdd %252 %300 %307
%310 = OpFAdd %252 %301 %307
%311 = OpFAdd %252 %302 %308
%312 = OpAccessChain %267 %120 %163 %164
%313 = OpLoad %26 %312
%314 = OpCompositeExtract %9 %313 0
%315 = OpCompositeExtract %9 %313 1
%316 = OpCompositeExtract %9 %313 2
%317 = OpConvertUToF %252 %314
%318 = OpConvertUToF %252 %315
%319 = OpConvertUToF %252 %316
%320 = OpFAdd %252 %309 %317
%321 = OpFAdd %252 %310 %318
%322 = OpFAdd %252 %311 %319
%323 = OpAccessChain %281 %125 %163 %164
%324 = OpLoad %32 %323
%325 = OpCompositeExtract %9 %324 0
%326 = OpCompositeExtract %9 %324 1
%327 = OpCompositeExtract %9 %324 2
%328 = OpCompositeExtract %9 %324 3
%329 = OpConvertUToF %252 %325
%330 = OpConvertUToF %252 %326
%331 = OpConvertUToF %252 %327
%332 = OpConvertUToF %252 %328
%333 = OpFAdd %252 %320 %329
%334 = OpFAdd %252 %321 %330
%335 = OpFAdd %252 %322 %331
%336 = OpBitcast %9 %171
%337 = OpAccessChain %165 %92 %163 %164
OpStore %337 %336
%339 = OpBitcast %9 %338
%341 = OpBitcast %9 %340
%342 = OpCompositeConstruct %20 %339 %341
%343 = OpAccessChain %255 %97 %163 %164
OpStore %343 %342
%344 = OpBitcast %9 %340
%346 = OpBitcast %9 %345
%348 = OpBitcast %9 %347
%349 = OpCompositeConstruct %26 %344 %346 %348
%350 = OpAccessChain %267 %101 %163 %164
OpStore %350 %349
%352 = OpBitcast %9 %351
%354 = OpBitcast %9 %353
%356 = OpBitcast %9 %355
%358 = OpBitcast %9 %357
%359 = OpCompositeConstruct %32 %352 %354 %356 %358
%360 = OpAccessChain %281 %105 %163 %164
OpStore %360 %359
%362 = OpAccessChain %165 %70 %163 %164
OpStore %362 %361
%363 = OpCompositeConstruct %20 %184 %236
%364 = OpAccessChain %255 %78 %163 %164
OpStore %364 %363
%367 = OpCompositeConstruct %26 %236 %365 %366
%368 = OpAccessChain %267 %83 %163 %164
OpStore %368 %367
%373 = OpCompositeConstruct %32 %369 %370 %371 %372
%374 = OpAccessChain %281 %88 %163 %164
OpStore %374 %373
%376 = OpAccessChain %375 %130 %163 %164
%377 = OpLoad %5 %376
%378 = OpBitcast %252 %377
%379 = OpFAdd %252 %333 %378
%380 = OpFAdd %252 %334 %378
%381 = OpFAdd %252 %335 %378
%382 = OpIAdd %5 %164 %163
%384 = OpAccessChain %71 %8 %73
%385 = OpLoad %5 %384
%386 = OpIAdd %5 %385 %382
%383 = OpAccessChain %109 %19 %386
%388 = OpAccessChain %71 %8 %73
%389 = OpLoad %5 %388
%390 = OpIAdd %5 %389 %382
%387 = OpAccessChain %114 %25 %390
%391 = OpIMul %5 %164 %149
%392 = OpAccessChain %165 %383 %163 %391
%393 = OpLoad %9 %392
%394 = OpBitcast %168 %393
%395 = OpFConvert %252 %394
%396 = OpFAdd %252 %379 %395
%397 = OpFAdd %252 %380 %395
%398 = OpFAdd %252 %381 %395
%399 = OpFConvert %168 %396
%400 = OpFConvert %168 %397
%401 = OpIMul %5 %164 %149
%402 = OpBitcast %9 %399
%403 = OpBitcast %9 %400
%404 = OpCompositeConstruct %20 %402 %403
%405 = OpAccessChain %255 %387 %163 %401
OpStore %405 %404
%406 = OpArrayLength %5 %155 0
%407 = OpUDiv %5 %406 %154
%408 = OpConvertUToF %252 %407
%409 = OpFAdd %252 %408 %396
%410 = OpFAdd %252 %397 %411
%412 = OpArrayLength %5 %140 0
%413 = OpUDiv %5 %412 %73
%414 = OpConvertUToF %252 %413
%415 = OpFAdd %252 %398 %414
%416 = OpFAdd %252 %253 %417
%418 = OpFAdd %252 %416 %263
%419 = OpFAdd %252 %418 %274
%420 = OpFAdd %252 %419 %293
%421 = OpFAdd %252 %420 %299
%422 = OpFAdd %252 %421 %308
%423 = OpFAdd %252 %422 %317
%424 = OpFAdd %252 %423 %332
%425 = OpFAdd %252 %424 %378
%426 = OpFAdd %252 %425 %395
%427 = OpArrayLength %5 %105 0
%428 = OpIMul %5 %427 %429
%430 = OpConvertUToF %252 %428
%431 = OpFAdd %252 %409 %430
%432 = OpConvertFToU %5 %431
%433 = OpConvertFToU %5 %410
%434 = OpConvertFToU %5 %415
%435 = OpConvertFToU %5 %426
%436 = OpShiftLeftLogical %5 %164 %73
%437 = OpCompositeConstruct %43 %432 %433 %434 %435
%439 = OpAccessChain %438 %135 %163 %164
OpStore %439 %437
OpReturn
OpFunctionEnd
#endif
