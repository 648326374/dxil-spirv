#version 460
#if defined(GL_AMD_gpu_shader_half_float)
#extension GL_AMD_gpu_shader_half_float : require
#elif defined(GL_EXT_shader_explicit_arithmetic_types_float16)
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : require
#else
#error No extension available for FP16.
#endif
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_buffer_reference : require
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

struct AddCarry
{
    uint _m0;
    uint _m1;
};

layout(buffer_reference) buffer PhysicalPointerFloat4NonWrite;
layout(buffer_reference) buffer PhysicalPointerFloat4NonWriteCBVArray;
layout(buffer_reference) buffer PhysicalPointerFloat4Coherent;
layout(buffer_reference) buffer PhysicalPointerHalf;
layout(buffer_reference) buffer PhysicalPointerHalf2;
layout(buffer_reference) buffer PhysicalPointerHalf3;
layout(buffer_reference) buffer PhysicalPointerHalf4;
layout(buffer_reference) buffer PhysicalPointerUint2;
layout(buffer_reference, std430) readonly buffer PhysicalPointerFloat4NonWrite
{
    vec4 value;
};

layout(buffer_reference, std430) readonly buffer PhysicalPointerFloat4NonWriteCBVArray
{
    vec4 value[4096];
};

layout(buffer_reference, std430) coherent buffer PhysicalPointerFloat4Coherent
{
    vec4 value;
};

layout(buffer_reference, std430) buffer PhysicalPointerHalf
{
    float16_t value;
};

layout(buffer_reference, std430) buffer PhysicalPointerHalf2
{
    f16vec2 value;
};

layout(buffer_reference, std430) buffer PhysicalPointerHalf3
{
    f16vec3 value;
};

layout(buffer_reference, std430) buffer PhysicalPointerHalf4
{
    f16vec4 value;
};

layout(buffer_reference, std430) buffer PhysicalPointerUint2
{
    uvec2 value;
};

layout(push_constant, std430) uniform RootConstants
{
    uvec2 _m0;
    uvec2 _m1;
    uvec2 _m2;
    uvec2 _m3;
} registers;

float16_t _96;
uint _160;

void main()
{
    AddCarry _39;
    _39._m0 = uaddCarry(registers._m1.x, (gl_GlobalInvocationID.x * 16u) + 0u, _39._m1);
    PhysicalPointerFloat4NonWrite _44 = PhysicalPointerFloat4NonWrite(uvec2(_39._m0, registers._m1.y + _39._m1));
    PhysicalPointerFloat4NonWriteCBVArray _56 = PhysicalPointerFloat4NonWriteCBVArray(registers._m0);
    AddCarry _73;
    _73._m0 = uaddCarry(registers._m2.x, (gl_GlobalInvocationID.x * 16u) + 0u, _73._m1);
    PhysicalPointerFloat4Coherent(uvec2(_73._m0, registers._m2.y + _73._m1)).value = vec4(_56.value[gl_GlobalInvocationID.x].x + _44.value.x, _56.value[gl_GlobalInvocationID.x].y + _44.value.y, _56.value[gl_GlobalInvocationID.x].z + _44.value.z, _56.value[gl_GlobalInvocationID.x].w + _44.value.w);
    AddCarry _87;
    _87._m0 = uaddCarry(registers._m3.x, gl_GlobalInvocationID.x << 1u, _87._m1);
    PhysicalPointerHalf(uvec2(_87._m0, registers._m3.y + _87._m1)).value = float16_t(1.0);
    AddCarry _103;
    _103._m0 = uaddCarry(registers._m3.x, gl_GlobalInvocationID.x << 2u, _103._m1);
    PhysicalPointerHalf2(uvec2(_103._m0, registers._m3.y + _103._m1)).value = f16vec2(float16_t(1.0), float16_t(2.0));
    AddCarry _120;
    _120._m0 = uaddCarry(registers._m3.x, gl_GlobalInvocationID.x * 6u, _120._m1);
    PhysicalPointerHalf3(uvec2(_120._m0, registers._m3.y + _120._m1)).value = f16vec3(float16_t(1.0), float16_t(2.0), float16_t(3.0));
    uint _130 = gl_GlobalInvocationID.x << 3u;
    AddCarry _136;
    _136._m0 = uaddCarry(registers._m3.x, _130, _136._m1);
    PhysicalPointerHalf4(uvec2(_136._m0, registers._m3.y + _136._m1)).value = f16vec4(float16_t(1.0), float16_t(2.0), float16_t(3.0), float16_t(4.0));
    AddCarry _150;
    _150._m0 = uaddCarry(registers._m3.x, _130, _150._m1);
    PhysicalPointerUint2(uvec2(_150._m0, registers._m3.y + _150._m1)).value = uvec2(4u, 5u);
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 164
; Schema: 0
OpCapability Shader
OpCapability Float16
OpCapability PhysicalStorageBufferAddresses
OpExtension "SPV_KHR_physical_storage_buffer"
OpMemoryModel PhysicalStorageBuffer64 GLSL450
OpEntryPoint GLCompute %3 "main" %25
OpExecutionMode %3 LocalSize 1 1 1
OpName %3 "main"
OpName %7 "RootConstants"
OpName %9 "registers"
OpName %31 "PhysicalPointerFloat4NonWrite"
OpMemberName %31 0 "value"
OpName %38 "AddCarry"
OpName %54 "PhysicalPointerFloat4NonWriteCBVArray"
OpMemberName %54 0 "value"
OpName %67 "PhysicalPointerFloat4Coherent"
OpMemberName %67 0 "value"
OpName %83 "PhysicalPointerHalf"
OpMemberName %83 0 "value"
OpName %99 "PhysicalPointerHalf2"
OpMemberName %99 0 "value"
OpName %116 "PhysicalPointerHalf3"
OpMemberName %116 0 "value"
OpName %132 "PhysicalPointerHalf4"
OpMemberName %132 0 "value"
OpName %146 "PhysicalPointerUint2"
OpMemberName %146 0 "value"
OpDecorate %7 Block
OpMemberDecorate %7 0 Offset 0
OpMemberDecorate %7 1 Offset 8
OpMemberDecorate %7 2 Offset 16
OpMemberDecorate %7 3 Offset 24
OpDecorate %25 BuiltIn GlobalInvocationId
OpMemberDecorate %31 0 Offset 0
OpDecorate %31 Block
OpMemberDecorate %31 0 NonWritable
OpDecorate %53 ArrayStride 16
OpMemberDecorate %54 0 Offset 0
OpDecorate %54 Block
OpMemberDecorate %54 0 NonWritable
OpMemberDecorate %67 0 Offset 0
OpDecorate %67 Block
OpMemberDecorate %67 0 Coherent
OpMemberDecorate %83 0 Offset 0
OpDecorate %83 Block
OpMemberDecorate %99 0 Offset 0
OpDecorate %99 Block
OpMemberDecorate %116 0 Offset 0
OpDecorate %116 Block
OpMemberDecorate %132 0 Offset 0
OpDecorate %132 Block
OpMemberDecorate %146 0 Offset 0
OpDecorate %146 Block
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeVector %5 2
%7 = OpTypeStruct %6 %6 %6 %6
%8 = OpTypePointer PushConstant %7
%9 = OpVariable %8 PushConstant
%10 = OpTypePointer PushConstant %6
%12 = OpConstant %5 3
%15 = OpConstant %5 2
%18 = OpConstant %5 1
%21 = OpConstant %5 0
%23 = OpTypeVector %5 3
%24 = OpTypePointer Input %23
%25 = OpVariable %24 Input
%26 = OpTypePointer Input %5
%29 = OpTypeFloat 32
%30 = OpTypeVector %29 4
%31 = OpTypeStruct %30
%32 = OpTypePointer PhysicalStorageBuffer %31
%34 = OpConstant %5 16
%38 = OpTypeStruct %5 %5
%45 = OpTypePointer PhysicalStorageBuffer %30
%52 = OpConstant %5 4096
%53 = OpTypeArray %30 %52
%54 = OpTypeStruct %53
%55 = OpTypePointer PhysicalStorageBuffer %54
%67 = OpTypeStruct %30
%68 = OpTypePointer PhysicalStorageBuffer %67
%82 = OpTypeFloat 16
%83 = OpTypeStruct %82
%84 = OpTypePointer PhysicalStorageBuffer %83
%93 = OpTypePointer PhysicalStorageBuffer %82
%95 = OpConstant %82 0x1p+0
%98 = OpTypeVector %82 2
%99 = OpTypeStruct %98
%100 = OpTypePointer PhysicalStorageBuffer %99
%109 = OpTypePointer PhysicalStorageBuffer %98
%111 = OpConstant %82 0x1p+1
%114 = OpConstant %5 6
%115 = OpTypeVector %82 3
%116 = OpTypeStruct %115
%117 = OpTypePointer PhysicalStorageBuffer %116
%126 = OpTypePointer PhysicalStorageBuffer %115
%128 = OpConstant %82 0x1.8p+1
%131 = OpTypeVector %82 4
%132 = OpTypeStruct %131
%133 = OpTypePointer PhysicalStorageBuffer %132
%142 = OpTypePointer PhysicalStorageBuffer %131
%144 = OpConstant %82 0x1p+2
%146 = OpTypeStruct %6
%147 = OpTypePointer PhysicalStorageBuffer %146
%156 = OpTypePointer PhysicalStorageBuffer %6
%158 = OpConstant %5 4
%159 = OpConstant %5 5
%3 = OpFunction %1 None %2
%4 = OpLabel
%96 = OpUndef %82
%160 = OpUndef %5
OpBranch %162
%162 = OpLabel
%11 = OpAccessChain %10 %9 %12
%13 = OpLoad %6 %11
%14 = OpAccessChain %10 %9 %15
%16 = OpLoad %6 %14
%17 = OpAccessChain %10 %9 %18
%19 = OpLoad %6 %17
%20 = OpAccessChain %10 %9 %21
%22 = OpLoad %6 %20
%27 = OpAccessChain %26 %25 %21
%28 = OpLoad %5 %27
%33 = OpIMul %5 %28 %34
%35 = OpIAdd %5 %33 %21
%36 = OpCompositeExtract %5 %19 0
%37 = OpCompositeExtract %5 %19 1
%39 = OpIAddCarry %38 %36 %35
%40 = OpCompositeExtract %5 %39 0
%41 = OpCompositeExtract %5 %39 1
%42 = OpIAdd %5 %37 %41
%43 = OpCompositeConstruct %6 %40 %42
%44 = OpBitcast %32 %43
%46 = OpAccessChain %45 %44 %21
%47 = OpLoad %30 %46 Aligned 4
%48 = OpCompositeExtract %29 %47 0
%49 = OpCompositeExtract %29 %47 1
%50 = OpCompositeExtract %29 %47 2
%51 = OpCompositeExtract %29 %47 3
%56 = OpBitcast %55 %22
%57 = OpInBoundsAccessChain %45 %56 %21 %28
%58 = OpLoad %30 %57 Aligned 16
%59 = OpCompositeExtract %29 %58 0
%60 = OpCompositeExtract %29 %58 1
%61 = OpCompositeExtract %29 %58 2
%62 = OpCompositeExtract %29 %58 3
%63 = OpFAdd %29 %59 %48
%64 = OpFAdd %29 %60 %49
%65 = OpFAdd %29 %61 %50
%66 = OpFAdd %29 %62 %51
%69 = OpIMul %5 %28 %34
%70 = OpIAdd %5 %69 %21
%71 = OpCompositeExtract %5 %16 0
%72 = OpCompositeExtract %5 %16 1
%73 = OpIAddCarry %38 %71 %70
%74 = OpCompositeExtract %5 %73 0
%75 = OpCompositeExtract %5 %73 1
%76 = OpIAdd %5 %72 %75
%77 = OpCompositeConstruct %6 %74 %76
%78 = OpBitcast %68 %77
%79 = OpAccessChain %45 %78 %21
%80 = OpCompositeConstruct %30 %63 %64 %65 %66
OpStore %79 %80 Aligned 4
%81 = OpShiftLeftLogical %5 %28 %18
%85 = OpCompositeExtract %5 %13 0
%86 = OpCompositeExtract %5 %13 1
%87 = OpIAddCarry %38 %85 %81
%88 = OpCompositeExtract %5 %87 0
%89 = OpCompositeExtract %5 %87 1
%90 = OpIAdd %5 %86 %89
%91 = OpCompositeConstruct %6 %88 %90
%92 = OpBitcast %84 %91
%94 = OpAccessChain %93 %92 %21
OpStore %94 %95 Aligned 2
%97 = OpShiftLeftLogical %5 %28 %15
%101 = OpCompositeExtract %5 %13 0
%102 = OpCompositeExtract %5 %13 1
%103 = OpIAddCarry %38 %101 %97
%104 = OpCompositeExtract %5 %103 0
%105 = OpCompositeExtract %5 %103 1
%106 = OpIAdd %5 %102 %105
%107 = OpCompositeConstruct %6 %104 %106
%108 = OpBitcast %100 %107
%110 = OpAccessChain %109 %108 %21
%112 = OpCompositeConstruct %98 %95 %111
OpStore %110 %112 Aligned 2
%113 = OpIMul %5 %28 %114
%118 = OpCompositeExtract %5 %13 0
%119 = OpCompositeExtract %5 %13 1
%120 = OpIAddCarry %38 %118 %113
%121 = OpCompositeExtract %5 %120 0
%122 = OpCompositeExtract %5 %120 1
%123 = OpIAdd %5 %119 %122
%124 = OpCompositeConstruct %6 %121 %123
%125 = OpBitcast %117 %124
%127 = OpAccessChain %126 %125 %21
%129 = OpCompositeConstruct %115 %95 %111 %128
OpStore %127 %129 Aligned 2
%130 = OpShiftLeftLogical %5 %28 %12
%134 = OpCompositeExtract %5 %13 0
%135 = OpCompositeExtract %5 %13 1
%136 = OpIAddCarry %38 %134 %130
%137 = OpCompositeExtract %5 %136 0
%138 = OpCompositeExtract %5 %136 1
%139 = OpIAdd %5 %135 %138
%140 = OpCompositeConstruct %6 %137 %139
%141 = OpBitcast %133 %140
%143 = OpAccessChain %142 %141 %21
%145 = OpCompositeConstruct %131 %95 %111 %128 %144
OpStore %143 %145 Aligned 2
%148 = OpCompositeExtract %5 %13 0
%149 = OpCompositeExtract %5 %13 1
%150 = OpIAddCarry %38 %148 %130
%151 = OpCompositeExtract %5 %150 0
%152 = OpCompositeExtract %5 %150 1
%153 = OpIAdd %5 %149 %152
%154 = OpCompositeConstruct %6 %151 %153
%155 = OpBitcast %147 %154
%157 = OpAccessChain %156 %155 %21
%161 = OpCompositeConstruct %6 %158 %159
OpStore %157 %161 Aligned 4
OpReturn
OpFunctionEnd
#endif
