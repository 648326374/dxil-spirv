#version 460
#extension GL_EXT_shader_explicit_arithmetic_types_int16 : require
#extension GL_EXT_shader_16bit_storage : require
#if defined(GL_AMD_gpu_shader_half_float)
#extension GL_AMD_gpu_shader_half_float : require
#elif defined(GL_EXT_shader_explicit_arithmetic_types_float16)
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : require
#else
#error No extension available for FP16.
#endif
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_scalar_block_layout : require
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, std430) buffer SSBO
{
    uint16_t _m0[];
} _9;

layout(set = 0, binding = 1, std430) buffer _11_13
{
    uint16_t _m0[];
} _13;

layout(set = 0, binding = 2, std430) buffer _15_17
{
    uint16_t _m0[];
} _17;

layout(set = 0, binding = 3, std430) buffer _19_21
{
    uint16_t _m0[];
} _21;

layout(set = 0, binding = 4, std430) buffer _23_25
{
    uint16_t _m0[];
} _25;

layout(set = 0, binding = 4, std430) buffer _28_30
{
    u16vec2 _m0[];
} _30;

layout(set = 0, binding = 4, scalar) buffer _33_35
{
    u16vec3 _m0[];
} _35;

layout(set = 0, binding = 4, std430) buffer _38_40
{
    u16vec4 _m0[];
} _40;

layout(set = 0, binding = 4, std430) buffer _43_45
{
    uint _m0[];
} _45;

layout(set = 0, binding = 4, std430) buffer _48_50
{
    uvec4 _m0[];
} _50;

layout(set = 0, binding = 5, std430) writeonly buffer _52_54
{
    uint16_t _m0[];
} _54;

layout(set = 0, binding = 5, std430) writeonly buffer _56_58
{
    u16vec2 _m0[];
} _58;

layout(set = 0, binding = 5, scalar) writeonly buffer _60_62
{
    u16vec3 _m0[];
} _62;

layout(set = 0, binding = 5, std430) writeonly buffer _64_66
{
    u16vec4 _m0[];
} _66;

layout(set = 0, binding = 6, std430) writeonly buffer _68_70
{
    uint16_t _m0[];
} _70;

layout(set = 0, binding = 6, std430) writeonly buffer _72_74
{
    u16vec2 _m0[];
} _74;

layout(set = 0, binding = 6, scalar) writeonly buffer _76_78
{
    u16vec3 _m0[];
} _78;

layout(set = 0, binding = 6, std430) writeonly buffer _80_82
{
    u16vec4 _m0[];
} _82;

layout(set = 1, binding = 0, std430) buffer _84_87
{
    uint16_t _m0[];
} _87[];

layout(set = 1, binding = 0, std430) buffer _89_92
{
    u16vec2 _m0[];
} _92[];

void main()
{
    _9._m0[gl_GlobalInvocationID.x] = float16BitsToUint16(uint16BitsToFloat16(_9._m0[gl_GlobalInvocationID.x]) + float16_t(1.0));
    uint _109 = gl_GlobalInvocationID.x * 2u;
    uint16_t _112 = _13._m0[_109];
    uint16_t _116 = _13._m0[_109 + 1u];
    u16vec2 _117 = u16vec2(_112, _116);
    uint _123 = gl_GlobalInvocationID.x * 2u;
    _13._m0[_123] = _117.x + 2us;
    _13._m0[_123 + 1u] = _117.y + 2us;
    uint _127 = gl_GlobalInvocationID.x * 3u;
    uint16_t _130 = _17._m0[_127];
    uint16_t _133 = _17._m0[_127 + 1u];
    uint16_t _136 = _17._m0[_127 + 2u];
    f16vec3 _139 = uint16BitsToFloat16(u16vec3(_130, _133, _136));
    uint _147 = gl_GlobalInvocationID.x * 3u;
    _17._m0[_147] = float16BitsToUint16(_139.x + float16_t(3.0));
    _17._m0[_147 + 1u] = float16BitsToUint16(_139.y + float16_t(3.0));
    _17._m0[_147 + 2u] = float16BitsToUint16(_139.z + float16_t(3.0));
    uint _156 = gl_GlobalInvocationID.x * 4u;
    uint16_t _159 = _21._m0[_156];
    uint16_t _162 = _21._m0[_156 + 1u];
    uint16_t _165 = _21._m0[_156 + 2u];
    uint16_t _168 = _21._m0[_156 + 3u];
    u16vec4 _169 = u16vec4(_159, _162, _165, _168);
    uint _179 = gl_GlobalInvocationID.x * 4u;
    _21._m0[_179] = _169.x + 4us;
    _21._m0[_179 + 1u] = _169.y + 4us;
    _21._m0[_179 + 2u] = _169.z + 4us;
    _21._m0[_179 + 3u] = _169.w + 4us;
    uint16_t _189 = _25._m0[gl_GlobalInvocationID.x];
    float _192 = float(uint16BitsToFloat16(_189));
    u16vec2 _196 = _30._m0[gl_GlobalInvocationID.x];
    f16vec2 _198 = uint16BitsToFloat16(_196);
    float _202 = float(_198.y);
    float _203 = float(_198.x) + _192;
    u16vec3 _209 = _35._m0[gl_GlobalInvocationID.x];
    f16vec3 _210 = uint16BitsToFloat16(_209);
    float _214 = float(_210.x);
    u16vec4 _223 = _40._m0[gl_GlobalInvocationID.x];
    f16vec4 _225 = uint16BitsToFloat16(_223);
    uint16_t _238 = _25._m0[gl_GlobalInvocationID.x];
    float _239 = float(_238);
    u16vec2 _244 = _30._m0[gl_GlobalInvocationID.x];
    float _247 = float(_244.x);
    float _248 = float(_244.y);
    u16vec3 _253 = _35._m0[gl_GlobalInvocationID.x];
    float _257 = float(_253.x);
    u16vec4 _264 = _40._m0[gl_GlobalInvocationID.x];
    _54._m0[gl_GlobalInvocationID.x] = float16BitsToUint16(float16_t(1.0));
    _58._m0[gl_GlobalInvocationID.x] = u16vec2(float16BitsToUint16(float16_t(2.0)), float16BitsToUint16(float16_t(4.0)));
    _62._m0[gl_GlobalInvocationID.x] = u16vec3(float16BitsToUint16(float16_t(4.0)), float16BitsToUint16(float16_t(5.0)), float16BitsToUint16(float16_t(6.0)));
    _66._m0[gl_GlobalInvocationID.x] = u16vec4(float16BitsToUint16(float16_t(7.0)), float16BitsToUint16(float16_t(8.0)), float16BitsToUint16(float16_t(9.0)), float16BitsToUint16(float16_t(10.0)));
    _70._m0[gl_GlobalInvocationID.x] = 1us;
    _74._m0[gl_GlobalInvocationID.x] = u16vec2(2us, 4us);
    _78._m0[gl_GlobalInvocationID.x] = u16vec3(4us, 5us, 6us);
    _82._m0[gl_GlobalInvocationID.x] = u16vec4(7us, 8us, 9us, 10us);
    uint _317 = _45._m0[gl_GlobalInvocationID.x];
    float _318 = uintBitsToFloat(_317);
    uint _322 = gl_GlobalInvocationID.x + 0u;
    uint16_t _329 = _87[nonuniformEXT(_322)]._m0[gl_GlobalInvocationID.x * 2u];
    float _331 = float(uint16BitsToFloat16(_329));
    float _332 = (((((((_203 + _214) + float(_225.x)) + _239) + _247) + _257) + float(_264.x)) + _318) + _331;
    float _333 = (((((((_203 + float(_210.y)) + float(_225.y)) + _239) + _247) + float(_253.y)) + float(_264.y)) + _318) + _331;
    _92[nonuniformEXT(_322)]._m0[gl_GlobalInvocationID.x * 2u] = u16vec2(float16BitsToUint16(float16_t(_332)), float16BitsToUint16(float16_t(_333)));
    _50._m0[gl_GlobalInvocationID.x] = uvec4(uint((float(uint(_9._m0.length()) / 1u) + _332) + float(uint(_66._m0.length()) * 8u)), uint(_333 + 2.0), uint((((((((((_202 + _192) + float(_210.z)) + float(_225.z)) + _239) + _248) + float(_253.z)) + float(_264.z)) + _318) + _331) + float(uint(_21._m0.length()) / 4u)), uint((((((((((_192 + 8.0) + _202) + _214) + float(_225.w)) + _239) + _248) + _257) + float(_264.w)) + _318) + _331));
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 378
; Schema: 0
OpCapability Shader
OpCapability Float16
OpCapability Int16
OpCapability StorageBufferArrayDynamicIndexing
OpCapability ImageQuery
OpCapability RuntimeDescriptorArray
OpCapability StorageBufferArrayNonUniformIndexing
OpExtension "SPV_EXT_descriptor_indexing"
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %95
OpExecutionMode %3 LocalSize 64 1 1
OpName %3 "main"
OpName %7 "SSBO"
OpName %11 "SSBO"
OpName %15 "SSBO"
OpName %19 "SSBO"
OpName %23 "SSBO"
OpName %28 "SSBO"
OpName %33 "SSBO"
OpName %38 "SSBO"
OpName %43 "SSBO"
OpName %48 "SSBO"
OpName %52 "SSBO"
OpName %56 "SSBO"
OpName %60 "SSBO"
OpName %64 "SSBO"
OpName %68 "SSBO"
OpName %72 "SSBO"
OpName %76 "SSBO"
OpName %80 "SSBO"
OpName %84 "SSBO"
OpName %89 "SSBO"
OpDecorate %6 ArrayStride 2
OpMemberDecorate %7 0 Offset 0
OpDecorate %7 Block
OpDecorate %9 DescriptorSet 0
OpDecorate %9 Binding 0
OpDecorate %10 ArrayStride 2
OpMemberDecorate %11 0 Offset 0
OpDecorate %11 Block
OpDecorate %13 DescriptorSet 0
OpDecorate %13 Binding 1
OpDecorate %14 ArrayStride 2
OpMemberDecorate %15 0 Offset 0
OpDecorate %15 Block
OpDecorate %17 DescriptorSet 0
OpDecorate %17 Binding 2
OpDecorate %18 ArrayStride 2
OpMemberDecorate %19 0 Offset 0
OpDecorate %19 Block
OpDecorate %21 DescriptorSet 0
OpDecorate %21 Binding 3
OpDecorate %22 ArrayStride 2
OpMemberDecorate %23 0 Offset 0
OpDecorate %23 Block
OpDecorate %27 ArrayStride 4
OpMemberDecorate %28 0 Offset 0
OpDecorate %28 Block
OpDecorate %32 ArrayStride 6
OpMemberDecorate %33 0 Offset 0
OpDecorate %33 Block
OpDecorate %37 ArrayStride 8
OpMemberDecorate %38 0 Offset 0
OpDecorate %38 Block
OpDecorate %42 ArrayStride 4
OpMemberDecorate %43 0 Offset 0
OpDecorate %43 Block
OpDecorate %47 ArrayStride 16
OpMemberDecorate %48 0 Offset 0
OpDecorate %48 Block
OpDecorate %25 DescriptorSet 0
OpDecorate %25 Binding 4
OpDecorate %25 Aliased
OpDecorate %30 DescriptorSet 0
OpDecorate %30 Binding 4
OpDecorate %30 Aliased
OpDecorate %35 DescriptorSet 0
OpDecorate %35 Binding 4
OpDecorate %35 Aliased
OpDecorate %40 DescriptorSet 0
OpDecorate %40 Binding 4
OpDecorate %40 Aliased
OpDecorate %45 DescriptorSet 0
OpDecorate %45 Binding 4
OpDecorate %45 Aliased
OpDecorate %50 DescriptorSet 0
OpDecorate %50 Binding 4
OpDecorate %50 Aliased
OpDecorate %51 ArrayStride 2
OpMemberDecorate %52 0 Offset 0
OpDecorate %52 Block
OpDecorate %55 ArrayStride 4
OpMemberDecorate %56 0 Offset 0
OpDecorate %56 Block
OpDecorate %59 ArrayStride 6
OpMemberDecorate %60 0 Offset 0
OpDecorate %60 Block
OpDecorate %63 ArrayStride 8
OpMemberDecorate %64 0 Offset 0
OpDecorate %64 Block
OpDecorate %54 DescriptorSet 0
OpDecorate %54 Binding 5
OpDecorate %54 NonReadable
OpDecorate %54 Aliased
OpDecorate %58 DescriptorSet 0
OpDecorate %58 Binding 5
OpDecorate %58 NonReadable
OpDecorate %58 Aliased
OpDecorate %62 DescriptorSet 0
OpDecorate %62 Binding 5
OpDecorate %62 NonReadable
OpDecorate %62 Aliased
OpDecorate %66 DescriptorSet 0
OpDecorate %66 Binding 5
OpDecorate %66 NonReadable
OpDecorate %66 Aliased
OpDecorate %67 ArrayStride 2
OpMemberDecorate %68 0 Offset 0
OpDecorate %68 Block
OpDecorate %71 ArrayStride 4
OpMemberDecorate %72 0 Offset 0
OpDecorate %72 Block
OpDecorate %75 ArrayStride 6
OpMemberDecorate %76 0 Offset 0
OpDecorate %76 Block
OpDecorate %79 ArrayStride 8
OpMemberDecorate %80 0 Offset 0
OpDecorate %80 Block
OpDecorate %70 DescriptorSet 0
OpDecorate %70 Binding 6
OpDecorate %70 NonReadable
OpDecorate %70 Aliased
OpDecorate %74 DescriptorSet 0
OpDecorate %74 Binding 6
OpDecorate %74 NonReadable
OpDecorate %74 Aliased
OpDecorate %78 DescriptorSet 0
OpDecorate %78 Binding 6
OpDecorate %78 NonReadable
OpDecorate %78 Aliased
OpDecorate %82 DescriptorSet 0
OpDecorate %82 Binding 6
OpDecorate %82 NonReadable
OpDecorate %82 Aliased
OpDecorate %83 ArrayStride 2
OpMemberDecorate %84 0 Offset 0
OpDecorate %84 Block
OpDecorate %88 ArrayStride 4
OpMemberDecorate %89 0 Offset 0
OpDecorate %89 Block
OpDecorate %87 DescriptorSet 1
OpDecorate %87 Binding 0
OpDecorate %87 Aliased
OpDecorate %92 DescriptorSet 1
OpDecorate %92 Binding 0
OpDecorate %92 Aliased
OpDecorate %95 BuiltIn GlobalInvocationId
OpDecorate %322 NonUniform
OpDecorate %324 NonUniform
OpDecorate %322 NonUniform
OpDecorate %326 NonUniform
OpDecorate %328 NonUniform
OpDecorate %341 NonUniform
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 16 0
%6 = OpTypeRuntimeArray %5
%7 = OpTypeStruct %6
%8 = OpTypePointer StorageBuffer %7
%9 = OpVariable %8 StorageBuffer
%10 = OpTypeRuntimeArray %5
%11 = OpTypeStruct %10
%12 = OpTypePointer StorageBuffer %11
%13 = OpVariable %12 StorageBuffer
%14 = OpTypeRuntimeArray %5
%15 = OpTypeStruct %14
%16 = OpTypePointer StorageBuffer %15
%17 = OpVariable %16 StorageBuffer
%18 = OpTypeRuntimeArray %5
%19 = OpTypeStruct %18
%20 = OpTypePointer StorageBuffer %19
%21 = OpVariable %20 StorageBuffer
%22 = OpTypeRuntimeArray %5
%23 = OpTypeStruct %22
%24 = OpTypePointer StorageBuffer %23
%25 = OpVariable %24 StorageBuffer
%26 = OpTypeVector %5 2
%27 = OpTypeRuntimeArray %26
%28 = OpTypeStruct %27
%29 = OpTypePointer StorageBuffer %28
%30 = OpVariable %29 StorageBuffer
%31 = OpTypeVector %5 3
%32 = OpTypeRuntimeArray %31
%33 = OpTypeStruct %32
%34 = OpTypePointer StorageBuffer %33
%35 = OpVariable %34 StorageBuffer
%36 = OpTypeVector %5 4
%37 = OpTypeRuntimeArray %36
%38 = OpTypeStruct %37
%39 = OpTypePointer StorageBuffer %38
%40 = OpVariable %39 StorageBuffer
%41 = OpTypeInt 32 0
%42 = OpTypeRuntimeArray %41
%43 = OpTypeStruct %42
%44 = OpTypePointer StorageBuffer %43
%45 = OpVariable %44 StorageBuffer
%46 = OpTypeVector %41 4
%47 = OpTypeRuntimeArray %46
%48 = OpTypeStruct %47
%49 = OpTypePointer StorageBuffer %48
%50 = OpVariable %49 StorageBuffer
%51 = OpTypeRuntimeArray %5
%52 = OpTypeStruct %51
%53 = OpTypePointer StorageBuffer %52
%54 = OpVariable %53 StorageBuffer
%55 = OpTypeRuntimeArray %26
%56 = OpTypeStruct %55
%57 = OpTypePointer StorageBuffer %56
%58 = OpVariable %57 StorageBuffer
%59 = OpTypeRuntimeArray %31
%60 = OpTypeStruct %59
%61 = OpTypePointer StorageBuffer %60
%62 = OpVariable %61 StorageBuffer
%63 = OpTypeRuntimeArray %36
%64 = OpTypeStruct %63
%65 = OpTypePointer StorageBuffer %64
%66 = OpVariable %65 StorageBuffer
%67 = OpTypeRuntimeArray %5
%68 = OpTypeStruct %67
%69 = OpTypePointer StorageBuffer %68
%70 = OpVariable %69 StorageBuffer
%71 = OpTypeRuntimeArray %26
%72 = OpTypeStruct %71
%73 = OpTypePointer StorageBuffer %72
%74 = OpVariable %73 StorageBuffer
%75 = OpTypeRuntimeArray %31
%76 = OpTypeStruct %75
%77 = OpTypePointer StorageBuffer %76
%78 = OpVariable %77 StorageBuffer
%79 = OpTypeRuntimeArray %36
%80 = OpTypeStruct %79
%81 = OpTypePointer StorageBuffer %80
%82 = OpVariable %81 StorageBuffer
%83 = OpTypeRuntimeArray %5
%84 = OpTypeStruct %83
%85 = OpTypeRuntimeArray %84
%86 = OpTypePointer StorageBuffer %85
%87 = OpVariable %86 StorageBuffer
%88 = OpTypeRuntimeArray %26
%89 = OpTypeStruct %88
%90 = OpTypeRuntimeArray %89
%91 = OpTypePointer StorageBuffer %90
%92 = OpVariable %91 StorageBuffer
%93 = OpTypeVector %41 3
%94 = OpTypePointer Input %93
%95 = OpVariable %94 Input
%96 = OpTypePointer Input %41
%98 = OpConstant %41 0
%100 = OpTypePointer StorageBuffer %5
%103 = OpTypeFloat 16
%106 = OpConstant %103 0x1p+0
%110 = OpConstant %41 2
%115 = OpConstant %41 1
%121 = OpConstant %5 2
%128 = OpConstant %41 3
%138 = OpTypeVector %103 3
%144 = OpConstant %103 0x1.8p+1
%157 = OpConstant %41 4
%175 = OpConstant %5 4
%191 = OpTypeFloat 32
%194 = OpTypePointer StorageBuffer %26
%197 = OpTypeVector %103 2
%206 = OpConstant %41 6
%207 = OpTypePointer StorageBuffer %31
%221 = OpTypePointer StorageBuffer %36
%224 = OpTypeVector %103 4
%278 = OpConstant %103 0x1p+1
%280 = OpConstant %103 0x1p+2
%285 = OpConstant %103 0x1.4p+2
%287 = OpConstant %103 0x1.8p+2
%291 = OpConstant %103 0x1.cp+2
%293 = OpConstant %103 0x1p+3
%295 = OpConstant %103 0x1.2p+3
%297 = OpConstant %103 0x1.4p+3
%301 = OpConstant %5 1
%305 = OpConstant %5 5
%306 = OpConstant %5 6
%309 = OpConstant %5 7
%310 = OpConstant %5 8
%311 = OpConstant %5 9
%312 = OpConstant %5 10
%315 = OpTypePointer StorageBuffer %41
%323 = OpTypePointer StorageBuffer %84
%325 = OpTypePointer StorageBuffer %89
%347 = OpConstant %191 2
%353 = OpConstant %191 8
%365 = OpConstant %41 8
%374 = OpTypePointer StorageBuffer %46
%3 = OpFunction %1 None %2
%4 = OpLabel
OpBranch %376
%376 = OpLabel
%97 = OpAccessChain %96 %95 %98
%99 = OpLoad %41 %97
%101 = OpAccessChain %100 %9 %98 %99
%102 = OpLoad %5 %101
%104 = OpBitcast %103 %102
%105 = OpFAdd %103 %104 %106
%107 = OpBitcast %5 %105
%108 = OpAccessChain %100 %9 %98 %99
OpStore %108 %107
%109 = OpIMul %41 %99 %110
%111 = OpAccessChain %100 %13 %98 %109
%112 = OpLoad %5 %111
%114 = OpIAdd %41 %109 %115
%113 = OpAccessChain %100 %13 %98 %114
%116 = OpLoad %5 %113
%117 = OpCompositeConstruct %26 %112 %116
%118 = OpCompositeExtract %5 %117 0
%119 = OpCompositeExtract %5 %117 1
%120 = OpIAdd %5 %118 %121
%122 = OpIAdd %5 %119 %121
%123 = OpIMul %41 %99 %110
%124 = OpAccessChain %100 %13 %98 %123
OpStore %124 %120
%126 = OpIAdd %41 %123 %115
%125 = OpAccessChain %100 %13 %98 %126
OpStore %125 %122
%127 = OpIMul %41 %99 %128
%129 = OpAccessChain %100 %17 %98 %127
%130 = OpLoad %5 %129
%132 = OpIAdd %41 %127 %115
%131 = OpAccessChain %100 %17 %98 %132
%133 = OpLoad %5 %131
%135 = OpIAdd %41 %127 %110
%134 = OpAccessChain %100 %17 %98 %135
%136 = OpLoad %5 %134
%137 = OpCompositeConstruct %31 %130 %133 %136
%139 = OpBitcast %138 %137
%140 = OpCompositeExtract %103 %139 0
%141 = OpCompositeExtract %103 %139 1
%142 = OpCompositeExtract %103 %139 2
%143 = OpFAdd %103 %140 %144
%145 = OpFAdd %103 %141 %144
%146 = OpFAdd %103 %142 %144
%147 = OpIMul %41 %99 %128
%148 = OpBitcast %5 %143
%149 = OpBitcast %5 %145
%150 = OpBitcast %5 %146
%151 = OpAccessChain %100 %17 %98 %147
OpStore %151 %148
%153 = OpIAdd %41 %147 %115
%152 = OpAccessChain %100 %17 %98 %153
OpStore %152 %149
%155 = OpIAdd %41 %147 %110
%154 = OpAccessChain %100 %17 %98 %155
OpStore %154 %150
%156 = OpIMul %41 %99 %157
%158 = OpAccessChain %100 %21 %98 %156
%159 = OpLoad %5 %158
%161 = OpIAdd %41 %156 %115
%160 = OpAccessChain %100 %21 %98 %161
%162 = OpLoad %5 %160
%164 = OpIAdd %41 %156 %110
%163 = OpAccessChain %100 %21 %98 %164
%165 = OpLoad %5 %163
%167 = OpIAdd %41 %156 %128
%166 = OpAccessChain %100 %21 %98 %167
%168 = OpLoad %5 %166
%169 = OpCompositeConstruct %36 %159 %162 %165 %168
%170 = OpCompositeExtract %5 %169 0
%171 = OpCompositeExtract %5 %169 1
%172 = OpCompositeExtract %5 %169 2
%173 = OpCompositeExtract %5 %169 3
%174 = OpIAdd %5 %170 %175
%176 = OpIAdd %5 %171 %175
%177 = OpIAdd %5 %172 %175
%178 = OpIAdd %5 %173 %175
%179 = OpIMul %41 %99 %157
%180 = OpAccessChain %100 %21 %98 %179
OpStore %180 %174
%182 = OpIAdd %41 %179 %115
%181 = OpAccessChain %100 %21 %98 %182
OpStore %181 %176
%184 = OpIAdd %41 %179 %110
%183 = OpAccessChain %100 %21 %98 %184
OpStore %183 %177
%186 = OpIAdd %41 %179 %128
%185 = OpAccessChain %100 %21 %98 %186
OpStore %185 %178
%187 = OpShiftLeftLogical %41 %99 %115
%188 = OpAccessChain %100 %25 %98 %99
%189 = OpLoad %5 %188
%190 = OpBitcast %103 %189
%192 = OpFConvert %191 %190
%193 = OpShiftLeftLogical %41 %99 %110
%195 = OpAccessChain %194 %30 %98 %99
%196 = OpLoad %26 %195
%198 = OpBitcast %197 %196
%199 = OpCompositeExtract %103 %198 0
%200 = OpCompositeExtract %103 %198 1
%201 = OpFConvert %191 %199
%202 = OpFConvert %191 %200
%203 = OpFAdd %191 %201 %192
%204 = OpFAdd %191 %202 %192
%205 = OpIMul %41 %99 %206
%208 = OpAccessChain %207 %35 %98 %99
%209 = OpLoad %31 %208
%210 = OpBitcast %138 %209
%211 = OpCompositeExtract %103 %210 0
%212 = OpCompositeExtract %103 %210 1
%213 = OpCompositeExtract %103 %210 2
%214 = OpFConvert %191 %211
%215 = OpFConvert %191 %212
%216 = OpFConvert %191 %213
%217 = OpFAdd %191 %203 %214
%218 = OpFAdd %191 %203 %215
%219 = OpFAdd %191 %204 %216
%220 = OpShiftLeftLogical %41 %99 %128
%222 = OpAccessChain %221 %40 %98 %99
%223 = OpLoad %36 %222
%225 = OpBitcast %224 %223
%226 = OpCompositeExtract %103 %225 0
%227 = OpCompositeExtract %103 %225 1
%228 = OpCompositeExtract %103 %225 2
%229 = OpCompositeExtract %103 %225 3
%230 = OpFConvert %191 %226
%231 = OpFConvert %191 %227
%232 = OpFConvert %191 %228
%233 = OpFConvert %191 %229
%234 = OpFAdd %191 %217 %230
%235 = OpFAdd %191 %218 %231
%236 = OpFAdd %191 %219 %232
%237 = OpAccessChain %100 %25 %98 %99
%238 = OpLoad %5 %237
%239 = OpConvertUToF %191 %238
%240 = OpFAdd %191 %234 %239
%241 = OpFAdd %191 %235 %239
%242 = OpFAdd %191 %236 %239
%243 = OpAccessChain %194 %30 %98 %99
%244 = OpLoad %26 %243
%245 = OpCompositeExtract %5 %244 0
%246 = OpCompositeExtract %5 %244 1
%247 = OpConvertUToF %191 %245
%248 = OpConvertUToF %191 %246
%249 = OpFAdd %191 %240 %247
%250 = OpFAdd %191 %241 %247
%251 = OpFAdd %191 %242 %248
%252 = OpAccessChain %207 %35 %98 %99
%253 = OpLoad %31 %252
%254 = OpCompositeExtract %5 %253 0
%255 = OpCompositeExtract %5 %253 1
%256 = OpCompositeExtract %5 %253 2
%257 = OpConvertUToF %191 %254
%258 = OpConvertUToF %191 %255
%259 = OpConvertUToF %191 %256
%260 = OpFAdd %191 %249 %257
%261 = OpFAdd %191 %250 %258
%262 = OpFAdd %191 %251 %259
%263 = OpAccessChain %221 %40 %98 %99
%264 = OpLoad %36 %263
%265 = OpCompositeExtract %5 %264 0
%266 = OpCompositeExtract %5 %264 1
%267 = OpCompositeExtract %5 %264 2
%268 = OpCompositeExtract %5 %264 3
%269 = OpConvertUToF %191 %265
%270 = OpConvertUToF %191 %266
%271 = OpConvertUToF %191 %267
%272 = OpConvertUToF %191 %268
%273 = OpFAdd %191 %260 %269
%274 = OpFAdd %191 %261 %270
%275 = OpFAdd %191 %262 %271
%276 = OpBitcast %5 %106
%277 = OpAccessChain %100 %54 %98 %99
OpStore %277 %276
%279 = OpBitcast %5 %278
%281 = OpBitcast %5 %280
%282 = OpCompositeConstruct %26 %279 %281
%283 = OpAccessChain %194 %58 %98 %99
OpStore %283 %282
%284 = OpBitcast %5 %280
%286 = OpBitcast %5 %285
%288 = OpBitcast %5 %287
%289 = OpCompositeConstruct %31 %284 %286 %288
%290 = OpAccessChain %207 %62 %98 %99
OpStore %290 %289
%292 = OpBitcast %5 %291
%294 = OpBitcast %5 %293
%296 = OpBitcast %5 %295
%298 = OpBitcast %5 %297
%299 = OpCompositeConstruct %36 %292 %294 %296 %298
%300 = OpAccessChain %221 %66 %98 %99
OpStore %300 %299
%302 = OpAccessChain %100 %70 %98 %99
OpStore %302 %301
%303 = OpCompositeConstruct %26 %121 %175
%304 = OpAccessChain %194 %74 %98 %99
OpStore %304 %303
%307 = OpCompositeConstruct %31 %175 %305 %306
%308 = OpAccessChain %207 %78 %98 %99
OpStore %308 %307
%313 = OpCompositeConstruct %36 %309 %310 %311 %312
%314 = OpAccessChain %221 %82 %98 %99
OpStore %314 %313
%316 = OpAccessChain %315 %45 %98 %99
%317 = OpLoad %41 %316
%318 = OpBitcast %191 %317
%319 = OpFAdd %191 %273 %318
%320 = OpFAdd %191 %274 %318
%321 = OpFAdd %191 %275 %318
%322 = OpIAdd %41 %99 %98
%324 = OpAccessChain %323 %87 %322
%326 = OpAccessChain %325 %92 %322
%327 = OpIMul %41 %99 %110
%328 = OpAccessChain %100 %324 %98 %327
%329 = OpLoad %5 %328
%330 = OpBitcast %103 %329
%331 = OpFConvert %191 %330
%332 = OpFAdd %191 %319 %331
%333 = OpFAdd %191 %320 %331
%334 = OpFAdd %191 %321 %331
%335 = OpFConvert %103 %332
%336 = OpFConvert %103 %333
%337 = OpIMul %41 %99 %110
%338 = OpBitcast %5 %335
%339 = OpBitcast %5 %336
%340 = OpCompositeConstruct %26 %338 %339
%341 = OpAccessChain %194 %326 %98 %337
OpStore %341 %340
%342 = OpArrayLength %41 %9 0
%343 = OpUDiv %41 %342 %115
%344 = OpConvertUToF %191 %343
%345 = OpFAdd %191 %344 %332
%346 = OpFAdd %191 %333 %347
%348 = OpArrayLength %41 %21 0
%349 = OpUDiv %41 %348 %157
%350 = OpConvertUToF %191 %349
%351 = OpFAdd %191 %334 %350
%352 = OpFAdd %191 %192 %353
%354 = OpFAdd %191 %352 %202
%355 = OpFAdd %191 %354 %214
%356 = OpFAdd %191 %355 %233
%357 = OpFAdd %191 %356 %239
%358 = OpFAdd %191 %357 %248
%359 = OpFAdd %191 %358 %257
%360 = OpFAdd %191 %359 %272
%361 = OpFAdd %191 %360 %318
%362 = OpFAdd %191 %361 %331
%363 = OpArrayLength %41 %66 0
%364 = OpIMul %41 %363 %365
%366 = OpConvertUToF %191 %364
%367 = OpFAdd %191 %345 %366
%368 = OpConvertFToU %41 %367
%369 = OpConvertFToU %41 %346
%370 = OpConvertFToU %41 %351
%371 = OpConvertFToU %41 %362
%372 = OpShiftLeftLogical %41 %99 %157
%373 = OpCompositeConstruct %46 %368 %369 %370 %371
%375 = OpAccessChain %374 %50 %98 %99
OpStore %375 %373
OpReturn
OpFunctionEnd
#endif
