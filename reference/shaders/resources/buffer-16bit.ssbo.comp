#version 460
#extension GL_EXT_shader_explicit_arithmetic_types_int16 : require
#extension GL_EXT_shader_16bit_storage : require
#if defined(GL_AMD_gpu_shader_half_float)
#extension GL_AMD_gpu_shader_half_float : require
#elif defined(GL_EXT_shader_explicit_arithmetic_types_float16)
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : require
#else
#error No extension available for FP16.
#endif
#extension GL_EXT_nonuniform_qualifier : require
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, std430) buffer SSBO
{
    uint16_t _m0[];
} _9;

layout(set = 0, binding = 1, std430) buffer _11_13
{
    uint16_t _m0[];
} _13;

layout(set = 0, binding = 2, std430) buffer _15_17
{
    uint16_t _m0[];
} _17;

layout(set = 0, binding = 3, std430) buffer _19_21
{
    uint16_t _m0[];
} _21;

layout(set = 0, binding = 4, std430) buffer _23_25
{
    uint16_t _m0[];
} _25;

layout(set = 0, binding = 4, std430) buffer _28_30
{
    uint _m0[];
} _30;

layout(set = 0, binding = 5, std430) writeonly buffer _32_34
{
    uint16_t _m0[];
} _34;

layout(set = 0, binding = 6, std430) writeonly buffer _36_38
{
    uint16_t _m0[];
} _38;

layout(set = 1, binding = 0, std430) buffer _40_43
{
    uint16_t _m0[];
} _43[];

void main()
{
    _9._m0[gl_GlobalInvocationID.x] = float16BitsToUint16(uint16BitsToFloat16(_9._m0[gl_GlobalInvocationID.x]) + float16_t(1.0));
    uint _60 = gl_GlobalInvocationID.x * 2u;
    uint16_t _63 = _13._m0[_60];
    uint16_t _67 = _13._m0[_60 + 1u];
    u16vec2 _69 = u16vec2(_63, _67);
    uint _75 = gl_GlobalInvocationID.x * 2u;
    _13._m0[_75] = _69.x + 2us;
    _13._m0[_75 + 1u] = _69.y + 2us;
    uint _79 = gl_GlobalInvocationID.x * 3u;
    uint16_t _82 = _17._m0[_79];
    uint16_t _85 = _17._m0[_79 + 1u];
    uint16_t _88 = _17._m0[_79 + 2u];
    f16vec3 _92 = uint16BitsToFloat16(u16vec3(_82, _85, _88));
    uint _100 = gl_GlobalInvocationID.x * 3u;
    _17._m0[_100] = float16BitsToUint16(_92.x + float16_t(3.0));
    _17._m0[_100 + 1u] = float16BitsToUint16(_92.y + float16_t(3.0));
    _17._m0[_100 + 2u] = float16BitsToUint16(_92.z + float16_t(3.0));
    uint _109 = gl_GlobalInvocationID.x * 4u;
    uint16_t _112 = _21._m0[_109];
    uint16_t _115 = _21._m0[_109 + 1u];
    uint16_t _118 = _21._m0[_109 + 2u];
    uint16_t _121 = _21._m0[_109 + 3u];
    u16vec4 _123 = u16vec4(_112, _115, _118, _121);
    uint _133 = gl_GlobalInvocationID.x * 4u;
    _21._m0[_133] = _123.x + 4us;
    _21._m0[_133 + 1u] = _123.y + 4us;
    _21._m0[_133 + 2u] = _123.z + 4us;
    _21._m0[_133 + 3u] = _123.w + 4us;
    uint16_t _143 = _25._m0[gl_GlobalInvocationID.x];
    float _146 = float(uint16BitsToFloat16(_143));
    uint _148 = gl_GlobalInvocationID.x * 2u;
    uint16_t _150 = _25._m0[_148];
    uint16_t _153 = _25._m0[_148 + 1u];
    f16vec2 _156 = uint16BitsToFloat16(u16vec2(_150, _153));
    float _160 = float(_156.y);
    float _161 = float(_156.x) + _146;
    uint _165 = gl_GlobalInvocationID.x * 3u;
    uint16_t _167 = _25._m0[_165];
    uint16_t _170 = _25._m0[_165 + 1u];
    uint16_t _173 = _25._m0[_165 + 2u];
    f16vec3 _175 = uint16BitsToFloat16(u16vec3(_167, _170, _173));
    float _179 = float(_175.x);
    uint _186 = gl_GlobalInvocationID.x * 4u;
    uint16_t _188 = _25._m0[_186];
    uint16_t _191 = _25._m0[_186 + 1u];
    uint16_t _194 = _25._m0[_186 + 2u];
    uint16_t _197 = _25._m0[_186 + 3u];
    f16vec4 _200 = uint16BitsToFloat16(u16vec4(_188, _191, _194, _197));
    uint16_t _213 = _25._m0[gl_GlobalInvocationID.x];
    float _214 = float(_213);
    uint _218 = gl_GlobalInvocationID.x * 2u;
    uint16_t _220 = _25._m0[_218];
    uint16_t _223 = _25._m0[_218 + 1u];
    u16vec2 _224 = u16vec2(_220, _223);
    float _227 = float(_224.x);
    float _228 = float(_224.y);
    uint _232 = gl_GlobalInvocationID.x * 3u;
    uint16_t _234 = _25._m0[_232];
    uint16_t _237 = _25._m0[_232 + 1u];
    uint16_t _240 = _25._m0[_232 + 2u];
    u16vec3 _241 = u16vec3(_234, _237, _240);
    float _245 = float(_241.x);
    uint _251 = gl_GlobalInvocationID.x * 4u;
    uint16_t _253 = _25._m0[_251];
    uint16_t _256 = _25._m0[_251 + 1u];
    uint16_t _259 = _25._m0[_251 + 2u];
    uint16_t _262 = _25._m0[_251 + 3u];
    u16vec4 _263 = u16vec4(_253, _256, _259, _262);
    _34._m0[gl_GlobalInvocationID.x] = float16BitsToUint16(float16_t(1.0));
    uint _277 = gl_GlobalInvocationID.x * 2u;
    _34._m0[_277] = float16BitsToUint16(float16_t(2.0));
    _34._m0[_277 + 1u] = float16BitsToUint16(float16_t(4.0));
    uint _285 = gl_GlobalInvocationID.x * 3u;
    _34._m0[_285] = float16BitsToUint16(float16_t(4.0));
    _34._m0[_285 + 1u] = float16BitsToUint16(float16_t(5.0));
    _34._m0[_285 + 2u] = float16BitsToUint16(float16_t(6.0));
    uint _296 = gl_GlobalInvocationID.x * 4u;
    _34._m0[_296] = float16BitsToUint16(float16_t(7.0));
    _34._m0[_296 + 1u] = float16BitsToUint16(float16_t(8.0));
    _34._m0[_296 + 2u] = float16BitsToUint16(float16_t(9.0));
    _34._m0[_296 + 3u] = float16BitsToUint16(float16_t(10.0));
    _38._m0[gl_GlobalInvocationID.x] = 1us;
    uint _314 = gl_GlobalInvocationID.x * 2u;
    _38._m0[_314] = 2us;
    _38._m0[_314 + 1u] = 4us;
    uint _318 = gl_GlobalInvocationID.x * 3u;
    _38._m0[_318] = 4us;
    _38._m0[_318 + 1u] = 5us;
    _38._m0[_318 + 2u] = 6us;
    uint _326 = gl_GlobalInvocationID.x * 4u;
    _38._m0[_326] = 7us;
    _38._m0[_326 + 1u] = 8us;
    _38._m0[_326 + 2u] = 9us;
    _38._m0[_326 + 3u] = 10us;
    uint _340 = _30._m0[gl_GlobalInvocationID.x];
    float _341 = uintBitsToFloat(_340);
    uint _345 = gl_GlobalInvocationID.x + 0u;
    uint16_t _350 = _43[nonuniformEXT(_345)]._m0[gl_GlobalInvocationID.x * 2u];
    float _352 = float(uint16BitsToFloat16(_350));
    float _353 = (((((((_161 + _179) + float(_200.x)) + _214) + _227) + _245) + float(_263.x)) + _341) + _352;
    float _354 = (((((((_161 + float(_175.y)) + float(_200.y)) + _214) + _227) + float(_241.y)) + float(_263.y)) + _341) + _352;
    uint _358 = gl_GlobalInvocationID.x * 4u;
    _43[nonuniformEXT(_345)]._m0[_358] = float16BitsToUint16(float16_t(_353));
    _43[nonuniformEXT(_345)]._m0[_358 + 1u] = float16BitsToUint16(float16_t(_354));
    uint _394 = gl_GlobalInvocationID.x * 4u;
    _30._m0[_394] = uint((float(uint(_9._m0.length()) / 1u) + _353) + float(uint(_34._m0.length()) * 2u));
    _30._m0[_394 + 1u] = uint(_354 + 2.0);
    _30._m0[_394 + 2u] = uint((((((((((_160 + _146) + float(_175.z)) + float(_200.z)) + _214) + _228) + float(_241.z)) + float(_263.z)) + _341) + _352) + float(uint(_21._m0.length()) / 4u));
    _30._m0[_394 + 3u] = uint((((((((((_146 + 8.0) + _160) + _179) + float(_200.w)) + _214) + _228) + _245) + float(_263.w)) + _341) + _352);
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 404
; Schema: 0
OpCapability Shader
OpCapability Float16
OpCapability Int16
OpCapability StorageBufferArrayDynamicIndexing
OpCapability ImageQuery
OpCapability RuntimeDescriptorArray
OpCapability StorageBufferArrayNonUniformIndexing
OpExtension "SPV_EXT_descriptor_indexing"
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %46
OpExecutionMode %3 LocalSize 64 1 1
OpName %3 "main"
OpName %7 "SSBO"
OpName %11 "SSBO"
OpName %15 "SSBO"
OpName %19 "SSBO"
OpName %23 "SSBO"
OpName %28 "SSBO"
OpName %32 "SSBO"
OpName %36 "SSBO"
OpName %40 "SSBO"
OpDecorate %6 ArrayStride 2
OpMemberDecorate %7 0 Offset 0
OpDecorate %7 Block
OpDecorate %9 DescriptorSet 0
OpDecorate %9 Binding 0
OpDecorate %10 ArrayStride 2
OpMemberDecorate %11 0 Offset 0
OpDecorate %11 Block
OpDecorate %13 DescriptorSet 0
OpDecorate %13 Binding 1
OpDecorate %14 ArrayStride 2
OpMemberDecorate %15 0 Offset 0
OpDecorate %15 Block
OpDecorate %17 DescriptorSet 0
OpDecorate %17 Binding 2
OpDecorate %18 ArrayStride 2
OpMemberDecorate %19 0 Offset 0
OpDecorate %19 Block
OpDecorate %21 DescriptorSet 0
OpDecorate %21 Binding 3
OpDecorate %22 ArrayStride 2
OpMemberDecorate %23 0 Offset 0
OpDecorate %23 Block
OpDecorate %27 ArrayStride 4
OpMemberDecorate %28 0 Offset 0
OpDecorate %28 Block
OpDecorate %25 DescriptorSet 0
OpDecorate %25 Binding 4
OpDecorate %25 Aliased
OpDecorate %30 DescriptorSet 0
OpDecorate %30 Binding 4
OpDecorate %30 Aliased
OpDecorate %31 ArrayStride 2
OpMemberDecorate %32 0 Offset 0
OpDecorate %32 Block
OpDecorate %34 DescriptorSet 0
OpDecorate %34 Binding 5
OpDecorate %34 NonReadable
OpDecorate %35 ArrayStride 2
OpMemberDecorate %36 0 Offset 0
OpDecorate %36 Block
OpDecorate %38 DescriptorSet 0
OpDecorate %38 Binding 6
OpDecorate %38 NonReadable
OpDecorate %39 ArrayStride 2
OpMemberDecorate %40 0 Offset 0
OpDecorate %40 Block
OpDecorate %43 DescriptorSet 1
OpDecorate %43 Binding 0
OpDecorate %46 BuiltIn GlobalInvocationId
OpDecorate %345 NonUniform
OpDecorate %347 NonUniform
OpDecorate %349 NonUniform
OpDecorate %361 NonUniform
OpDecorate %362 NonUniform
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 16 0
%6 = OpTypeRuntimeArray %5
%7 = OpTypeStruct %6
%8 = OpTypePointer StorageBuffer %7
%9 = OpVariable %8 StorageBuffer
%10 = OpTypeRuntimeArray %5
%11 = OpTypeStruct %10
%12 = OpTypePointer StorageBuffer %11
%13 = OpVariable %12 StorageBuffer
%14 = OpTypeRuntimeArray %5
%15 = OpTypeStruct %14
%16 = OpTypePointer StorageBuffer %15
%17 = OpVariable %16 StorageBuffer
%18 = OpTypeRuntimeArray %5
%19 = OpTypeStruct %18
%20 = OpTypePointer StorageBuffer %19
%21 = OpVariable %20 StorageBuffer
%22 = OpTypeRuntimeArray %5
%23 = OpTypeStruct %22
%24 = OpTypePointer StorageBuffer %23
%25 = OpVariable %24 StorageBuffer
%26 = OpTypeInt 32 0
%27 = OpTypeRuntimeArray %26
%28 = OpTypeStruct %27
%29 = OpTypePointer StorageBuffer %28
%30 = OpVariable %29 StorageBuffer
%31 = OpTypeRuntimeArray %5
%32 = OpTypeStruct %31
%33 = OpTypePointer StorageBuffer %32
%34 = OpVariable %33 StorageBuffer
%35 = OpTypeRuntimeArray %5
%36 = OpTypeStruct %35
%37 = OpTypePointer StorageBuffer %36
%38 = OpVariable %37 StorageBuffer
%39 = OpTypeRuntimeArray %5
%40 = OpTypeStruct %39
%41 = OpTypeRuntimeArray %40
%42 = OpTypePointer StorageBuffer %41
%43 = OpVariable %42 StorageBuffer
%44 = OpTypeVector %26 3
%45 = OpTypePointer Input %44
%46 = OpVariable %45 Input
%47 = OpTypePointer Input %26
%49 = OpConstant %26 0
%51 = OpTypePointer StorageBuffer %5
%54 = OpTypeFloat 16
%57 = OpConstant %54 0x1p+0
%61 = OpConstant %26 2
%66 = OpConstant %26 1
%68 = OpTypeVector %5 2
%73 = OpConstant %5 2
%80 = OpConstant %26 3
%89 = OpTypeVector %5 3
%91 = OpTypeVector %54 3
%97 = OpConstant %54 0x1.8p+1
%110 = OpConstant %26 4
%122 = OpTypeVector %5 4
%129 = OpConstant %5 4
%145 = OpTypeFloat 32
%155 = OpTypeVector %54 2
%164 = OpConstant %26 6
%199 = OpTypeVector %54 4
%278 = OpConstant %54 0x1p+1
%280 = OpConstant %54 0x1p+2
%287 = OpConstant %54 0x1.4p+2
%289 = OpConstant %54 0x1.8p+2
%297 = OpConstant %54 0x1.cp+2
%299 = OpConstant %54 0x1p+3
%301 = OpConstant %54 0x1.2p+3
%303 = OpConstant %54 0x1.4p+3
%312 = OpConstant %5 1
%319 = OpConstant %5 5
%320 = OpConstant %5 6
%327 = OpConstant %5 7
%328 = OpConstant %5 8
%329 = OpConstant %5 9
%330 = OpConstant %5 10
%338 = OpTypePointer StorageBuffer %26
%346 = OpTypePointer StorageBuffer %40
%369 = OpConstant %145 2
%375 = OpConstant %145 8
%3 = OpFunction %1 None %2
%4 = OpLabel
OpBranch %402
%402 = OpLabel
%48 = OpAccessChain %47 %46 %49
%50 = OpLoad %26 %48
%52 = OpAccessChain %51 %9 %49 %50
%53 = OpLoad %5 %52
%55 = OpBitcast %54 %53
%56 = OpFAdd %54 %55 %57
%58 = OpBitcast %5 %56
%59 = OpAccessChain %51 %9 %49 %50
OpStore %59 %58
%60 = OpIMul %26 %50 %61
%62 = OpAccessChain %51 %13 %49 %60
%63 = OpLoad %5 %62
%65 = OpIAdd %26 %60 %66
%64 = OpAccessChain %51 %13 %49 %65
%67 = OpLoad %5 %64
%69 = OpCompositeConstruct %68 %63 %67
%70 = OpCompositeExtract %5 %69 0
%71 = OpCompositeExtract %5 %69 1
%72 = OpIAdd %5 %70 %73
%74 = OpIAdd %5 %71 %73
%75 = OpIMul %26 %50 %61
%76 = OpAccessChain %51 %13 %49 %75
OpStore %76 %72
%78 = OpIAdd %26 %75 %66
%77 = OpAccessChain %51 %13 %49 %78
OpStore %77 %74
%79 = OpIMul %26 %50 %80
%81 = OpAccessChain %51 %17 %49 %79
%82 = OpLoad %5 %81
%84 = OpIAdd %26 %79 %66
%83 = OpAccessChain %51 %17 %49 %84
%85 = OpLoad %5 %83
%87 = OpIAdd %26 %79 %61
%86 = OpAccessChain %51 %17 %49 %87
%88 = OpLoad %5 %86
%90 = OpCompositeConstruct %89 %82 %85 %88
%92 = OpBitcast %91 %90
%93 = OpCompositeExtract %54 %92 0
%94 = OpCompositeExtract %54 %92 1
%95 = OpCompositeExtract %54 %92 2
%96 = OpFAdd %54 %93 %97
%98 = OpFAdd %54 %94 %97
%99 = OpFAdd %54 %95 %97
%100 = OpIMul %26 %50 %80
%101 = OpBitcast %5 %96
%102 = OpBitcast %5 %98
%103 = OpBitcast %5 %99
%104 = OpAccessChain %51 %17 %49 %100
OpStore %104 %101
%106 = OpIAdd %26 %100 %66
%105 = OpAccessChain %51 %17 %49 %106
OpStore %105 %102
%108 = OpIAdd %26 %100 %61
%107 = OpAccessChain %51 %17 %49 %108
OpStore %107 %103
%109 = OpIMul %26 %50 %110
%111 = OpAccessChain %51 %21 %49 %109
%112 = OpLoad %5 %111
%114 = OpIAdd %26 %109 %66
%113 = OpAccessChain %51 %21 %49 %114
%115 = OpLoad %5 %113
%117 = OpIAdd %26 %109 %61
%116 = OpAccessChain %51 %21 %49 %117
%118 = OpLoad %5 %116
%120 = OpIAdd %26 %109 %80
%119 = OpAccessChain %51 %21 %49 %120
%121 = OpLoad %5 %119
%123 = OpCompositeConstruct %122 %112 %115 %118 %121
%124 = OpCompositeExtract %5 %123 0
%125 = OpCompositeExtract %5 %123 1
%126 = OpCompositeExtract %5 %123 2
%127 = OpCompositeExtract %5 %123 3
%128 = OpIAdd %5 %124 %129
%130 = OpIAdd %5 %125 %129
%131 = OpIAdd %5 %126 %129
%132 = OpIAdd %5 %127 %129
%133 = OpIMul %26 %50 %110
%134 = OpAccessChain %51 %21 %49 %133
OpStore %134 %128
%136 = OpIAdd %26 %133 %66
%135 = OpAccessChain %51 %21 %49 %136
OpStore %135 %130
%138 = OpIAdd %26 %133 %61
%137 = OpAccessChain %51 %21 %49 %138
OpStore %137 %131
%140 = OpIAdd %26 %133 %80
%139 = OpAccessChain %51 %21 %49 %140
OpStore %139 %132
%141 = OpShiftLeftLogical %26 %50 %66
%142 = OpAccessChain %51 %25 %49 %50
%143 = OpLoad %5 %142
%144 = OpBitcast %54 %143
%146 = OpFConvert %145 %144
%147 = OpShiftLeftLogical %26 %50 %61
%148 = OpIMul %26 %50 %61
%149 = OpAccessChain %51 %25 %49 %148
%150 = OpLoad %5 %149
%152 = OpIAdd %26 %148 %66
%151 = OpAccessChain %51 %25 %49 %152
%153 = OpLoad %5 %151
%154 = OpCompositeConstruct %68 %150 %153
%156 = OpBitcast %155 %154
%157 = OpCompositeExtract %54 %156 0
%158 = OpCompositeExtract %54 %156 1
%159 = OpFConvert %145 %157
%160 = OpFConvert %145 %158
%161 = OpFAdd %145 %159 %146
%162 = OpFAdd %145 %160 %146
%163 = OpIMul %26 %50 %164
%165 = OpIMul %26 %50 %80
%166 = OpAccessChain %51 %25 %49 %165
%167 = OpLoad %5 %166
%169 = OpIAdd %26 %165 %66
%168 = OpAccessChain %51 %25 %49 %169
%170 = OpLoad %5 %168
%172 = OpIAdd %26 %165 %61
%171 = OpAccessChain %51 %25 %49 %172
%173 = OpLoad %5 %171
%174 = OpCompositeConstruct %89 %167 %170 %173
%175 = OpBitcast %91 %174
%176 = OpCompositeExtract %54 %175 0
%177 = OpCompositeExtract %54 %175 1
%178 = OpCompositeExtract %54 %175 2
%179 = OpFConvert %145 %176
%180 = OpFConvert %145 %177
%181 = OpFConvert %145 %178
%182 = OpFAdd %145 %161 %179
%183 = OpFAdd %145 %161 %180
%184 = OpFAdd %145 %162 %181
%185 = OpShiftLeftLogical %26 %50 %80
%186 = OpIMul %26 %50 %110
%187 = OpAccessChain %51 %25 %49 %186
%188 = OpLoad %5 %187
%190 = OpIAdd %26 %186 %66
%189 = OpAccessChain %51 %25 %49 %190
%191 = OpLoad %5 %189
%193 = OpIAdd %26 %186 %61
%192 = OpAccessChain %51 %25 %49 %193
%194 = OpLoad %5 %192
%196 = OpIAdd %26 %186 %80
%195 = OpAccessChain %51 %25 %49 %196
%197 = OpLoad %5 %195
%198 = OpCompositeConstruct %122 %188 %191 %194 %197
%200 = OpBitcast %199 %198
%201 = OpCompositeExtract %54 %200 0
%202 = OpCompositeExtract %54 %200 1
%203 = OpCompositeExtract %54 %200 2
%204 = OpCompositeExtract %54 %200 3
%205 = OpFConvert %145 %201
%206 = OpFConvert %145 %202
%207 = OpFConvert %145 %203
%208 = OpFConvert %145 %204
%209 = OpFAdd %145 %182 %205
%210 = OpFAdd %145 %183 %206
%211 = OpFAdd %145 %184 %207
%212 = OpAccessChain %51 %25 %49 %50
%213 = OpLoad %5 %212
%214 = OpConvertUToF %145 %213
%215 = OpFAdd %145 %209 %214
%216 = OpFAdd %145 %210 %214
%217 = OpFAdd %145 %211 %214
%218 = OpIMul %26 %50 %61
%219 = OpAccessChain %51 %25 %49 %218
%220 = OpLoad %5 %219
%222 = OpIAdd %26 %218 %66
%221 = OpAccessChain %51 %25 %49 %222
%223 = OpLoad %5 %221
%224 = OpCompositeConstruct %68 %220 %223
%225 = OpCompositeExtract %5 %224 0
%226 = OpCompositeExtract %5 %224 1
%227 = OpConvertUToF %145 %225
%228 = OpConvertUToF %145 %226
%229 = OpFAdd %145 %215 %227
%230 = OpFAdd %145 %216 %227
%231 = OpFAdd %145 %217 %228
%232 = OpIMul %26 %50 %80
%233 = OpAccessChain %51 %25 %49 %232
%234 = OpLoad %5 %233
%236 = OpIAdd %26 %232 %66
%235 = OpAccessChain %51 %25 %49 %236
%237 = OpLoad %5 %235
%239 = OpIAdd %26 %232 %61
%238 = OpAccessChain %51 %25 %49 %239
%240 = OpLoad %5 %238
%241 = OpCompositeConstruct %89 %234 %237 %240
%242 = OpCompositeExtract %5 %241 0
%243 = OpCompositeExtract %5 %241 1
%244 = OpCompositeExtract %5 %241 2
%245 = OpConvertUToF %145 %242
%246 = OpConvertUToF %145 %243
%247 = OpConvertUToF %145 %244
%248 = OpFAdd %145 %229 %245
%249 = OpFAdd %145 %230 %246
%250 = OpFAdd %145 %231 %247
%251 = OpIMul %26 %50 %110
%252 = OpAccessChain %51 %25 %49 %251
%253 = OpLoad %5 %252
%255 = OpIAdd %26 %251 %66
%254 = OpAccessChain %51 %25 %49 %255
%256 = OpLoad %5 %254
%258 = OpIAdd %26 %251 %61
%257 = OpAccessChain %51 %25 %49 %258
%259 = OpLoad %5 %257
%261 = OpIAdd %26 %251 %80
%260 = OpAccessChain %51 %25 %49 %261
%262 = OpLoad %5 %260
%263 = OpCompositeConstruct %122 %253 %256 %259 %262
%264 = OpCompositeExtract %5 %263 0
%265 = OpCompositeExtract %5 %263 1
%266 = OpCompositeExtract %5 %263 2
%267 = OpCompositeExtract %5 %263 3
%268 = OpConvertUToF %145 %264
%269 = OpConvertUToF %145 %265
%270 = OpConvertUToF %145 %266
%271 = OpConvertUToF %145 %267
%272 = OpFAdd %145 %248 %268
%273 = OpFAdd %145 %249 %269
%274 = OpFAdd %145 %250 %270
%275 = OpBitcast %5 %57
%276 = OpAccessChain %51 %34 %49 %50
OpStore %276 %275
%277 = OpIMul %26 %50 %61
%279 = OpBitcast %5 %278
%281 = OpBitcast %5 %280
%282 = OpAccessChain %51 %34 %49 %277
OpStore %282 %279
%284 = OpIAdd %26 %277 %66
%283 = OpAccessChain %51 %34 %49 %284
OpStore %283 %281
%285 = OpIMul %26 %50 %80
%286 = OpBitcast %5 %280
%288 = OpBitcast %5 %287
%290 = OpBitcast %5 %289
%291 = OpAccessChain %51 %34 %49 %285
OpStore %291 %286
%293 = OpIAdd %26 %285 %66
%292 = OpAccessChain %51 %34 %49 %293
OpStore %292 %288
%295 = OpIAdd %26 %285 %61
%294 = OpAccessChain %51 %34 %49 %295
OpStore %294 %290
%296 = OpIMul %26 %50 %110
%298 = OpBitcast %5 %297
%300 = OpBitcast %5 %299
%302 = OpBitcast %5 %301
%304 = OpBitcast %5 %303
%305 = OpAccessChain %51 %34 %49 %296
OpStore %305 %298
%307 = OpIAdd %26 %296 %66
%306 = OpAccessChain %51 %34 %49 %307
OpStore %306 %300
%309 = OpIAdd %26 %296 %61
%308 = OpAccessChain %51 %34 %49 %309
OpStore %308 %302
%311 = OpIAdd %26 %296 %80
%310 = OpAccessChain %51 %34 %49 %311
OpStore %310 %304
%313 = OpAccessChain %51 %38 %49 %50
OpStore %313 %312
%314 = OpIMul %26 %50 %61
%315 = OpAccessChain %51 %38 %49 %314
OpStore %315 %73
%317 = OpIAdd %26 %314 %66
%316 = OpAccessChain %51 %38 %49 %317
OpStore %316 %129
%318 = OpIMul %26 %50 %80
%321 = OpAccessChain %51 %38 %49 %318
OpStore %321 %129
%323 = OpIAdd %26 %318 %66
%322 = OpAccessChain %51 %38 %49 %323
OpStore %322 %319
%325 = OpIAdd %26 %318 %61
%324 = OpAccessChain %51 %38 %49 %325
OpStore %324 %320
%326 = OpIMul %26 %50 %110
%331 = OpAccessChain %51 %38 %49 %326
OpStore %331 %327
%333 = OpIAdd %26 %326 %66
%332 = OpAccessChain %51 %38 %49 %333
OpStore %332 %328
%335 = OpIAdd %26 %326 %61
%334 = OpAccessChain %51 %38 %49 %335
OpStore %334 %329
%337 = OpIAdd %26 %326 %80
%336 = OpAccessChain %51 %38 %49 %337
OpStore %336 %330
%339 = OpAccessChain %338 %30 %49 %50
%340 = OpLoad %26 %339
%341 = OpBitcast %145 %340
%342 = OpFAdd %145 %272 %341
%343 = OpFAdd %145 %273 %341
%344 = OpFAdd %145 %274 %341
%345 = OpIAdd %26 %50 %49
%347 = OpAccessChain %346 %43 %345
%348 = OpIMul %26 %50 %61
%349 = OpAccessChain %51 %347 %49 %348
%350 = OpLoad %5 %349
%351 = OpBitcast %54 %350
%352 = OpFConvert %145 %351
%353 = OpFAdd %145 %342 %352
%354 = OpFAdd %145 %343 %352
%355 = OpFAdd %145 %344 %352
%356 = OpFConvert %54 %353
%357 = OpFConvert %54 %354
%358 = OpIMul %26 %50 %110
%359 = OpBitcast %5 %356
%360 = OpBitcast %5 %357
%361 = OpAccessChain %51 %347 %49 %358
OpStore %361 %359
%363 = OpIAdd %26 %358 %66
%362 = OpAccessChain %51 %347 %49 %363
OpStore %362 %360
%364 = OpArrayLength %26 %9 0
%365 = OpUDiv %26 %364 %66
%366 = OpConvertUToF %145 %365
%367 = OpFAdd %145 %366 %353
%368 = OpFAdd %145 %354 %369
%370 = OpArrayLength %26 %21 0
%371 = OpUDiv %26 %370 %110
%372 = OpConvertUToF %145 %371
%373 = OpFAdd %145 %355 %372
%374 = OpFAdd %145 %146 %375
%376 = OpFAdd %145 %374 %160
%377 = OpFAdd %145 %376 %179
%378 = OpFAdd %145 %377 %208
%379 = OpFAdd %145 %378 %214
%380 = OpFAdd %145 %379 %228
%381 = OpFAdd %145 %380 %245
%382 = OpFAdd %145 %381 %271
%383 = OpFAdd %145 %382 %341
%384 = OpFAdd %145 %383 %352
%385 = OpArrayLength %26 %34 0
%386 = OpIMul %26 %385 %61
%387 = OpConvertUToF %145 %386
%388 = OpFAdd %145 %367 %387
%389 = OpConvertFToU %26 %388
%390 = OpConvertFToU %26 %368
%391 = OpConvertFToU %26 %373
%392 = OpConvertFToU %26 %384
%393 = OpShiftLeftLogical %26 %50 %110
%394 = OpIMul %26 %50 %110
%395 = OpAccessChain %338 %30 %49 %394
OpStore %395 %389
%397 = OpIAdd %26 %394 %66
%396 = OpAccessChain %338 %30 %49 %397
OpStore %396 %390
%399 = OpIAdd %26 %394 %61
%398 = OpAccessChain %338 %30 %49 %399
OpStore %398 %391
%401 = OpIAdd %26 %394 %80
%400 = OpAccessChain %338 %30 %49 %401
OpStore %400 %392
OpReturn
OpFunctionEnd
#endif
