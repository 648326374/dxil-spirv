#version 460
#extension GL_ARB_gpu_shader_int64 : require
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_KHR_shader_subgroup_ballot : require
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

layout(set = 15, binding = 0, std430) restrict readonly buffer SSBO_Offsets
{
    uvec2 _m0[];
} _13;

layout(set = 1, binding = 0, std430) restrict readonly buffer SSBO
{
    uint64_t _m0[];
} _19[];

layout(set = 1, binding = 0, std430) restrict readonly buffer _21_24
{
    uint64_t _m0[];
} _24[];

layout(set = 4, binding = 0, std430) writeonly buffer _26_29
{
    uint64_t _m0[];
} _29[];

layout(set = 4, binding = 0, std430) writeonly buffer _31_34
{
    uint64_t _m0[];
} _34[];

layout(push_constant, std430) uniform RootConstants
{
    uint _m0;
    uint _m1;
    uint _m2;
    uint _m3;
    uint _m4;
    uint _m5;
    uint _m6;
    uint _m7;
} registers;

void main()
{
    uint _41 = registers._m4 + 1u;
    uvec2 _49 = _13._m0[subgroupBroadcastFirst(_41)] >> uvec2(3u);
    uvec2 _58 = _13._m0[subgroupBroadcastFirst(registers._m4)] >> uvec2(3u);
    uint _63 = registers._m1 + 1u;
    uvec2 _67 = _13._m0[subgroupBroadcastFirst(_63)] >> uvec2(3u);
    uvec2 _75 = _13._m0[subgroupBroadcastFirst(registers._m1)] >> uvec2(3u);
    uint _82 = gl_GlobalInvocationID.x << 1u;
    uint _83 = _82 * 3u;
    uint _89 = (_83 < _75.y) ? (_83 + _75.x) : 536870908u;
    u64vec3 _102 = u64vec3(_19[registers._m1]._m0[_89], _19[registers._m1]._m0[_89 + 1u], _19[registers._m1]._m0[_89 + 2u]);
    uint64_t _103 = _102.x;
    uint64_t _104 = _102.y;
    uint64_t _105 = _102.z;
    uint _107 = (_82 | 1u) * 3u;
    uint _112 = (_107 < _75.y) ? (_107 + _75.x) : 536870908u;
    u64vec3 _121 = u64vec3(_19[registers._m1]._m0[_112], _19[registers._m1]._m0[_112 + 1u], _19[registers._m1]._m0[_112 + 2u]);
    uint64_t _122 = _121.x;
    uint64_t _123 = _121.y;
    uint64_t _124 = _121.z;
    uint _128 = gl_GlobalInvocationID.x << 3u;
    uint _129 = _128 * 3u;
    uint _134 = (_129 < _58.y) ? (_129 + _58.x) : 536870908u;
    _29[registers._m4]._m0[_134] = _122 + _103;
    _29[registers._m4]._m0[_134 + 1u] = _123 + _104;
    _29[registers._m4]._m0[_134 + 2u] = _124 + _105;
    uint _144 = (_128 | 1u) * 3u;
    uint _149 = (_144 < _58.y) ? (_144 + _58.x) : 536870908u;
    _29[registers._m4]._m0[_149] = _103 - _122;
    _29[registers._m4]._m0[_149 + 1u] = _104 - _123;
    _29[registers._m4]._m0[_149 + 2u] = _105 - _124;
    uint _159 = (_128 | 2u) * 3u;
    uint _164 = (_159 < _58.y) ? (_159 + _58.x) : 536870908u;
    _29[registers._m4]._m0[_164] = _122 * _103;
    _29[registers._m4]._m0[_164 + 1u] = _123 * _104;
    _29[registers._m4]._m0[_164 + 2u] = _124 * _105;
    uint _174 = (_128 | 3u) * 3u;
    uint _179 = (_174 < _58.y) ? (_174 + _58.x) : 536870908u;
    _29[registers._m4]._m0[_179] = _103 / _122;
    _29[registers._m4]._m0[_179 + 1u] = _104 / _123;
    _29[registers._m4]._m0[_179 + 2u] = _105 / _124;
    uint64_t _185 = _122 & 63ul;
    uint64_t _187 = _123 & 63ul;
    uint64_t _188 = _124 & 63ul;
    uint _193 = (_128 | 4u) * 3u;
    uint _198 = (_193 < _58.y) ? (_193 + _58.x) : 536870908u;
    _29[registers._m4]._m0[_198] = _103 << _185;
    _29[registers._m4]._m0[_198 + 1u] = _104 << _187;
    _29[registers._m4]._m0[_198 + 2u] = _105 << _188;
    uint _209 = (_128 | 5u) * 3u;
    uint _214 = (_209 < _58.y) ? (_209 + _58.x) : 536870908u;
    _29[registers._m4]._m0[_214] = _103 >> _185;
    _29[registers._m4]._m0[_214 + 1u] = _104 >> _187;
    _29[registers._m4]._m0[_214 + 2u] = _105 >> _188;
    uint _225 = (_128 | 6u) * 3u;
    uint _230 = (_225 < _58.y) ? (_225 + _58.x) : 536870908u;
    _29[registers._m4]._m0[_230] = uint64_t(int64_t(_103) >> int64_t(_185));
    _29[registers._m4]._m0[_230 + 1u] = uint64_t(int64_t(_104) >> int64_t(_187));
    _29[registers._m4]._m0[_230 + 2u] = uint64_t(int64_t(_105) >> int64_t(_188));
    uint _241 = (_128 | 7u) * 3u;
    uint _246 = (_241 < _58.y) ? (_241 + _58.x) : 536870908u;
    _29[registers._m4]._m0[_246] = _122 & _103;
    _29[registers._m4]._m0[_246 + 1u] = _123 & _104;
    _29[registers._m4]._m0[_246 + 2u] = _124 & _105;
    uint _254 = gl_GlobalInvocationID.x * 3u;
    uint _259 = (_254 < _67.y) ? (_254 + _67.x) : 536870908u;
    u64vec2 _266 = u64vec2(_24[_63]._m0[_259], _24[_63]._m0[_259 + 1u]);
    uint _273 = (gl_GlobalInvocationID.x < _49.y) ? (gl_GlobalInvocationID.x + _49.x) : 536870908u;
    _34[_41]._m0[_273] = _266.x;
    _34[_41]._m0[_273 + 1u] = _266.y;
    _34[_41]._m0[_273 + 2u] = _105;
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 281
; Schema: 0
OpCapability Shader
OpCapability Int64
OpCapability GroupNonUniformBallot
OpCapability RuntimeDescriptorArray
OpCapability PhysicalStorageBufferAddresses
OpExtension "SPV_EXT_descriptor_indexing"
OpExtension "SPV_KHR_physical_storage_buffer"
OpMemoryModel PhysicalStorageBuffer64 GLSL450
OpEntryPoint GLCompute %3 "main" %78
OpExecutionMode %3 LocalSize 128 1 1
OpName %3 "main"
OpName %6 "RootConstants"
OpName %8 "registers"
OpName %11 "SSBO_Offsets"
OpName %16 "SSBO"
OpName %21 "SSBO"
OpName %26 "SSBO"
OpName %31 "SSBO"
OpDecorate %6 Block
OpMemberDecorate %6 0 Offset 0
OpMemberDecorate %6 1 Offset 4
OpMemberDecorate %6 2 Offset 8
OpMemberDecorate %6 3 Offset 12
OpMemberDecorate %6 4 Offset 16
OpMemberDecorate %6 5 Offset 20
OpMemberDecorate %6 6 Offset 24
OpMemberDecorate %6 7 Offset 28
OpDecorate %10 ArrayStride 8
OpMemberDecorate %11 0 Offset 0
OpDecorate %11 Block
OpDecorate %13 DescriptorSet 15
OpDecorate %13 Binding 0
OpDecorate %13 NonWritable
OpDecorate %13 Restrict
OpDecorate %15 ArrayStride 8
OpMemberDecorate %16 0 Offset 0
OpDecorate %16 Block
OpDecorate %19 DescriptorSet 1
OpDecorate %19 Binding 0
OpDecorate %19 NonWritable
OpDecorate %19 Restrict
OpDecorate %20 ArrayStride 8
OpMemberDecorate %21 0 Offset 0
OpDecorate %21 Block
OpDecorate %24 DescriptorSet 1
OpDecorate %24 Binding 0
OpDecorate %24 NonWritable
OpDecorate %24 Restrict
OpDecorate %25 ArrayStride 8
OpMemberDecorate %26 0 Offset 0
OpDecorate %26 Block
OpDecorate %29 DescriptorSet 4
OpDecorate %29 Binding 0
OpDecorate %29 NonReadable
OpDecorate %30 ArrayStride 8
OpMemberDecorate %31 0 Offset 0
OpDecorate %31 Block
OpDecorate %34 DescriptorSet 4
OpDecorate %34 Binding 0
OpDecorate %34 NonReadable
OpDecorate %78 BuiltIn GlobalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeStruct %5 %5 %5 %5 %5 %5 %5 %5
%7 = OpTypePointer PushConstant %6
%8 = OpVariable %7 PushConstant
%9 = OpTypeVector %5 2
%10 = OpTypeRuntimeArray %9
%11 = OpTypeStruct %10
%12 = OpTypePointer StorageBuffer %11
%13 = OpVariable %12 StorageBuffer
%14 = OpTypeInt 64 0
%15 = OpTypeRuntimeArray %14
%16 = OpTypeStruct %15
%17 = OpTypeRuntimeArray %16
%18 = OpTypePointer StorageBuffer %17
%19 = OpVariable %18 StorageBuffer
%20 = OpTypeRuntimeArray %14
%21 = OpTypeStruct %20
%22 = OpTypeRuntimeArray %21
%23 = OpTypePointer StorageBuffer %22
%24 = OpVariable %23 StorageBuffer
%25 = OpTypeRuntimeArray %14
%26 = OpTypeStruct %25
%27 = OpTypeRuntimeArray %26
%28 = OpTypePointer StorageBuffer %27
%29 = OpVariable %28 StorageBuffer
%30 = OpTypeRuntimeArray %14
%31 = OpTypeStruct %30
%32 = OpTypeRuntimeArray %31
%33 = OpTypePointer StorageBuffer %32
%34 = OpVariable %33 StorageBuffer
%35 = OpTypePointer StorageBuffer %31
%37 = OpTypePointer PushConstant %5
%39 = OpConstant %5 4
%42 = OpConstant %5 1
%44 = OpConstant %5 3
%45 = OpTypePointer StorageBuffer %9
%47 = OpConstant %5 0
%50 = OpConstantComposite %9 %44 %44
%51 = OpTypePointer StorageBuffer %26
%59 = OpTypePointer StorageBuffer %21
%68 = OpTypePointer StorageBuffer %16
%76 = OpTypeVector %5 3
%77 = OpTypePointer Input %76
%78 = OpVariable %77 Input
%79 = OpTypePointer Input %5
%87 = OpTypeBool
%90 = OpConstant %5 536870908
%91 = OpTypePointer StorageBuffer %14
%99 = OpConstant %5 2
%101 = OpTypeVector %14 3
%186 = OpConstant %14 63
%208 = OpConstant %5 5
%224 = OpConstant %5 6
%240 = OpConstant %5 7
%253 = OpConstant %5 24
%265 = OpTypeVector %14 2
%3 = OpFunction %1 None %2
%4 = OpLabel
OpBranch %279
%279 = OpLabel
%38 = OpAccessChain %37 %8 %39
%40 = OpLoad %5 %38
%41 = OpIAdd %5 %40 %42
%36 = OpAccessChain %35 %34 %41
%43 = OpGroupNonUniformBroadcastFirst %5 %44 %41
%46 = OpAccessChain %45 %13 %47 %43
%48 = OpLoad %9 %46
%49 = OpShiftRightLogical %9 %48 %50
%53 = OpAccessChain %37 %8 %39
%54 = OpLoad %5 %53
%52 = OpAccessChain %51 %29 %54
%55 = OpGroupNonUniformBroadcastFirst %5 %44 %54
%56 = OpAccessChain %45 %13 %47 %55
%57 = OpLoad %9 %56
%58 = OpShiftRightLogical %9 %57 %50
%61 = OpAccessChain %37 %8 %42
%62 = OpLoad %5 %61
%63 = OpIAdd %5 %62 %42
%60 = OpAccessChain %59 %24 %63
%64 = OpGroupNonUniformBroadcastFirst %5 %44 %63
%65 = OpAccessChain %45 %13 %47 %64
%66 = OpLoad %9 %65
%67 = OpShiftRightLogical %9 %66 %50
%70 = OpAccessChain %37 %8 %42
%71 = OpLoad %5 %70
%69 = OpAccessChain %68 %19 %71
%72 = OpGroupNonUniformBroadcastFirst %5 %44 %71
%73 = OpAccessChain %45 %13 %47 %72
%74 = OpLoad %9 %73
%75 = OpShiftRightLogical %9 %74 %50
%80 = OpAccessChain %79 %78 %47
%81 = OpLoad %5 %80
%82 = OpShiftLeftLogical %5 %81 %42
%83 = OpIMul %5 %82 %44
%84 = OpCompositeExtract %5 %75 0
%85 = OpCompositeExtract %5 %75 1
%86 = OpIAdd %5 %83 %84
%88 = OpULessThan %87 %83 %85
%89 = OpSelect %5 %88 %86 %90
%92 = OpAccessChain %91 %69 %47 %89
%93 = OpLoad %14 %92
%95 = OpIAdd %5 %89 %42
%94 = OpAccessChain %91 %69 %47 %95
%96 = OpLoad %14 %94
%98 = OpIAdd %5 %89 %99
%97 = OpAccessChain %91 %69 %47 %98
%100 = OpLoad %14 %97
%102 = OpCompositeConstruct %101 %93 %96 %100
%103 = OpCompositeExtract %14 %102 0
%104 = OpCompositeExtract %14 %102 1
%105 = OpCompositeExtract %14 %102 2
%106 = OpBitwiseOr %5 %82 %42
%107 = OpIMul %5 %106 %44
%108 = OpCompositeExtract %5 %75 0
%109 = OpCompositeExtract %5 %75 1
%110 = OpIAdd %5 %107 %108
%111 = OpULessThan %87 %107 %109
%112 = OpSelect %5 %111 %110 %90
%113 = OpAccessChain %91 %69 %47 %112
%114 = OpLoad %14 %113
%116 = OpIAdd %5 %112 %42
%115 = OpAccessChain %91 %69 %47 %116
%117 = OpLoad %14 %115
%119 = OpIAdd %5 %112 %99
%118 = OpAccessChain %91 %69 %47 %119
%120 = OpLoad %14 %118
%121 = OpCompositeConstruct %101 %114 %117 %120
%122 = OpCompositeExtract %14 %121 0
%123 = OpCompositeExtract %14 %121 1
%124 = OpCompositeExtract %14 %121 2
%125 = OpIAdd %14 %122 %103
%126 = OpIAdd %14 %123 %104
%127 = OpIAdd %14 %124 %105
%128 = OpShiftLeftLogical %5 %81 %44
%129 = OpIMul %5 %128 %44
%130 = OpCompositeExtract %5 %58 0
%131 = OpCompositeExtract %5 %58 1
%132 = OpIAdd %5 %129 %130
%133 = OpULessThan %87 %129 %131
%134 = OpSelect %5 %133 %132 %90
%135 = OpAccessChain %91 %52 %47 %134
OpStore %135 %125
%137 = OpIAdd %5 %134 %42
%136 = OpAccessChain %91 %52 %47 %137
OpStore %136 %126
%139 = OpIAdd %5 %134 %99
%138 = OpAccessChain %91 %52 %47 %139
OpStore %138 %127
%140 = OpISub %14 %103 %122
%141 = OpISub %14 %104 %123
%142 = OpISub %14 %105 %124
%143 = OpBitwiseOr %5 %128 %42
%144 = OpIMul %5 %143 %44
%145 = OpCompositeExtract %5 %58 0
%146 = OpCompositeExtract %5 %58 1
%147 = OpIAdd %5 %144 %145
%148 = OpULessThan %87 %144 %146
%149 = OpSelect %5 %148 %147 %90
%150 = OpAccessChain %91 %52 %47 %149
OpStore %150 %140
%152 = OpIAdd %5 %149 %42
%151 = OpAccessChain %91 %52 %47 %152
OpStore %151 %141
%154 = OpIAdd %5 %149 %99
%153 = OpAccessChain %91 %52 %47 %154
OpStore %153 %142
%155 = OpIMul %14 %122 %103
%156 = OpIMul %14 %123 %104
%157 = OpIMul %14 %124 %105
%158 = OpBitwiseOr %5 %128 %99
%159 = OpIMul %5 %158 %44
%160 = OpCompositeExtract %5 %58 0
%161 = OpCompositeExtract %5 %58 1
%162 = OpIAdd %5 %159 %160
%163 = OpULessThan %87 %159 %161
%164 = OpSelect %5 %163 %162 %90
%165 = OpAccessChain %91 %52 %47 %164
OpStore %165 %155
%167 = OpIAdd %5 %164 %42
%166 = OpAccessChain %91 %52 %47 %167
OpStore %166 %156
%169 = OpIAdd %5 %164 %99
%168 = OpAccessChain %91 %52 %47 %169
OpStore %168 %157
%170 = OpUDiv %14 %103 %122
%171 = OpUDiv %14 %104 %123
%172 = OpUDiv %14 %105 %124
%173 = OpBitwiseOr %5 %128 %44
%174 = OpIMul %5 %173 %44
%175 = OpCompositeExtract %5 %58 0
%176 = OpCompositeExtract %5 %58 1
%177 = OpIAdd %5 %174 %175
%178 = OpULessThan %87 %174 %176
%179 = OpSelect %5 %178 %177 %90
%180 = OpAccessChain %91 %52 %47 %179
OpStore %180 %170
%182 = OpIAdd %5 %179 %42
%181 = OpAccessChain %91 %52 %47 %182
OpStore %181 %171
%184 = OpIAdd %5 %179 %99
%183 = OpAccessChain %91 %52 %47 %184
OpStore %183 %172
%185 = OpBitwiseAnd %14 %122 %186
%187 = OpBitwiseAnd %14 %123 %186
%188 = OpBitwiseAnd %14 %124 %186
%189 = OpShiftLeftLogical %14 %103 %185
%190 = OpShiftLeftLogical %14 %104 %187
%191 = OpShiftLeftLogical %14 %105 %188
%192 = OpBitwiseOr %5 %128 %39
%193 = OpIMul %5 %192 %44
%194 = OpCompositeExtract %5 %58 0
%195 = OpCompositeExtract %5 %58 1
%196 = OpIAdd %5 %193 %194
%197 = OpULessThan %87 %193 %195
%198 = OpSelect %5 %197 %196 %90
%199 = OpAccessChain %91 %52 %47 %198
OpStore %199 %189
%201 = OpIAdd %5 %198 %42
%200 = OpAccessChain %91 %52 %47 %201
OpStore %200 %190
%203 = OpIAdd %5 %198 %99
%202 = OpAccessChain %91 %52 %47 %203
OpStore %202 %191
%204 = OpShiftRightLogical %14 %103 %185
%205 = OpShiftRightLogical %14 %104 %187
%206 = OpShiftRightLogical %14 %105 %188
%207 = OpBitwiseOr %5 %128 %208
%209 = OpIMul %5 %207 %44
%210 = OpCompositeExtract %5 %58 0
%211 = OpCompositeExtract %5 %58 1
%212 = OpIAdd %5 %209 %210
%213 = OpULessThan %87 %209 %211
%214 = OpSelect %5 %213 %212 %90
%215 = OpAccessChain %91 %52 %47 %214
OpStore %215 %204
%217 = OpIAdd %5 %214 %42
%216 = OpAccessChain %91 %52 %47 %217
OpStore %216 %205
%219 = OpIAdd %5 %214 %99
%218 = OpAccessChain %91 %52 %47 %219
OpStore %218 %206
%220 = OpShiftRightArithmetic %14 %103 %185
%221 = OpShiftRightArithmetic %14 %104 %187
%222 = OpShiftRightArithmetic %14 %105 %188
%223 = OpBitwiseOr %5 %128 %224
%225 = OpIMul %5 %223 %44
%226 = OpCompositeExtract %5 %58 0
%227 = OpCompositeExtract %5 %58 1
%228 = OpIAdd %5 %225 %226
%229 = OpULessThan %87 %225 %227
%230 = OpSelect %5 %229 %228 %90
%231 = OpAccessChain %91 %52 %47 %230
OpStore %231 %220
%233 = OpIAdd %5 %230 %42
%232 = OpAccessChain %91 %52 %47 %233
OpStore %232 %221
%235 = OpIAdd %5 %230 %99
%234 = OpAccessChain %91 %52 %47 %235
OpStore %234 %222
%236 = OpBitwiseAnd %14 %122 %103
%237 = OpBitwiseAnd %14 %123 %104
%238 = OpBitwiseAnd %14 %124 %105
%239 = OpBitwiseOr %5 %128 %240
%241 = OpIMul %5 %239 %44
%242 = OpCompositeExtract %5 %58 0
%243 = OpCompositeExtract %5 %58 1
%244 = OpIAdd %5 %241 %242
%245 = OpULessThan %87 %241 %243
%246 = OpSelect %5 %245 %244 %90
%247 = OpAccessChain %91 %52 %47 %246
OpStore %247 %236
%249 = OpIAdd %5 %246 %42
%248 = OpAccessChain %91 %52 %47 %249
OpStore %248 %237
%251 = OpIAdd %5 %246 %99
%250 = OpAccessChain %91 %52 %47 %251
OpStore %250 %238
%252 = OpIMul %5 %81 %253
%254 = OpIMul %5 %81 %44
%255 = OpCompositeExtract %5 %67 0
%256 = OpCompositeExtract %5 %67 1
%257 = OpIAdd %5 %254 %255
%258 = OpULessThan %87 %254 %256
%259 = OpSelect %5 %258 %257 %90
%260 = OpAccessChain %91 %60 %47 %259
%261 = OpLoad %14 %260
%263 = OpIAdd %5 %259 %42
%262 = OpAccessChain %91 %60 %47 %263
%264 = OpLoad %14 %262
%266 = OpCompositeConstruct %265 %261 %264
%267 = OpCompositeExtract %14 %266 0
%268 = OpCompositeExtract %14 %266 1
%269 = OpCompositeExtract %5 %49 0
%270 = OpCompositeExtract %5 %49 1
%271 = OpIAdd %5 %81 %269
%272 = OpULessThan %87 %81 %270
%273 = OpSelect %5 %272 %271 %90
%274 = OpAccessChain %91 %36 %47 %273
OpStore %274 %267
%276 = OpIAdd %5 %273 %42
%275 = OpAccessChain %91 %36 %47 %276
OpStore %275 %268
%278 = OpIAdd %5 %273 %99
%277 = OpAccessChain %91 %36 %47 %278
OpStore %277 %105
OpReturn
OpFunctionEnd
#endif
