#version 460
#extension GL_ARB_gpu_shader_int64 : require
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, std430) restrict readonly buffer SSBO
{
    uint64_t _m0[];
} _10;

layout(set = 0, binding = 1, std430) restrict readonly buffer _12_14
{
    uint64_t _m0[];
} _14;

layout(set = 0, binding = 0, std430) writeonly buffer _16_18
{
    uint64_t _m0[];
} _18;

layout(set = 0, binding = 1, std430) writeonly buffer _20_22
{
    uint64_t _m0[];
} _22;

void main()
{
    uint _30 = gl_GlobalInvocationID.x << 1u;
    uint _32 = _30 * 3u;
    u64vec3 _45 = u64vec3(_10._m0[_32], _10._m0[_32 + 1u], _10._m0[_32 + 2u]);
    uint64_t _46 = _45.x;
    uint64_t _47 = _45.y;
    uint64_t _48 = _45.z;
    uint _50 = (_30 | 1u) * 3u;
    u64vec3 _59 = u64vec3(_10._m0[_50], _10._m0[_50 + 1u], _10._m0[_50 + 2u]);
    uint64_t _60 = _59.x;
    uint64_t _61 = _59.y;
    uint64_t _62 = _59.z;
    uint _66 = gl_GlobalInvocationID.x << 3u;
    uint _67 = _66 * 3u;
    _18._m0[_67] = _60 + _46;
    _18._m0[_67 + 1u] = _61 + _47;
    _18._m0[_67 + 2u] = _62 + _48;
    uint _77 = (_66 | 1u) * 3u;
    _18._m0[_77] = _46 - _60;
    _18._m0[_77 + 1u] = _47 - _61;
    _18._m0[_77 + 2u] = _48 - _62;
    uint _87 = (_66 | 2u) * 3u;
    _18._m0[_87] = _60 * _46;
    _18._m0[_87 + 1u] = _61 * _47;
    _18._m0[_87 + 2u] = _62 * _48;
    uint _97 = (_66 | 3u) * 3u;
    _18._m0[_97] = _46 / _60;
    _18._m0[_97 + 1u] = _47 / _61;
    _18._m0[_97 + 2u] = _48 / _62;
    uint64_t _103 = _60 & 63ul;
    uint64_t _105 = _61 & 63ul;
    uint64_t _106 = _62 & 63ul;
    uint _112 = (_66 | 4u) * 3u;
    _18._m0[_112] = _46 << _103;
    _18._m0[_112 + 1u] = _47 << _105;
    _18._m0[_112 + 2u] = _48 << _106;
    uint _123 = (_66 | 5u) * 3u;
    _18._m0[_123] = _46 >> _103;
    _18._m0[_123 + 1u] = _47 >> _105;
    _18._m0[_123 + 2u] = _48 >> _106;
    uint _134 = (_66 | 6u) * 3u;
    _18._m0[_134] = uint64_t(int64_t(_46) >> int64_t(_103));
    _18._m0[_134 + 1u] = uint64_t(int64_t(_47) >> int64_t(_105));
    _18._m0[_134 + 2u] = uint64_t(int64_t(_48) >> int64_t(_106));
    uint _145 = (_66 | 7u) * 3u;
    _18._m0[_145] = _60 & _46;
    _18._m0[_145 + 1u] = _61 & _47;
    _18._m0[_145 + 2u] = _62 & _48;
    uint _153 = gl_GlobalInvocationID.x * 3u;
    u64vec2 _160 = u64vec2(_14._m0[_153], _14._m0[_153 + 1u]);
    _22._m0[gl_GlobalInvocationID.x] = _160.x;
    _22._m0[gl_GlobalInvocationID.x + 1u] = _160.y;
    _22._m0[gl_GlobalInvocationID.x + 2u] = _48;
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 170
; Schema: 0
OpCapability Shader
OpCapability Int64
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %25
OpExecutionMode %3 LocalSize 128 1 1
OpName %3 "main"
OpName %8 "SSBO"
OpName %12 "SSBO"
OpName %16 "SSBO"
OpName %20 "SSBO"
OpDecorate %7 ArrayStride 8
OpMemberDecorate %8 0 Offset 0
OpDecorate %8 Block
OpDecorate %10 DescriptorSet 0
OpDecorate %10 Binding 0
OpDecorate %10 NonWritable
OpDecorate %10 Restrict
OpDecorate %11 ArrayStride 8
OpMemberDecorate %12 0 Offset 0
OpDecorate %12 Block
OpDecorate %14 DescriptorSet 0
OpDecorate %14 Binding 1
OpDecorate %14 NonWritable
OpDecorate %14 Restrict
OpDecorate %15 ArrayStride 8
OpMemberDecorate %16 0 Offset 0
OpDecorate %16 Block
OpDecorate %18 DescriptorSet 0
OpDecorate %18 Binding 0
OpDecorate %18 NonReadable
OpDecorate %19 ArrayStride 8
OpMemberDecorate %20 0 Offset 0
OpDecorate %20 Block
OpDecorate %22 DescriptorSet 0
OpDecorate %22 Binding 1
OpDecorate %22 NonReadable
OpDecorate %25 BuiltIn GlobalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeInt 64 0
%7 = OpTypeRuntimeArray %6
%8 = OpTypeStruct %7
%9 = OpTypePointer StorageBuffer %8
%10 = OpVariable %9 StorageBuffer
%11 = OpTypeRuntimeArray %6
%12 = OpTypeStruct %11
%13 = OpTypePointer StorageBuffer %12
%14 = OpVariable %13 StorageBuffer
%15 = OpTypeRuntimeArray %6
%16 = OpTypeStruct %15
%17 = OpTypePointer StorageBuffer %16
%18 = OpVariable %17 StorageBuffer
%19 = OpTypeRuntimeArray %6
%20 = OpTypeStruct %19
%21 = OpTypePointer StorageBuffer %20
%22 = OpVariable %21 StorageBuffer
%23 = OpTypeVector %5 3
%24 = OpTypePointer Input %23
%25 = OpVariable %24 Input
%26 = OpTypePointer Input %5
%28 = OpConstant %5 0
%31 = OpConstant %5 1
%33 = OpConstant %5 3
%34 = OpTypePointer StorageBuffer %6
%42 = OpConstant %5 2
%44 = OpTypeVector %6 3
%104 = OpConstant %6 63
%111 = OpConstant %5 4
%122 = OpConstant %5 5
%133 = OpConstant %5 6
%144 = OpConstant %5 7
%152 = OpConstant %5 24
%159 = OpTypeVector %6 2
%3 = OpFunction %1 None %2
%4 = OpLabel
OpBranch %168
%168 = OpLabel
%27 = OpAccessChain %26 %25 %28
%29 = OpLoad %5 %27
%30 = OpShiftLeftLogical %5 %29 %31
%32 = OpIMul %5 %30 %33
%35 = OpAccessChain %34 %10 %28 %32
%36 = OpLoad %6 %35
%38 = OpIAdd %5 %32 %31
%37 = OpAccessChain %34 %10 %28 %38
%39 = OpLoad %6 %37
%41 = OpIAdd %5 %32 %42
%40 = OpAccessChain %34 %10 %28 %41
%43 = OpLoad %6 %40
%45 = OpCompositeConstruct %44 %36 %39 %43
%46 = OpCompositeExtract %6 %45 0
%47 = OpCompositeExtract %6 %45 1
%48 = OpCompositeExtract %6 %45 2
%49 = OpBitwiseOr %5 %30 %31
%50 = OpIMul %5 %49 %33
%51 = OpAccessChain %34 %10 %28 %50
%52 = OpLoad %6 %51
%54 = OpIAdd %5 %50 %31
%53 = OpAccessChain %34 %10 %28 %54
%55 = OpLoad %6 %53
%57 = OpIAdd %5 %50 %42
%56 = OpAccessChain %34 %10 %28 %57
%58 = OpLoad %6 %56
%59 = OpCompositeConstruct %44 %52 %55 %58
%60 = OpCompositeExtract %6 %59 0
%61 = OpCompositeExtract %6 %59 1
%62 = OpCompositeExtract %6 %59 2
%63 = OpIAdd %6 %60 %46
%64 = OpIAdd %6 %61 %47
%65 = OpIAdd %6 %62 %48
%66 = OpShiftLeftLogical %5 %29 %33
%67 = OpIMul %5 %66 %33
%68 = OpAccessChain %34 %18 %28 %67
OpStore %68 %63
%70 = OpIAdd %5 %67 %31
%69 = OpAccessChain %34 %18 %28 %70
OpStore %69 %64
%72 = OpIAdd %5 %67 %42
%71 = OpAccessChain %34 %18 %28 %72
OpStore %71 %65
%73 = OpISub %6 %46 %60
%74 = OpISub %6 %47 %61
%75 = OpISub %6 %48 %62
%76 = OpBitwiseOr %5 %66 %31
%77 = OpIMul %5 %76 %33
%78 = OpAccessChain %34 %18 %28 %77
OpStore %78 %73
%80 = OpIAdd %5 %77 %31
%79 = OpAccessChain %34 %18 %28 %80
OpStore %79 %74
%82 = OpIAdd %5 %77 %42
%81 = OpAccessChain %34 %18 %28 %82
OpStore %81 %75
%83 = OpIMul %6 %60 %46
%84 = OpIMul %6 %61 %47
%85 = OpIMul %6 %62 %48
%86 = OpBitwiseOr %5 %66 %42
%87 = OpIMul %5 %86 %33
%88 = OpAccessChain %34 %18 %28 %87
OpStore %88 %83
%90 = OpIAdd %5 %87 %31
%89 = OpAccessChain %34 %18 %28 %90
OpStore %89 %84
%92 = OpIAdd %5 %87 %42
%91 = OpAccessChain %34 %18 %28 %92
OpStore %91 %85
%93 = OpUDiv %6 %46 %60
%94 = OpUDiv %6 %47 %61
%95 = OpUDiv %6 %48 %62
%96 = OpBitwiseOr %5 %66 %33
%97 = OpIMul %5 %96 %33
%98 = OpAccessChain %34 %18 %28 %97
OpStore %98 %93
%100 = OpIAdd %5 %97 %31
%99 = OpAccessChain %34 %18 %28 %100
OpStore %99 %94
%102 = OpIAdd %5 %97 %42
%101 = OpAccessChain %34 %18 %28 %102
OpStore %101 %95
%103 = OpBitwiseAnd %6 %60 %104
%105 = OpBitwiseAnd %6 %61 %104
%106 = OpBitwiseAnd %6 %62 %104
%107 = OpShiftLeftLogical %6 %46 %103
%108 = OpShiftLeftLogical %6 %47 %105
%109 = OpShiftLeftLogical %6 %48 %106
%110 = OpBitwiseOr %5 %66 %111
%112 = OpIMul %5 %110 %33
%113 = OpAccessChain %34 %18 %28 %112
OpStore %113 %107
%115 = OpIAdd %5 %112 %31
%114 = OpAccessChain %34 %18 %28 %115
OpStore %114 %108
%117 = OpIAdd %5 %112 %42
%116 = OpAccessChain %34 %18 %28 %117
OpStore %116 %109
%118 = OpShiftRightLogical %6 %46 %103
%119 = OpShiftRightLogical %6 %47 %105
%120 = OpShiftRightLogical %6 %48 %106
%121 = OpBitwiseOr %5 %66 %122
%123 = OpIMul %5 %121 %33
%124 = OpAccessChain %34 %18 %28 %123
OpStore %124 %118
%126 = OpIAdd %5 %123 %31
%125 = OpAccessChain %34 %18 %28 %126
OpStore %125 %119
%128 = OpIAdd %5 %123 %42
%127 = OpAccessChain %34 %18 %28 %128
OpStore %127 %120
%129 = OpShiftRightArithmetic %6 %46 %103
%130 = OpShiftRightArithmetic %6 %47 %105
%131 = OpShiftRightArithmetic %6 %48 %106
%132 = OpBitwiseOr %5 %66 %133
%134 = OpIMul %5 %132 %33
%135 = OpAccessChain %34 %18 %28 %134
OpStore %135 %129
%137 = OpIAdd %5 %134 %31
%136 = OpAccessChain %34 %18 %28 %137
OpStore %136 %130
%139 = OpIAdd %5 %134 %42
%138 = OpAccessChain %34 %18 %28 %139
OpStore %138 %131
%140 = OpBitwiseAnd %6 %60 %46
%141 = OpBitwiseAnd %6 %61 %47
%142 = OpBitwiseAnd %6 %62 %48
%143 = OpBitwiseOr %5 %66 %144
%145 = OpIMul %5 %143 %33
%146 = OpAccessChain %34 %18 %28 %145
OpStore %146 %140
%148 = OpIAdd %5 %145 %31
%147 = OpAccessChain %34 %18 %28 %148
OpStore %147 %141
%150 = OpIAdd %5 %145 %42
%149 = OpAccessChain %34 %18 %28 %150
OpStore %149 %142
%151 = OpIMul %5 %29 %152
%153 = OpIMul %5 %29 %33
%154 = OpAccessChain %34 %14 %28 %153
%155 = OpLoad %6 %154
%157 = OpIAdd %5 %153 %31
%156 = OpAccessChain %34 %14 %28 %157
%158 = OpLoad %6 %156
%160 = OpCompositeConstruct %159 %155 %158
%161 = OpCompositeExtract %6 %160 0
%162 = OpCompositeExtract %6 %160 1
%163 = OpAccessChain %34 %22 %28 %29
OpStore %163 %161
%165 = OpIAdd %5 %29 %31
%164 = OpAccessChain %34 %22 %28 %165
OpStore %164 %162
%167 = OpIAdd %5 %29 %42
%166 = OpAccessChain %34 %22 %28 %167
OpStore %166 %48
OpReturn
OpFunctionEnd
#endif
