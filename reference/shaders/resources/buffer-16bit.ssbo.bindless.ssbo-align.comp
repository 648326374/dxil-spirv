#version 460
#extension GL_EXT_shader_explicit_arithmetic_types_int16 : require
#extension GL_EXT_shader_16bit_storage : require
#if defined(GL_AMD_gpu_shader_half_float)
#extension GL_AMD_gpu_shader_half_float : require
#elif defined(GL_EXT_shader_explicit_arithmetic_types_float16)
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : require
#else
#error No extension available for FP16.
#endif
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_KHR_shader_subgroup_ballot : require
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(set = 15, binding = 0, std430) restrict readonly buffer SSBO_Offsets
{
    uvec2 _m0[];
} _13;

layout(set = 4, binding = 0, std430) buffer SSBO
{
    uint16_t _m0[];
} _19[];

layout(set = 4, binding = 0, std430) buffer _21_24
{
    uint16_t _m0[];
} _24[];

layout(set = 4, binding = 0, std430) buffer _26_29
{
    uint _m0[];
} _29[];

layout(set = 4, binding = 0, std430) writeonly buffer _31_34
{
    uint16_t _m0[];
} _34[];

layout(set = 4, binding = 0, std430) buffer _36_39
{
    uint16_t _m0[];
} _39[];

layout(push_constant, std430) uniform RootConstants
{
    uint _m0;
    uint _m1;
    uint _m2;
    uint _m3;
    uint _m4;
    uint _m5;
    uint _m6;
    uint _m7;
} registers;

void main()
{
    uint _46 = registers._m4 + 6u;
    uvec2 _54 = _13._m0[subgroupBroadcastFirst(_46)] >> uvec2(1u);
    uint _60 = registers._m4 + 5u;
    uvec2 _65 = _13._m0[subgroupBroadcastFirst(_60)] >> uvec2(1u);
    uint _70 = registers._m4 + 4u;
    uint _75 = registers._m4 + 4u;
    uint _76 = subgroupBroadcastFirst(_75);
    uint _83 = registers._m4 + 3u;
    uvec2 _87 = _13._m0[subgroupBroadcastFirst(_83)] >> uvec2(1u);
    uint _91 = registers._m4 + 2u;
    uvec2 _96 = _13._m0[subgroupBroadcastFirst(_91)] >> uvec2(1u);
    uint _100 = registers._m4 + 1u;
    uvec2 _104 = _13._m0[subgroupBroadcastFirst(_100)] >> uvec2(1u);
    uvec2 _111 = _13._m0[subgroupBroadcastFirst(registers._m4)] >> uvec2(1u);
    _19[registers._m4]._m0[(gl_GlobalInvocationID.x < _111.y) ? (gl_GlobalInvocationID.x + _111.x) : 2147483644u] = float16BitsToUint16(uint16BitsToFloat16(_19[registers._m4]._m0[(gl_GlobalInvocationID.x < _111.y) ? (gl_GlobalInvocationID.x + _111.x) : 2147483644u]) + float16_t(1.0));
    uint _139 = gl_GlobalInvocationID.x * 2u;
    uint _144 = (_139 < _104.y) ? (_139 + _104.x) : 2147483644u;
    uint16_t _146 = _19[_100]._m0[_144];
    uint16_t _149 = _19[_100]._m0[_144 + 1u];
    u16vec2 _151 = u16vec2(_146, _149);
    uint _157 = gl_GlobalInvocationID.x * 2u;
    uint _162 = (_157 < _104.y) ? (_157 + _104.x) : 2147483644u;
    _19[_100]._m0[_162] = _151.x + 2us;
    _19[_100]._m0[_162 + 1u] = _151.y + 2us;
    uint _166 = gl_GlobalInvocationID.x * 3u;
    uint _171 = (_166 < _96.y) ? (_166 + _96.x) : 2147483644u;
    uint16_t _173 = _19[_91]._m0[_171];
    uint16_t _176 = _19[_91]._m0[_171 + 1u];
    uint16_t _179 = _19[_91]._m0[_171 + 2u];
    f16vec3 _183 = uint16BitsToFloat16(u16vec3(_173, _176, _179));
    uint _191 = gl_GlobalInvocationID.x * 3u;
    uint _196 = (_191 < _96.y) ? (_191 + _96.x) : 2147483644u;
    _19[_91]._m0[_196] = float16BitsToUint16(_183.x + float16_t(3.0));
    _19[_91]._m0[_196 + 1u] = float16BitsToUint16(_183.y + float16_t(3.0));
    _19[_91]._m0[_196 + 2u] = float16BitsToUint16(_183.z + float16_t(3.0));
    uint _205 = gl_GlobalInvocationID.x * 4u;
    uint _210 = (_205 < _87.y) ? (_205 + _87.x) : 2147483644u;
    uint16_t _212 = _19[_83]._m0[_210];
    uint16_t _215 = _19[_83]._m0[_210 + 1u];
    uint16_t _218 = _19[_83]._m0[_210 + 2u];
    uint16_t _221 = _19[_83]._m0[_210 + 3u];
    u16vec4 _223 = u16vec4(_212, _215, _218, _221);
    uint _233 = gl_GlobalInvocationID.x * 4u;
    uint _238 = (_233 < _87.y) ? (_233 + _87.x) : 2147483644u;
    _19[_83]._m0[_238] = _223.x + 4us;
    _19[_83]._m0[_238 + 1u] = _223.y + 4us;
    _19[_83]._m0[_238 + 2u] = _223.z + 4us;
    _19[_83]._m0[_238 + 3u] = _223.w + 4us;
    uvec2 _247 = _13._m0[_76] >> uvec2(1u);
    uint16_t _254 = _24[_70]._m0[(gl_GlobalInvocationID.x < _247.y) ? (gl_GlobalInvocationID.x + _247.x) : 2147483644u];
    float _257 = float(uint16BitsToFloat16(_254));
    uint _259 = gl_GlobalInvocationID.x * 2u;
    uvec2 _260 = _13._m0[_76] >> uvec2(1u);
    uint _265 = (_259 < _260.y) ? (_259 + _260.x) : 2147483644u;
    uint16_t _267 = _24[_70]._m0[_265];
    uint16_t _270 = _24[_70]._m0[_265 + 1u];
    f16vec2 _273 = uint16BitsToFloat16(u16vec2(_267, _270));
    float _277 = float(_273.y);
    float _278 = float(_273.x) + _257;
    uint _281 = gl_GlobalInvocationID.x * 3u;
    uvec2 _282 = _13._m0[_76] >> uvec2(1u);
    uint _287 = (_281 < _282.y) ? (_281 + _282.x) : 2147483644u;
    uint16_t _289 = _24[_70]._m0[_287];
    uint16_t _292 = _24[_70]._m0[_287 + 1u];
    uint16_t _295 = _24[_70]._m0[_287 + 2u];
    f16vec3 _297 = uint16BitsToFloat16(u16vec3(_289, _292, _295));
    float _301 = float(_297.x);
    uint _308 = gl_GlobalInvocationID.x * 4u;
    uvec2 _309 = _13._m0[_76] >> uvec2(1u);
    uint _314 = (_308 < _309.y) ? (_308 + _309.x) : 2147483644u;
    uint16_t _316 = _24[_70]._m0[_314];
    uint16_t _319 = _24[_70]._m0[_314 + 1u];
    uint16_t _322 = _24[_70]._m0[_314 + 2u];
    uint16_t _325 = _24[_70]._m0[_314 + 3u];
    f16vec4 _328 = uint16BitsToFloat16(u16vec4(_316, _319, _322, _325));
    uvec2 _340 = _13._m0[_76] >> uvec2(1u);
    uint16_t _347 = _24[_70]._m0[(gl_GlobalInvocationID.x < _340.y) ? (gl_GlobalInvocationID.x + _340.x) : 2147483644u];
    float _348 = float(_347);
    uint _352 = gl_GlobalInvocationID.x * 2u;
    uvec2 _353 = _13._m0[_76] >> uvec2(1u);
    uint _358 = (_352 < _353.y) ? (_352 + _353.x) : 2147483644u;
    uint16_t _360 = _24[_70]._m0[_358];
    uint16_t _363 = _24[_70]._m0[_358 + 1u];
    u16vec2 _364 = u16vec2(_360, _363);
    float _367 = float(_364.x);
    float _368 = float(_364.y);
    uint _372 = gl_GlobalInvocationID.x * 3u;
    uvec2 _373 = _13._m0[_76] >> uvec2(1u);
    uint _378 = (_372 < _373.y) ? (_372 + _373.x) : 2147483644u;
    uint16_t _380 = _24[_70]._m0[_378];
    uint16_t _383 = _24[_70]._m0[_378 + 1u];
    uint16_t _386 = _24[_70]._m0[_378 + 2u];
    u16vec3 _387 = u16vec3(_380, _383, _386);
    float _391 = float(_387.x);
    uint _397 = gl_GlobalInvocationID.x * 4u;
    uvec2 _398 = _13._m0[_76] >> uvec2(1u);
    uint _403 = (_397 < _398.y) ? (_397 + _398.x) : 2147483644u;
    uint16_t _405 = _24[_70]._m0[_403];
    uint16_t _408 = _24[_70]._m0[_403 + 1u];
    uint16_t _411 = _24[_70]._m0[_403 + 2u];
    uint16_t _414 = _24[_70]._m0[_403 + 3u];
    u16vec4 _415 = u16vec4(_405, _408, _411, _414);
    _34[_60]._m0[(gl_GlobalInvocationID.x < _65.y) ? (gl_GlobalInvocationID.x + _65.x) : 2147483644u] = float16BitsToUint16(float16_t(1.0));
    uint _434 = gl_GlobalInvocationID.x * 2u;
    uint _439 = (_434 < _65.y) ? (_434 + _65.x) : 2147483644u;
    _34[_60]._m0[_439] = float16BitsToUint16(float16_t(2.0));
    _34[_60]._m0[_439 + 1u] = float16BitsToUint16(float16_t(4.0));
    uint _447 = gl_GlobalInvocationID.x * 3u;
    uint _452 = (_447 < _65.y) ? (_447 + _65.x) : 2147483644u;
    _34[_60]._m0[_452] = float16BitsToUint16(float16_t(4.0));
    _34[_60]._m0[_452 + 1u] = float16BitsToUint16(float16_t(5.0));
    _34[_60]._m0[_452 + 2u] = float16BitsToUint16(float16_t(6.0));
    uint _463 = gl_GlobalInvocationID.x * 4u;
    uint _468 = (_463 < _65.y) ? (_463 + _65.x) : 2147483644u;
    _34[_60]._m0[_468] = float16BitsToUint16(float16_t(7.0));
    _34[_60]._m0[_468 + 1u] = float16BitsToUint16(float16_t(8.0));
    _34[_60]._m0[_468 + 2u] = float16BitsToUint16(float16_t(9.0));
    _34[_60]._m0[_468 + 3u] = float16BitsToUint16(float16_t(10.0));
    _34[_46]._m0[(gl_GlobalInvocationID.x < _54.y) ? (gl_GlobalInvocationID.x + _54.x) : 2147483644u] = 1us;
    uint _491 = gl_GlobalInvocationID.x * 2u;
    uint _496 = (_491 < _54.y) ? (_491 + _54.x) : 2147483644u;
    _34[_46]._m0[_496] = 2us;
    _34[_46]._m0[_496 + 1u] = 4us;
    uint _500 = gl_GlobalInvocationID.x * 3u;
    uint _505 = (_500 < _54.y) ? (_500 + _54.x) : 2147483644u;
    _34[_46]._m0[_505] = 4us;
    _34[_46]._m0[_505 + 1u] = 5us;
    _34[_46]._m0[_505 + 2u] = 6us;
    uint _513 = gl_GlobalInvocationID.x * 4u;
    uint _518 = (_513 < _54.y) ? (_513 + _54.x) : 2147483644u;
    _34[_46]._m0[_518] = 7us;
    _34[_46]._m0[_518 + 1u] = 8us;
    _34[_46]._m0[_518 + 2u] = 9us;
    _34[_46]._m0[_518 + 3u] = 10us;
    uvec2 _530 = _13._m0[_76] >> uvec2(2u);
    uint _540 = _29[_75]._m0[(gl_GlobalInvocationID.x < _530.y) ? (gl_GlobalInvocationID.x + _530.x) : 1073741820u];
    float _541 = uintBitsToFloat(_540);
    uint _550 = registers._m4 + (gl_GlobalInvocationID.x + 0u);
    uvec2 _553 = _13._m0[_550] >> uvec2(1u);
    uint _554 = gl_GlobalInvocationID.x * 2u;
    uint16_t _561 = _39[nonuniformEXT(_550)]._m0[(_554 < _553.y) ? (_554 + _553.x) : 2147483644u];
    float _563 = float(uint16BitsToFloat16(_561));
    float _564 = (((((((_278 + _301) + float(_328.x)) + _348) + _367) + _391) + float(_415.x)) + _541) + _563;
    float _565 = (((((((_278 + float(_297.y)) + float(_328.y)) + _348) + _367) + float(_387.y)) + float(_415.y)) + _541) + _563;
    uint _569 = gl_GlobalInvocationID.x * 4u;
    uint _574 = (_569 < _553.y) ? (_569 + _553.x) : 2147483644u;
    _39[nonuniformEXT(_550)]._m0[_574] = float16BitsToUint16(float16_t(_564));
    _39[nonuniformEXT(_550)]._m0[_574 + 1u] = float16BitsToUint16(float16_t(_565));
    uint _610 = gl_GlobalInvocationID.x * 4u;
    uvec2 _611 = _13._m0[_76] >> uvec2(2u);
    uint _616 = (_610 < _611.y) ? (_610 + _611.x) : 1073741820u;
    _29[_75]._m0[_616] = uint((float(_111.y / 1u) + _564) + float(_65.y * 2u));
    _29[_75]._m0[_616 + 1u] = uint(_565 + 2.0);
    _29[_75]._m0[_616 + 2u] = uint((((((((((_277 + _257) + float(_297.z)) + float(_328.z)) + _348) + _368) + float(_387.z)) + float(_415.z)) + _541) + _563) + float(_87.y / 4u));
    _29[_75]._m0[_616 + 3u] = uint((((((((((_257 + 8.0) + _277) + _301) + float(_328.w)) + _348) + _368) + _391) + float(_415.w)) + _541) + _563);
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 626
; Schema: 0
OpCapability Shader
OpCapability Float16
OpCapability Int16
OpCapability StorageBufferArrayDynamicIndexing
OpCapability ImageQuery
OpCapability GroupNonUniformBallot
OpCapability RuntimeDescriptorArray
OpCapability StorageBufferArrayNonUniformIndexing
OpCapability PhysicalStorageBufferAddresses
OpExtension "SPV_EXT_descriptor_indexing"
OpExtension "SPV_KHR_physical_storage_buffer"
OpMemoryModel PhysicalStorageBuffer64 GLSL450
OpEntryPoint GLCompute %3 "main" %114
OpExecutionMode %3 LocalSize 64 1 1
OpName %3 "main"
OpName %6 "RootConstants"
OpName %8 "registers"
OpName %11 "SSBO_Offsets"
OpName %16 "SSBO"
OpName %21 "SSBO"
OpName %26 "SSBO"
OpName %31 "SSBO"
OpName %36 "SSBO"
OpDecorate %6 Block
OpMemberDecorate %6 0 Offset 0
OpMemberDecorate %6 1 Offset 4
OpMemberDecorate %6 2 Offset 8
OpMemberDecorate %6 3 Offset 12
OpMemberDecorate %6 4 Offset 16
OpMemberDecorate %6 5 Offset 20
OpMemberDecorate %6 6 Offset 24
OpMemberDecorate %6 7 Offset 28
OpDecorate %10 ArrayStride 8
OpMemberDecorate %11 0 Offset 0
OpDecorate %11 Block
OpDecorate %13 DescriptorSet 15
OpDecorate %13 Binding 0
OpDecorate %13 NonWritable
OpDecorate %13 Restrict
OpDecorate %15 ArrayStride 2
OpMemberDecorate %16 0 Offset 0
OpDecorate %16 Block
OpDecorate %19 DescriptorSet 4
OpDecorate %19 Binding 0
OpDecorate %20 ArrayStride 2
OpMemberDecorate %21 0 Offset 0
OpDecorate %21 Block
OpDecorate %24 DescriptorSet 4
OpDecorate %24 Binding 0
OpDecorate %24 Aliased
OpDecorate %25 ArrayStride 4
OpMemberDecorate %26 0 Offset 0
OpDecorate %26 Block
OpDecorate %29 DescriptorSet 4
OpDecorate %29 Binding 0
OpDecorate %29 Aliased
OpDecorate %30 ArrayStride 2
OpMemberDecorate %31 0 Offset 0
OpDecorate %31 Block
OpDecorate %34 DescriptorSet 4
OpDecorate %34 Binding 0
OpDecorate %34 NonReadable
OpDecorate %35 ArrayStride 2
OpMemberDecorate %36 0 Offset 0
OpDecorate %36 Block
OpDecorate %39 DescriptorSet 4
OpDecorate %39 Binding 0
OpDecorate %114 BuiltIn GlobalInvocationId
OpDecorate %550 NonUniform
OpDecorate %547 NonUniform
OpDecorate %560 NonUniform
OpDecorate %577 NonUniform
OpDecorate %578 NonUniform
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeStruct %5 %5 %5 %5 %5 %5 %5 %5
%7 = OpTypePointer PushConstant %6
%8 = OpVariable %7 PushConstant
%9 = OpTypeVector %5 2
%10 = OpTypeRuntimeArray %9
%11 = OpTypeStruct %10
%12 = OpTypePointer StorageBuffer %11
%13 = OpVariable %12 StorageBuffer
%14 = OpTypeInt 16 0
%15 = OpTypeRuntimeArray %14
%16 = OpTypeStruct %15
%17 = OpTypeRuntimeArray %16
%18 = OpTypePointer StorageBuffer %17
%19 = OpVariable %18 StorageBuffer
%20 = OpTypeRuntimeArray %14
%21 = OpTypeStruct %20
%22 = OpTypeRuntimeArray %21
%23 = OpTypePointer StorageBuffer %22
%24 = OpVariable %23 StorageBuffer
%25 = OpTypeRuntimeArray %5
%26 = OpTypeStruct %25
%27 = OpTypeRuntimeArray %26
%28 = OpTypePointer StorageBuffer %27
%29 = OpVariable %28 StorageBuffer
%30 = OpTypeRuntimeArray %14
%31 = OpTypeStruct %30
%32 = OpTypeRuntimeArray %31
%33 = OpTypePointer StorageBuffer %32
%34 = OpVariable %33 StorageBuffer
%35 = OpTypeRuntimeArray %14
%36 = OpTypeStruct %35
%37 = OpTypeRuntimeArray %36
%38 = OpTypePointer StorageBuffer %37
%39 = OpVariable %38 StorageBuffer
%40 = OpTypePointer StorageBuffer %31
%42 = OpTypePointer PushConstant %5
%44 = OpConstant %5 4
%47 = OpConstant %5 6
%49 = OpConstant %5 3
%50 = OpTypePointer StorageBuffer %9
%52 = OpConstant %5 0
%55 = OpConstant %5 1
%56 = OpConstantComposite %9 %55 %55
%61 = OpConstant %5 5
%66 = OpTypePointer StorageBuffer %21
%71 = OpTypePointer StorageBuffer %26
%79 = OpTypePointer StorageBuffer %16
%92 = OpConstant %5 2
%112 = OpTypeVector %5 3
%113 = OpTypePointer Input %112
%114 = OpVariable %113 Input
%115 = OpTypePointer Input %5
%121 = OpTypeBool
%124 = OpConstant %5 2147483644
%125 = OpTypePointer StorageBuffer %14
%128 = OpTypeFloat 16
%131 = OpConstant %128 0x1p+0
%150 = OpTypeVector %14 2
%155 = OpConstant %14 2
%180 = OpTypeVector %14 3
%182 = OpTypeVector %128 3
%188 = OpConstant %128 0x1.8p+1
%222 = OpTypeVector %14 4
%229 = OpConstant %14 4
%256 = OpTypeFloat 32
%272 = OpTypeVector %128 2
%327 = OpTypeVector %128 4
%440 = OpConstant %128 0x1p+1
%442 = OpConstant %128 0x1p+2
%454 = OpConstant %128 0x1.4p+2
%456 = OpConstant %128 0x1.8p+2
%469 = OpConstant %128 0x1.cp+2
%471 = OpConstant %128 0x1p+3
%473 = OpConstant %128 0x1.2p+3
%475 = OpConstant %128 0x1.4p+3
%489 = OpConstant %14 1
%506 = OpConstant %14 5
%507 = OpConstant %14 6
%519 = OpConstant %14 7
%520 = OpConstant %14 8
%521 = OpConstant %14 9
%522 = OpConstant %14 10
%531 = OpConstantComposite %9 %92 %92
%537 = OpConstant %5 1073741820
%538 = OpTypePointer StorageBuffer %5
%546 = OpTypePointer StorageBuffer %36
%585 = OpConstant %256 2
%591 = OpConstant %256 8
%3 = OpFunction %1 None %2
%4 = OpLabel
OpBranch %624
%624 = OpLabel
%43 = OpAccessChain %42 %8 %44
%45 = OpLoad %5 %43
%46 = OpIAdd %5 %45 %47
%41 = OpAccessChain %40 %34 %46
%48 = OpGroupNonUniformBroadcastFirst %5 %49 %46
%51 = OpAccessChain %50 %13 %52 %48
%53 = OpLoad %9 %51
%54 = OpShiftRightLogical %9 %53 %56
%58 = OpAccessChain %42 %8 %44
%59 = OpLoad %5 %58
%60 = OpIAdd %5 %59 %61
%57 = OpAccessChain %40 %34 %60
%62 = OpGroupNonUniformBroadcastFirst %5 %49 %60
%63 = OpAccessChain %50 %13 %52 %62
%64 = OpLoad %9 %63
%65 = OpShiftRightLogical %9 %64 %56
%68 = OpAccessChain %42 %8 %44
%69 = OpLoad %5 %68
%70 = OpIAdd %5 %69 %44
%67 = OpAccessChain %66 %24 %70
%73 = OpAccessChain %42 %8 %44
%74 = OpLoad %5 %73
%75 = OpIAdd %5 %74 %44
%72 = OpAccessChain %71 %29 %75
%76 = OpGroupNonUniformBroadcastFirst %5 %49 %75
%77 = OpAccessChain %50 %13 %52 %76
%78 = OpLoad %9 %77
%81 = OpAccessChain %42 %8 %44
%82 = OpLoad %5 %81
%83 = OpIAdd %5 %82 %49
%80 = OpAccessChain %79 %19 %83
%84 = OpGroupNonUniformBroadcastFirst %5 %49 %83
%85 = OpAccessChain %50 %13 %52 %84
%86 = OpLoad %9 %85
%87 = OpShiftRightLogical %9 %86 %56
%89 = OpAccessChain %42 %8 %44
%90 = OpLoad %5 %89
%91 = OpIAdd %5 %90 %92
%88 = OpAccessChain %79 %19 %91
%93 = OpGroupNonUniformBroadcastFirst %5 %49 %91
%94 = OpAccessChain %50 %13 %52 %93
%95 = OpLoad %9 %94
%96 = OpShiftRightLogical %9 %95 %56
%98 = OpAccessChain %42 %8 %44
%99 = OpLoad %5 %98
%100 = OpIAdd %5 %99 %55
%97 = OpAccessChain %79 %19 %100
%101 = OpGroupNonUniformBroadcastFirst %5 %49 %100
%102 = OpAccessChain %50 %13 %52 %101
%103 = OpLoad %9 %102
%104 = OpShiftRightLogical %9 %103 %56
%106 = OpAccessChain %42 %8 %44
%107 = OpLoad %5 %106
%105 = OpAccessChain %79 %19 %107
%108 = OpGroupNonUniformBroadcastFirst %5 %49 %107
%109 = OpAccessChain %50 %13 %52 %108
%110 = OpLoad %9 %109
%111 = OpShiftRightLogical %9 %110 %56
%116 = OpAccessChain %115 %114 %52
%117 = OpLoad %5 %116
%118 = OpCompositeExtract %5 %111 0
%119 = OpCompositeExtract %5 %111 1
%120 = OpIAdd %5 %117 %118
%122 = OpULessThan %121 %117 %119
%123 = OpSelect %5 %122 %120 %124
%126 = OpAccessChain %125 %105 %52 %123
%127 = OpLoad %14 %126
%129 = OpBitcast %128 %127
%130 = OpFAdd %128 %129 %131
%132 = OpCompositeExtract %5 %111 0
%133 = OpCompositeExtract %5 %111 1
%134 = OpIAdd %5 %117 %132
%135 = OpULessThan %121 %117 %133
%136 = OpSelect %5 %135 %134 %124
%137 = OpBitcast %14 %130
%138 = OpAccessChain %125 %105 %52 %136
OpStore %138 %137
%139 = OpIMul %5 %117 %92
%140 = OpCompositeExtract %5 %104 0
%141 = OpCompositeExtract %5 %104 1
%142 = OpIAdd %5 %139 %140
%143 = OpULessThan %121 %139 %141
%144 = OpSelect %5 %143 %142 %124
%145 = OpAccessChain %125 %97 %52 %144
%146 = OpLoad %14 %145
%148 = OpIAdd %5 %144 %55
%147 = OpAccessChain %125 %97 %52 %148
%149 = OpLoad %14 %147
%151 = OpCompositeConstruct %150 %146 %149
%152 = OpCompositeExtract %14 %151 0
%153 = OpCompositeExtract %14 %151 1
%154 = OpIAdd %14 %152 %155
%156 = OpIAdd %14 %153 %155
%157 = OpIMul %5 %117 %92
%158 = OpCompositeExtract %5 %104 0
%159 = OpCompositeExtract %5 %104 1
%160 = OpIAdd %5 %157 %158
%161 = OpULessThan %121 %157 %159
%162 = OpSelect %5 %161 %160 %124
%163 = OpAccessChain %125 %97 %52 %162
OpStore %163 %154
%165 = OpIAdd %5 %162 %55
%164 = OpAccessChain %125 %97 %52 %165
OpStore %164 %156
%166 = OpIMul %5 %117 %49
%167 = OpCompositeExtract %5 %96 0
%168 = OpCompositeExtract %5 %96 1
%169 = OpIAdd %5 %166 %167
%170 = OpULessThan %121 %166 %168
%171 = OpSelect %5 %170 %169 %124
%172 = OpAccessChain %125 %88 %52 %171
%173 = OpLoad %14 %172
%175 = OpIAdd %5 %171 %55
%174 = OpAccessChain %125 %88 %52 %175
%176 = OpLoad %14 %174
%178 = OpIAdd %5 %171 %92
%177 = OpAccessChain %125 %88 %52 %178
%179 = OpLoad %14 %177
%181 = OpCompositeConstruct %180 %173 %176 %179
%183 = OpBitcast %182 %181
%184 = OpCompositeExtract %128 %183 0
%185 = OpCompositeExtract %128 %183 1
%186 = OpCompositeExtract %128 %183 2
%187 = OpFAdd %128 %184 %188
%189 = OpFAdd %128 %185 %188
%190 = OpFAdd %128 %186 %188
%191 = OpIMul %5 %117 %49
%192 = OpCompositeExtract %5 %96 0
%193 = OpCompositeExtract %5 %96 1
%194 = OpIAdd %5 %191 %192
%195 = OpULessThan %121 %191 %193
%196 = OpSelect %5 %195 %194 %124
%197 = OpBitcast %14 %187
%198 = OpBitcast %14 %189
%199 = OpBitcast %14 %190
%200 = OpAccessChain %125 %88 %52 %196
OpStore %200 %197
%202 = OpIAdd %5 %196 %55
%201 = OpAccessChain %125 %88 %52 %202
OpStore %201 %198
%204 = OpIAdd %5 %196 %92
%203 = OpAccessChain %125 %88 %52 %204
OpStore %203 %199
%205 = OpIMul %5 %117 %44
%206 = OpCompositeExtract %5 %87 0
%207 = OpCompositeExtract %5 %87 1
%208 = OpIAdd %5 %205 %206
%209 = OpULessThan %121 %205 %207
%210 = OpSelect %5 %209 %208 %124
%211 = OpAccessChain %125 %80 %52 %210
%212 = OpLoad %14 %211
%214 = OpIAdd %5 %210 %55
%213 = OpAccessChain %125 %80 %52 %214
%215 = OpLoad %14 %213
%217 = OpIAdd %5 %210 %92
%216 = OpAccessChain %125 %80 %52 %217
%218 = OpLoad %14 %216
%220 = OpIAdd %5 %210 %49
%219 = OpAccessChain %125 %80 %52 %220
%221 = OpLoad %14 %219
%223 = OpCompositeConstruct %222 %212 %215 %218 %221
%224 = OpCompositeExtract %14 %223 0
%225 = OpCompositeExtract %14 %223 1
%226 = OpCompositeExtract %14 %223 2
%227 = OpCompositeExtract %14 %223 3
%228 = OpIAdd %14 %224 %229
%230 = OpIAdd %14 %225 %229
%231 = OpIAdd %14 %226 %229
%232 = OpIAdd %14 %227 %229
%233 = OpIMul %5 %117 %44
%234 = OpCompositeExtract %5 %87 0
%235 = OpCompositeExtract %5 %87 1
%236 = OpIAdd %5 %233 %234
%237 = OpULessThan %121 %233 %235
%238 = OpSelect %5 %237 %236 %124
%239 = OpAccessChain %125 %80 %52 %238
OpStore %239 %228
%241 = OpIAdd %5 %238 %55
%240 = OpAccessChain %125 %80 %52 %241
OpStore %240 %230
%243 = OpIAdd %5 %238 %92
%242 = OpAccessChain %125 %80 %52 %243
OpStore %242 %231
%245 = OpIAdd %5 %238 %49
%244 = OpAccessChain %125 %80 %52 %245
OpStore %244 %232
%246 = OpShiftLeftLogical %5 %117 %55
%247 = OpShiftRightLogical %9 %78 %56
%248 = OpCompositeExtract %5 %247 0
%249 = OpCompositeExtract %5 %247 1
%250 = OpIAdd %5 %117 %248
%251 = OpULessThan %121 %117 %249
%252 = OpSelect %5 %251 %250 %124
%253 = OpAccessChain %125 %67 %52 %252
%254 = OpLoad %14 %253
%255 = OpBitcast %128 %254
%257 = OpFConvert %256 %255
%258 = OpShiftLeftLogical %5 %117 %92
%259 = OpIMul %5 %117 %92
%260 = OpShiftRightLogical %9 %78 %56
%261 = OpCompositeExtract %5 %260 0
%262 = OpCompositeExtract %5 %260 1
%263 = OpIAdd %5 %259 %261
%264 = OpULessThan %121 %259 %262
%265 = OpSelect %5 %264 %263 %124
%266 = OpAccessChain %125 %67 %52 %265
%267 = OpLoad %14 %266
%269 = OpIAdd %5 %265 %55
%268 = OpAccessChain %125 %67 %52 %269
%270 = OpLoad %14 %268
%271 = OpCompositeConstruct %150 %267 %270
%273 = OpBitcast %272 %271
%274 = OpCompositeExtract %128 %273 0
%275 = OpCompositeExtract %128 %273 1
%276 = OpFConvert %256 %274
%277 = OpFConvert %256 %275
%278 = OpFAdd %256 %276 %257
%279 = OpFAdd %256 %277 %257
%280 = OpIMul %5 %117 %47
%281 = OpIMul %5 %117 %49
%282 = OpShiftRightLogical %9 %78 %56
%283 = OpCompositeExtract %5 %282 0
%284 = OpCompositeExtract %5 %282 1
%285 = OpIAdd %5 %281 %283
%286 = OpULessThan %121 %281 %284
%287 = OpSelect %5 %286 %285 %124
%288 = OpAccessChain %125 %67 %52 %287
%289 = OpLoad %14 %288
%291 = OpIAdd %5 %287 %55
%290 = OpAccessChain %125 %67 %52 %291
%292 = OpLoad %14 %290
%294 = OpIAdd %5 %287 %92
%293 = OpAccessChain %125 %67 %52 %294
%295 = OpLoad %14 %293
%296 = OpCompositeConstruct %180 %289 %292 %295
%297 = OpBitcast %182 %296
%298 = OpCompositeExtract %128 %297 0
%299 = OpCompositeExtract %128 %297 1
%300 = OpCompositeExtract %128 %297 2
%301 = OpFConvert %256 %298
%302 = OpFConvert %256 %299
%303 = OpFConvert %256 %300
%304 = OpFAdd %256 %278 %301
%305 = OpFAdd %256 %278 %302
%306 = OpFAdd %256 %279 %303
%307 = OpShiftLeftLogical %5 %117 %49
%308 = OpIMul %5 %117 %44
%309 = OpShiftRightLogical %9 %78 %56
%310 = OpCompositeExtract %5 %309 0
%311 = OpCompositeExtract %5 %309 1
%312 = OpIAdd %5 %308 %310
%313 = OpULessThan %121 %308 %311
%314 = OpSelect %5 %313 %312 %124
%315 = OpAccessChain %125 %67 %52 %314
%316 = OpLoad %14 %315
%318 = OpIAdd %5 %314 %55
%317 = OpAccessChain %125 %67 %52 %318
%319 = OpLoad %14 %317
%321 = OpIAdd %5 %314 %92
%320 = OpAccessChain %125 %67 %52 %321
%322 = OpLoad %14 %320
%324 = OpIAdd %5 %314 %49
%323 = OpAccessChain %125 %67 %52 %324
%325 = OpLoad %14 %323
%326 = OpCompositeConstruct %222 %316 %319 %322 %325
%328 = OpBitcast %327 %326
%329 = OpCompositeExtract %128 %328 0
%330 = OpCompositeExtract %128 %328 1
%331 = OpCompositeExtract %128 %328 2
%332 = OpCompositeExtract %128 %328 3
%333 = OpFConvert %256 %329
%334 = OpFConvert %256 %330
%335 = OpFConvert %256 %331
%336 = OpFConvert %256 %332
%337 = OpFAdd %256 %304 %333
%338 = OpFAdd %256 %305 %334
%339 = OpFAdd %256 %306 %335
%340 = OpShiftRightLogical %9 %78 %56
%341 = OpCompositeExtract %5 %340 0
%342 = OpCompositeExtract %5 %340 1
%343 = OpIAdd %5 %117 %341
%344 = OpULessThan %121 %117 %342
%345 = OpSelect %5 %344 %343 %124
%346 = OpAccessChain %125 %67 %52 %345
%347 = OpLoad %14 %346
%348 = OpConvertUToF %256 %347
%349 = OpFAdd %256 %337 %348
%350 = OpFAdd %256 %338 %348
%351 = OpFAdd %256 %339 %348
%352 = OpIMul %5 %117 %92
%353 = OpShiftRightLogical %9 %78 %56
%354 = OpCompositeExtract %5 %353 0
%355 = OpCompositeExtract %5 %353 1
%356 = OpIAdd %5 %352 %354
%357 = OpULessThan %121 %352 %355
%358 = OpSelect %5 %357 %356 %124
%359 = OpAccessChain %125 %67 %52 %358
%360 = OpLoad %14 %359
%362 = OpIAdd %5 %358 %55
%361 = OpAccessChain %125 %67 %52 %362
%363 = OpLoad %14 %361
%364 = OpCompositeConstruct %150 %360 %363
%365 = OpCompositeExtract %14 %364 0
%366 = OpCompositeExtract %14 %364 1
%367 = OpConvertUToF %256 %365
%368 = OpConvertUToF %256 %366
%369 = OpFAdd %256 %349 %367
%370 = OpFAdd %256 %350 %367
%371 = OpFAdd %256 %351 %368
%372 = OpIMul %5 %117 %49
%373 = OpShiftRightLogical %9 %78 %56
%374 = OpCompositeExtract %5 %373 0
%375 = OpCompositeExtract %5 %373 1
%376 = OpIAdd %5 %372 %374
%377 = OpULessThan %121 %372 %375
%378 = OpSelect %5 %377 %376 %124
%379 = OpAccessChain %125 %67 %52 %378
%380 = OpLoad %14 %379
%382 = OpIAdd %5 %378 %55
%381 = OpAccessChain %125 %67 %52 %382
%383 = OpLoad %14 %381
%385 = OpIAdd %5 %378 %92
%384 = OpAccessChain %125 %67 %52 %385
%386 = OpLoad %14 %384
%387 = OpCompositeConstruct %180 %380 %383 %386
%388 = OpCompositeExtract %14 %387 0
%389 = OpCompositeExtract %14 %387 1
%390 = OpCompositeExtract %14 %387 2
%391 = OpConvertUToF %256 %388
%392 = OpConvertUToF %256 %389
%393 = OpConvertUToF %256 %390
%394 = OpFAdd %256 %369 %391
%395 = OpFAdd %256 %370 %392
%396 = OpFAdd %256 %371 %393
%397 = OpIMul %5 %117 %44
%398 = OpShiftRightLogical %9 %78 %56
%399 = OpCompositeExtract %5 %398 0
%400 = OpCompositeExtract %5 %398 1
%401 = OpIAdd %5 %397 %399
%402 = OpULessThan %121 %397 %400
%403 = OpSelect %5 %402 %401 %124
%404 = OpAccessChain %125 %67 %52 %403
%405 = OpLoad %14 %404
%407 = OpIAdd %5 %403 %55
%406 = OpAccessChain %125 %67 %52 %407
%408 = OpLoad %14 %406
%410 = OpIAdd %5 %403 %92
%409 = OpAccessChain %125 %67 %52 %410
%411 = OpLoad %14 %409
%413 = OpIAdd %5 %403 %49
%412 = OpAccessChain %125 %67 %52 %413
%414 = OpLoad %14 %412
%415 = OpCompositeConstruct %222 %405 %408 %411 %414
%416 = OpCompositeExtract %14 %415 0
%417 = OpCompositeExtract %14 %415 1
%418 = OpCompositeExtract %14 %415 2
%419 = OpCompositeExtract %14 %415 3
%420 = OpConvertUToF %256 %416
%421 = OpConvertUToF %256 %417
%422 = OpConvertUToF %256 %418
%423 = OpConvertUToF %256 %419
%424 = OpFAdd %256 %394 %420
%425 = OpFAdd %256 %395 %421
%426 = OpFAdd %256 %396 %422
%427 = OpCompositeExtract %5 %65 0
%428 = OpCompositeExtract %5 %65 1
%429 = OpIAdd %5 %117 %427
%430 = OpULessThan %121 %117 %428
%431 = OpSelect %5 %430 %429 %124
%432 = OpBitcast %14 %131
%433 = OpAccessChain %125 %57 %52 %431
OpStore %433 %432
%434 = OpIMul %5 %117 %92
%435 = OpCompositeExtract %5 %65 0
%436 = OpCompositeExtract %5 %65 1
%437 = OpIAdd %5 %434 %435
%438 = OpULessThan %121 %434 %436
%439 = OpSelect %5 %438 %437 %124
%441 = OpBitcast %14 %440
%443 = OpBitcast %14 %442
%444 = OpAccessChain %125 %57 %52 %439
OpStore %444 %441
%446 = OpIAdd %5 %439 %55
%445 = OpAccessChain %125 %57 %52 %446
OpStore %445 %443
%447 = OpIMul %5 %117 %49
%448 = OpCompositeExtract %5 %65 0
%449 = OpCompositeExtract %5 %65 1
%450 = OpIAdd %5 %447 %448
%451 = OpULessThan %121 %447 %449
%452 = OpSelect %5 %451 %450 %124
%453 = OpBitcast %14 %442
%455 = OpBitcast %14 %454
%457 = OpBitcast %14 %456
%458 = OpAccessChain %125 %57 %52 %452
OpStore %458 %453
%460 = OpIAdd %5 %452 %55
%459 = OpAccessChain %125 %57 %52 %460
OpStore %459 %455
%462 = OpIAdd %5 %452 %92
%461 = OpAccessChain %125 %57 %52 %462
OpStore %461 %457
%463 = OpIMul %5 %117 %44
%464 = OpCompositeExtract %5 %65 0
%465 = OpCompositeExtract %5 %65 1
%466 = OpIAdd %5 %463 %464
%467 = OpULessThan %121 %463 %465
%468 = OpSelect %5 %467 %466 %124
%470 = OpBitcast %14 %469
%472 = OpBitcast %14 %471
%474 = OpBitcast %14 %473
%476 = OpBitcast %14 %475
%477 = OpAccessChain %125 %57 %52 %468
OpStore %477 %470
%479 = OpIAdd %5 %468 %55
%478 = OpAccessChain %125 %57 %52 %479
OpStore %478 %472
%481 = OpIAdd %5 %468 %92
%480 = OpAccessChain %125 %57 %52 %481
OpStore %480 %474
%483 = OpIAdd %5 %468 %49
%482 = OpAccessChain %125 %57 %52 %483
OpStore %482 %476
%484 = OpCompositeExtract %5 %54 0
%485 = OpCompositeExtract %5 %54 1
%486 = OpIAdd %5 %117 %484
%487 = OpULessThan %121 %117 %485
%488 = OpSelect %5 %487 %486 %124
%490 = OpAccessChain %125 %41 %52 %488
OpStore %490 %489
%491 = OpIMul %5 %117 %92
%492 = OpCompositeExtract %5 %54 0
%493 = OpCompositeExtract %5 %54 1
%494 = OpIAdd %5 %491 %492
%495 = OpULessThan %121 %491 %493
%496 = OpSelect %5 %495 %494 %124
%497 = OpAccessChain %125 %41 %52 %496
OpStore %497 %155
%499 = OpIAdd %5 %496 %55
%498 = OpAccessChain %125 %41 %52 %499
OpStore %498 %229
%500 = OpIMul %5 %117 %49
%501 = OpCompositeExtract %5 %54 0
%502 = OpCompositeExtract %5 %54 1
%503 = OpIAdd %5 %500 %501
%504 = OpULessThan %121 %500 %502
%505 = OpSelect %5 %504 %503 %124
%508 = OpAccessChain %125 %41 %52 %505
OpStore %508 %229
%510 = OpIAdd %5 %505 %55
%509 = OpAccessChain %125 %41 %52 %510
OpStore %509 %506
%512 = OpIAdd %5 %505 %92
%511 = OpAccessChain %125 %41 %52 %512
OpStore %511 %507
%513 = OpIMul %5 %117 %44
%514 = OpCompositeExtract %5 %54 0
%515 = OpCompositeExtract %5 %54 1
%516 = OpIAdd %5 %513 %514
%517 = OpULessThan %121 %513 %515
%518 = OpSelect %5 %517 %516 %124
%523 = OpAccessChain %125 %41 %52 %518
OpStore %523 %519
%525 = OpIAdd %5 %518 %55
%524 = OpAccessChain %125 %41 %52 %525
OpStore %524 %520
%527 = OpIAdd %5 %518 %92
%526 = OpAccessChain %125 %41 %52 %527
OpStore %526 %521
%529 = OpIAdd %5 %518 %49
%528 = OpAccessChain %125 %41 %52 %529
OpStore %528 %522
%530 = OpShiftRightLogical %9 %78 %531
%532 = OpCompositeExtract %5 %530 0
%533 = OpCompositeExtract %5 %530 1
%534 = OpIAdd %5 %117 %532
%535 = OpULessThan %121 %117 %533
%536 = OpSelect %5 %535 %534 %537
%539 = OpAccessChain %538 %72 %52 %536
%540 = OpLoad %5 %539
%541 = OpBitcast %256 %540
%542 = OpFAdd %256 %424 %541
%543 = OpFAdd %256 %425 %541
%544 = OpFAdd %256 %426 %541
%545 = OpIAdd %5 %117 %52
%548 = OpAccessChain %42 %8 %44
%549 = OpLoad %5 %548
%550 = OpIAdd %5 %549 %545
%547 = OpAccessChain %546 %39 %550
%551 = OpAccessChain %50 %13 %52 %550
%552 = OpLoad %9 %551
%553 = OpShiftRightLogical %9 %552 %56
%554 = OpIMul %5 %117 %92
%555 = OpCompositeExtract %5 %553 0
%556 = OpCompositeExtract %5 %553 1
%557 = OpIAdd %5 %554 %555
%558 = OpULessThan %121 %554 %556
%559 = OpSelect %5 %558 %557 %124
%560 = OpAccessChain %125 %547 %52 %559
%561 = OpLoad %14 %560
%562 = OpBitcast %128 %561
%563 = OpFConvert %256 %562
%564 = OpFAdd %256 %542 %563
%565 = OpFAdd %256 %543 %563
%566 = OpFAdd %256 %544 %563
%567 = OpFConvert %128 %564
%568 = OpFConvert %128 %565
%569 = OpIMul %5 %117 %44
%570 = OpCompositeExtract %5 %553 0
%571 = OpCompositeExtract %5 %553 1
%572 = OpIAdd %5 %569 %570
%573 = OpULessThan %121 %569 %571
%574 = OpSelect %5 %573 %572 %124
%575 = OpBitcast %14 %567
%576 = OpBitcast %14 %568
%577 = OpAccessChain %125 %547 %52 %574
OpStore %577 %575
%579 = OpIAdd %5 %574 %55
%578 = OpAccessChain %125 %547 %52 %579
OpStore %578 %576
%580 = OpCompositeExtract %5 %111 1
%581 = OpUDiv %5 %580 %55
%582 = OpConvertUToF %256 %581
%583 = OpFAdd %256 %582 %564
%584 = OpFAdd %256 %565 %585
%586 = OpCompositeExtract %5 %87 1
%587 = OpUDiv %5 %586 %44
%588 = OpConvertUToF %256 %587
%589 = OpFAdd %256 %566 %588
%590 = OpFAdd %256 %257 %591
%592 = OpFAdd %256 %590 %277
%593 = OpFAdd %256 %592 %301
%594 = OpFAdd %256 %593 %336
%595 = OpFAdd %256 %594 %348
%596 = OpFAdd %256 %595 %368
%597 = OpFAdd %256 %596 %391
%598 = OpFAdd %256 %597 %423
%599 = OpFAdd %256 %598 %541
%600 = OpFAdd %256 %599 %563
%601 = OpCompositeExtract %5 %65 1
%602 = OpIMul %5 %601 %92
%603 = OpConvertUToF %256 %602
%604 = OpFAdd %256 %583 %603
%605 = OpConvertFToU %5 %604
%606 = OpConvertFToU %5 %584
%607 = OpConvertFToU %5 %589
%608 = OpConvertFToU %5 %600
%609 = OpShiftLeftLogical %5 %117 %44
%610 = OpIMul %5 %117 %44
%611 = OpShiftRightLogical %9 %78 %531
%612 = OpCompositeExtract %5 %611 0
%613 = OpCompositeExtract %5 %611 1
%614 = OpIAdd %5 %610 %612
%615 = OpULessThan %121 %610 %613
%616 = OpSelect %5 %615 %614 %537
%617 = OpAccessChain %538 %72 %52 %616
OpStore %617 %605
%619 = OpIAdd %5 %616 %55
%618 = OpAccessChain %538 %72 %52 %619
OpStore %618 %606
%621 = OpIAdd %5 %616 %92
%620 = OpAccessChain %538 %72 %52 %621
OpStore %620 %607
%623 = OpIAdd %5 %616 %49
%622 = OpAccessChain %538 %72 %52 %623
OpStore %622 %608
OpReturn
OpFunctionEnd
#endif
