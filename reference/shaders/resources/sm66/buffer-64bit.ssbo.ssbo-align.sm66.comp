#version 460
#extension GL_ARB_gpu_shader_int64 : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_KHR_shader_subgroup_ballot : require
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

layout(set = 15, binding = 0, std430) restrict readonly buffer SSBO_Offsets
{
    uvec2 _m0[];
} _10;

layout(set = 0, binding = 0, std430) writeonly buffer SSBO
{
    uint64_t _m0[];
} _16[];

layout(set = 0, binding = 0, std430) restrict readonly buffer _18_21
{
    uint64_t _m0[];
} _21[];

layout(set = 0, binding = 0, std430) writeonly buffer _23_26
{
    uint64_t _m0[];
} _26[];

layout(set = 0, binding = 0, std430) restrict readonly buffer _28_31
{
    uint64_t _m0[];
} _31[];

void main()
{
    uvec2 _46 = _10._m0[subgroupBroadcastFirst(0u)] >> uvec2(3u);
    uvec2 _54 = _10._m0[subgroupBroadcastFirst(1u)] >> uvec2(3u);
    uvec2 _61 = _10._m0[subgroupBroadcastFirst(2u)] >> uvec2(3u);
    uvec2 _67 = _10._m0[subgroupBroadcastFirst(3u)] >> uvec2(3u);
    uint _68 = gl_GlobalInvocationID.x << 1u;
    uint _69 = _68 * 3u;
    uint _75 = (_69 < _54.y) ? (_69 + _54.x) : 536870908u;
    u64vec3 _87 = u64vec3(_21[1u]._m0[_75], _21[1u]._m0[_75 + 1u], _21[1u]._m0[_75 + 2u]);
    uint64_t _88 = _87.x;
    uint64_t _89 = _87.y;
    uint64_t _90 = _87.z;
    uint _92 = (_68 | 1u) * 3u;
    uint _97 = (_92 < _54.y) ? (_92 + _54.x) : 536870908u;
    u64vec3 _106 = u64vec3(_21[1u]._m0[_97], _21[1u]._m0[_97 + 1u], _21[1u]._m0[_97 + 2u]);
    uint64_t _107 = _106.x;
    uint64_t _108 = _106.y;
    uint64_t _109 = _106.z;
    uint _113 = gl_GlobalInvocationID.x << 3u;
    uint _114 = _113 * 3u;
    uint _119 = (_114 < _46.y) ? (_114 + _46.x) : 536870908u;
    _16[0u]._m0[_119] = _107 + _88;
    _16[0u]._m0[_119 + 1u] = _108 + _89;
    _16[0u]._m0[_119 + 2u] = _109 + _90;
    uint _129 = (_113 | 1u) * 3u;
    uint _134 = (_129 < _46.y) ? (_129 + _46.x) : 536870908u;
    _16[0u]._m0[_134] = _88 - _107;
    _16[0u]._m0[_134 + 1u] = _89 - _108;
    _16[0u]._m0[_134 + 2u] = _90 - _109;
    uint _144 = (_113 | 2u) * 3u;
    uint _149 = (_144 < _46.y) ? (_144 + _46.x) : 536870908u;
    _16[0u]._m0[_149] = _107 * _88;
    _16[0u]._m0[_149 + 1u] = _108 * _89;
    _16[0u]._m0[_149 + 2u] = _109 * _90;
    uint _159 = (_113 | 3u) * 3u;
    uint _164 = (_159 < _46.y) ? (_159 + _46.x) : 536870908u;
    _16[0u]._m0[_164] = _88 / _107;
    _16[0u]._m0[_164 + 1u] = _89 / _108;
    _16[0u]._m0[_164 + 2u] = _90 / _109;
    uint64_t _170 = _107 & 63ul;
    uint64_t _172 = _108 & 63ul;
    uint64_t _173 = _109 & 63ul;
    uint _179 = (_113 | 4u) * 3u;
    uint _184 = (_179 < _46.y) ? (_179 + _46.x) : 536870908u;
    _16[0u]._m0[_184] = _88 << _170;
    _16[0u]._m0[_184 + 1u] = _89 << _172;
    _16[0u]._m0[_184 + 2u] = _90 << _173;
    uint _195 = (_113 | 5u) * 3u;
    uint _200 = (_195 < _46.y) ? (_195 + _46.x) : 536870908u;
    _16[0u]._m0[_200] = _88 >> _170;
    _16[0u]._m0[_200 + 1u] = _89 >> _172;
    _16[0u]._m0[_200 + 2u] = _90 >> _173;
    uint _211 = (_113 | 6u) * 3u;
    uint _216 = (_211 < _46.y) ? (_211 + _46.x) : 536870908u;
    _16[0u]._m0[_216] = uint64_t(int64_t(_88) >> int64_t(_170));
    _16[0u]._m0[_216 + 1u] = uint64_t(int64_t(_89) >> int64_t(_172));
    _16[0u]._m0[_216 + 2u] = uint64_t(int64_t(_90) >> int64_t(_173));
    uint _227 = (_113 | 7u) * 3u;
    uint _232 = (_227 < _46.y) ? (_227 + _46.x) : 536870908u;
    _16[0u]._m0[_232] = _107 & _88;
    _16[0u]._m0[_232 + 1u] = _108 & _89;
    _16[0u]._m0[_232 + 2u] = _109 & _90;
    uint _240 = gl_GlobalInvocationID.x * 3u;
    uint _245 = (_240 < _67.y) ? (_240 + _67.x) : 536870908u;
    u64vec2 _252 = u64vec2(_31[3u]._m0[_245], _31[3u]._m0[_245 + 1u]);
    uint _259 = (gl_GlobalInvocationID.x < _61.y) ? (gl_GlobalInvocationID.x + _61.x) : 536870908u;
    _26[2u]._m0[_259] = _252.x;
    _26[2u]._m0[_259 + 1u] = _252.y;
    _26[2u]._m0[_259 + 2u] = _90;
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 267
; Schema: 0
OpCapability Shader
OpCapability Int64
OpCapability GroupNonUniformBallot
OpCapability RuntimeDescriptorArray
OpExtension "SPV_EXT_descriptor_indexing"
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %34
OpExecutionMode %3 LocalSize 128 1 1
OpName %3 "main"
OpName %8 "SSBO_Offsets"
OpName %13 "SSBO"
OpName %18 "SSBO"
OpName %23 "SSBO"
OpName %28 "SSBO"
OpDecorate %7 ArrayStride 8
OpMemberDecorate %8 0 Offset 0
OpDecorate %8 Block
OpDecorate %10 DescriptorSet 15
OpDecorate %10 Binding 0
OpDecorate %10 NonWritable
OpDecorate %10 Restrict
OpDecorate %12 ArrayStride 8
OpMemberDecorate %13 0 Offset 0
OpDecorate %13 Block
OpDecorate %16 DescriptorSet 0
OpDecorate %16 Binding 0
OpDecorate %16 NonReadable
OpDecorate %17 ArrayStride 8
OpMemberDecorate %18 0 Offset 0
OpDecorate %18 Block
OpDecorate %21 DescriptorSet 0
OpDecorate %21 Binding 0
OpDecorate %21 NonWritable
OpDecorate %21 Restrict
OpDecorate %22 ArrayStride 8
OpMemberDecorate %23 0 Offset 0
OpDecorate %23 Block
OpDecorate %26 DescriptorSet 0
OpDecorate %26 Binding 0
OpDecorate %26 NonReadable
OpDecorate %27 ArrayStride 8
OpMemberDecorate %28 0 Offset 0
OpDecorate %28 Block
OpDecorate %31 DescriptorSet 0
OpDecorate %31 Binding 0
OpDecorate %31 NonWritable
OpDecorate %31 Restrict
OpDecorate %34 BuiltIn GlobalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeVector %5 2
%7 = OpTypeRuntimeArray %6
%8 = OpTypeStruct %7
%9 = OpTypePointer StorageBuffer %8
%10 = OpVariable %9 StorageBuffer
%11 = OpTypeInt 64 0
%12 = OpTypeRuntimeArray %11
%13 = OpTypeStruct %12
%14 = OpTypeRuntimeArray %13
%15 = OpTypePointer StorageBuffer %14
%16 = OpVariable %15 StorageBuffer
%17 = OpTypeRuntimeArray %11
%18 = OpTypeStruct %17
%19 = OpTypeRuntimeArray %18
%20 = OpTypePointer StorageBuffer %19
%21 = OpVariable %20 StorageBuffer
%22 = OpTypeRuntimeArray %11
%23 = OpTypeStruct %22
%24 = OpTypeRuntimeArray %23
%25 = OpTypePointer StorageBuffer %24
%26 = OpVariable %25 StorageBuffer
%27 = OpTypeRuntimeArray %11
%28 = OpTypeStruct %27
%29 = OpTypeRuntimeArray %28
%30 = OpTypePointer StorageBuffer %29
%31 = OpVariable %30 StorageBuffer
%32 = OpTypeVector %5 3
%33 = OpTypePointer Input %32
%34 = OpVariable %33 Input
%35 = OpTypePointer Input %5
%37 = OpConstant %5 0
%39 = OpTypePointer StorageBuffer %13
%42 = OpConstant %5 3
%43 = OpTypePointer StorageBuffer %6
%47 = OpConstantComposite %6 %42 %42
%48 = OpTypePointer StorageBuffer %18
%50 = OpConstant %5 1
%55 = OpTypePointer StorageBuffer %23
%57 = OpConstant %5 2
%62 = OpTypePointer StorageBuffer %28
%73 = OpTypeBool
%76 = OpConstant %5 536870908
%77 = OpTypePointer StorageBuffer %11
%86 = OpTypeVector %11 3
%171 = OpConstant %11 63
%178 = OpConstant %5 4
%194 = OpConstant %5 5
%210 = OpConstant %5 6
%226 = OpConstant %5 7
%239 = OpConstant %5 24
%251 = OpTypeVector %11 2
%3 = OpFunction %1 None %2
%4 = OpLabel
OpBranch %265
%265 = OpLabel
%36 = OpAccessChain %35 %34 %37
%38 = OpLoad %5 %36
%40 = OpAccessChain %39 %16 %37
%41 = OpGroupNonUniformBroadcastFirst %5 %42 %37
%44 = OpAccessChain %43 %10 %37 %41
%45 = OpLoad %6 %44
%46 = OpShiftRightLogical %6 %45 %47
%49 = OpAccessChain %48 %21 %50
%51 = OpGroupNonUniformBroadcastFirst %5 %42 %50
%52 = OpAccessChain %43 %10 %37 %51
%53 = OpLoad %6 %52
%54 = OpShiftRightLogical %6 %53 %47
%56 = OpAccessChain %55 %26 %57
%58 = OpGroupNonUniformBroadcastFirst %5 %42 %57
%59 = OpAccessChain %43 %10 %37 %58
%60 = OpLoad %6 %59
%61 = OpShiftRightLogical %6 %60 %47
%63 = OpAccessChain %62 %31 %42
%64 = OpGroupNonUniformBroadcastFirst %5 %42 %42
%65 = OpAccessChain %43 %10 %37 %64
%66 = OpLoad %6 %65
%67 = OpShiftRightLogical %6 %66 %47
%68 = OpShiftLeftLogical %5 %38 %50
%69 = OpIMul %5 %68 %42
%70 = OpCompositeExtract %5 %54 0
%71 = OpCompositeExtract %5 %54 1
%72 = OpIAdd %5 %69 %70
%74 = OpULessThan %73 %69 %71
%75 = OpSelect %5 %74 %72 %76
%78 = OpAccessChain %77 %49 %37 %75
%79 = OpLoad %11 %78
%81 = OpIAdd %5 %75 %50
%80 = OpAccessChain %77 %49 %37 %81
%82 = OpLoad %11 %80
%84 = OpIAdd %5 %75 %57
%83 = OpAccessChain %77 %49 %37 %84
%85 = OpLoad %11 %83
%87 = OpCompositeConstruct %86 %79 %82 %85
%88 = OpCompositeExtract %11 %87 0
%89 = OpCompositeExtract %11 %87 1
%90 = OpCompositeExtract %11 %87 2
%91 = OpBitwiseOr %5 %68 %50
%92 = OpIMul %5 %91 %42
%93 = OpCompositeExtract %5 %54 0
%94 = OpCompositeExtract %5 %54 1
%95 = OpIAdd %5 %92 %93
%96 = OpULessThan %73 %92 %94
%97 = OpSelect %5 %96 %95 %76
%98 = OpAccessChain %77 %49 %37 %97
%99 = OpLoad %11 %98
%101 = OpIAdd %5 %97 %50
%100 = OpAccessChain %77 %49 %37 %101
%102 = OpLoad %11 %100
%104 = OpIAdd %5 %97 %57
%103 = OpAccessChain %77 %49 %37 %104
%105 = OpLoad %11 %103
%106 = OpCompositeConstruct %86 %99 %102 %105
%107 = OpCompositeExtract %11 %106 0
%108 = OpCompositeExtract %11 %106 1
%109 = OpCompositeExtract %11 %106 2
%110 = OpIAdd %11 %107 %88
%111 = OpIAdd %11 %108 %89
%112 = OpIAdd %11 %109 %90
%113 = OpShiftLeftLogical %5 %38 %42
%114 = OpIMul %5 %113 %42
%115 = OpCompositeExtract %5 %46 0
%116 = OpCompositeExtract %5 %46 1
%117 = OpIAdd %5 %114 %115
%118 = OpULessThan %73 %114 %116
%119 = OpSelect %5 %118 %117 %76
%120 = OpAccessChain %77 %40 %37 %119
OpStore %120 %110
%122 = OpIAdd %5 %119 %50
%121 = OpAccessChain %77 %40 %37 %122
OpStore %121 %111
%124 = OpIAdd %5 %119 %57
%123 = OpAccessChain %77 %40 %37 %124
OpStore %123 %112
%125 = OpISub %11 %88 %107
%126 = OpISub %11 %89 %108
%127 = OpISub %11 %90 %109
%128 = OpBitwiseOr %5 %113 %50
%129 = OpIMul %5 %128 %42
%130 = OpCompositeExtract %5 %46 0
%131 = OpCompositeExtract %5 %46 1
%132 = OpIAdd %5 %129 %130
%133 = OpULessThan %73 %129 %131
%134 = OpSelect %5 %133 %132 %76
%135 = OpAccessChain %77 %40 %37 %134
OpStore %135 %125
%137 = OpIAdd %5 %134 %50
%136 = OpAccessChain %77 %40 %37 %137
OpStore %136 %126
%139 = OpIAdd %5 %134 %57
%138 = OpAccessChain %77 %40 %37 %139
OpStore %138 %127
%140 = OpIMul %11 %107 %88
%141 = OpIMul %11 %108 %89
%142 = OpIMul %11 %109 %90
%143 = OpBitwiseOr %5 %113 %57
%144 = OpIMul %5 %143 %42
%145 = OpCompositeExtract %5 %46 0
%146 = OpCompositeExtract %5 %46 1
%147 = OpIAdd %5 %144 %145
%148 = OpULessThan %73 %144 %146
%149 = OpSelect %5 %148 %147 %76
%150 = OpAccessChain %77 %40 %37 %149
OpStore %150 %140
%152 = OpIAdd %5 %149 %50
%151 = OpAccessChain %77 %40 %37 %152
OpStore %151 %141
%154 = OpIAdd %5 %149 %57
%153 = OpAccessChain %77 %40 %37 %154
OpStore %153 %142
%155 = OpUDiv %11 %88 %107
%156 = OpUDiv %11 %89 %108
%157 = OpUDiv %11 %90 %109
%158 = OpBitwiseOr %5 %113 %42
%159 = OpIMul %5 %158 %42
%160 = OpCompositeExtract %5 %46 0
%161 = OpCompositeExtract %5 %46 1
%162 = OpIAdd %5 %159 %160
%163 = OpULessThan %73 %159 %161
%164 = OpSelect %5 %163 %162 %76
%165 = OpAccessChain %77 %40 %37 %164
OpStore %165 %155
%167 = OpIAdd %5 %164 %50
%166 = OpAccessChain %77 %40 %37 %167
OpStore %166 %156
%169 = OpIAdd %5 %164 %57
%168 = OpAccessChain %77 %40 %37 %169
OpStore %168 %157
%170 = OpBitwiseAnd %11 %107 %171
%172 = OpBitwiseAnd %11 %108 %171
%173 = OpBitwiseAnd %11 %109 %171
%174 = OpShiftLeftLogical %11 %88 %170
%175 = OpShiftLeftLogical %11 %89 %172
%176 = OpShiftLeftLogical %11 %90 %173
%177 = OpBitwiseOr %5 %113 %178
%179 = OpIMul %5 %177 %42
%180 = OpCompositeExtract %5 %46 0
%181 = OpCompositeExtract %5 %46 1
%182 = OpIAdd %5 %179 %180
%183 = OpULessThan %73 %179 %181
%184 = OpSelect %5 %183 %182 %76
%185 = OpAccessChain %77 %40 %37 %184
OpStore %185 %174
%187 = OpIAdd %5 %184 %50
%186 = OpAccessChain %77 %40 %37 %187
OpStore %186 %175
%189 = OpIAdd %5 %184 %57
%188 = OpAccessChain %77 %40 %37 %189
OpStore %188 %176
%190 = OpShiftRightLogical %11 %88 %170
%191 = OpShiftRightLogical %11 %89 %172
%192 = OpShiftRightLogical %11 %90 %173
%193 = OpBitwiseOr %5 %113 %194
%195 = OpIMul %5 %193 %42
%196 = OpCompositeExtract %5 %46 0
%197 = OpCompositeExtract %5 %46 1
%198 = OpIAdd %5 %195 %196
%199 = OpULessThan %73 %195 %197
%200 = OpSelect %5 %199 %198 %76
%201 = OpAccessChain %77 %40 %37 %200
OpStore %201 %190
%203 = OpIAdd %5 %200 %50
%202 = OpAccessChain %77 %40 %37 %203
OpStore %202 %191
%205 = OpIAdd %5 %200 %57
%204 = OpAccessChain %77 %40 %37 %205
OpStore %204 %192
%206 = OpShiftRightArithmetic %11 %88 %170
%207 = OpShiftRightArithmetic %11 %89 %172
%208 = OpShiftRightArithmetic %11 %90 %173
%209 = OpBitwiseOr %5 %113 %210
%211 = OpIMul %5 %209 %42
%212 = OpCompositeExtract %5 %46 0
%213 = OpCompositeExtract %5 %46 1
%214 = OpIAdd %5 %211 %212
%215 = OpULessThan %73 %211 %213
%216 = OpSelect %5 %215 %214 %76
%217 = OpAccessChain %77 %40 %37 %216
OpStore %217 %206
%219 = OpIAdd %5 %216 %50
%218 = OpAccessChain %77 %40 %37 %219
OpStore %218 %207
%221 = OpIAdd %5 %216 %57
%220 = OpAccessChain %77 %40 %37 %221
OpStore %220 %208
%222 = OpBitwiseAnd %11 %107 %88
%223 = OpBitwiseAnd %11 %108 %89
%224 = OpBitwiseAnd %11 %109 %90
%225 = OpBitwiseOr %5 %113 %226
%227 = OpIMul %5 %225 %42
%228 = OpCompositeExtract %5 %46 0
%229 = OpCompositeExtract %5 %46 1
%230 = OpIAdd %5 %227 %228
%231 = OpULessThan %73 %227 %229
%232 = OpSelect %5 %231 %230 %76
%233 = OpAccessChain %77 %40 %37 %232
OpStore %233 %222
%235 = OpIAdd %5 %232 %50
%234 = OpAccessChain %77 %40 %37 %235
OpStore %234 %223
%237 = OpIAdd %5 %232 %57
%236 = OpAccessChain %77 %40 %37 %237
OpStore %236 %224
%238 = OpIMul %5 %38 %239
%240 = OpIMul %5 %38 %42
%241 = OpCompositeExtract %5 %67 0
%242 = OpCompositeExtract %5 %67 1
%243 = OpIAdd %5 %240 %241
%244 = OpULessThan %73 %240 %242
%245 = OpSelect %5 %244 %243 %76
%246 = OpAccessChain %77 %63 %37 %245
%247 = OpLoad %11 %246
%249 = OpIAdd %5 %245 %50
%248 = OpAccessChain %77 %63 %37 %249
%250 = OpLoad %11 %248
%252 = OpCompositeConstruct %251 %247 %250
%253 = OpCompositeExtract %11 %252 0
%254 = OpCompositeExtract %11 %252 1
%255 = OpCompositeExtract %5 %61 0
%256 = OpCompositeExtract %5 %61 1
%257 = OpIAdd %5 %38 %255
%258 = OpULessThan %73 %38 %256
%259 = OpSelect %5 %258 %257 %76
%260 = OpAccessChain %77 %56 %37 %259
OpStore %260 %253
%262 = OpIAdd %5 %259 %50
%261 = OpAccessChain %77 %56 %37 %262
OpStore %261 %254
%264 = OpIAdd %5 %259 %57
%263 = OpAccessChain %77 %56 %37 %264
OpStore %263 %90
OpReturn
OpFunctionEnd
#endif
