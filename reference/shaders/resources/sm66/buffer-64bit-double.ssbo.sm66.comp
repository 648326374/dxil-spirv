#version 460
#extension GL_ARB_gpu_shader_int64 : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_scalar_block_layout : require
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, scalar) writeonly buffer SSBO
{
    u64vec3 _m0[];
} _11[];

layout(set = 0, binding = 0, scalar) restrict readonly buffer _13_16
{
    u64vec3 _m0[];
} _16[];

layout(set = 0, binding = 0, std430) writeonly buffer _18_21
{
    uint64_t _m0[];
} _21[];

layout(set = 0, binding = 0, std430) restrict readonly buffer _23_26
{
    uint64_t _m0[];
} _26[];

void main()
{
    dvec3 _53 = uint64BitsToDouble(_16[1u]._m0[gl_GlobalInvocationID.x * 2u]);
    double _54 = _53.x;
    double _55 = _53.y;
    double _56 = _53.z;
    dvec3 _62 = uint64BitsToDouble(_16[1u]._m0[(gl_GlobalInvocationID.x * 2u) + 1u]);
    double _63 = _62.x;
    double _64 = _62.y;
    double _65 = _62.z;
    uint _69 = gl_GlobalInvocationID.x << 2u;
    _11[0u]._m0[gl_GlobalInvocationID.x * 4u] = u64vec3(doubleBitsToUint64(_63 + _54), doubleBitsToUint64(_64 + _55), doubleBitsToUint64(_65 + _56));
    _11[0u]._m0[(gl_GlobalInvocationID.x * 4u) + 1u] = u64vec3(doubleBitsToUint64(_54 - _63), doubleBitsToUint64(_55 - _64), doubleBitsToUint64(_56 - _65));
    _11[0u]._m0[(gl_GlobalInvocationID.x * 4u) + 2u] = u64vec3(doubleBitsToUint64(_63 * _54), doubleBitsToUint64(_64 * _55), doubleBitsToUint64(_65 * _56));
    _11[0u]._m0[(gl_GlobalInvocationID.x * 4u) + 3u] = u64vec3(doubleBitsToUint64(_54 / _63), doubleBitsToUint64(_55 / _64), doubleBitsToUint64(_56 / _65));
    uint _112 = gl_GlobalInvocationID.x * 3u;
    dvec2 _122 = uint64BitsToDouble(u64vec2(_26[3u]._m0[_112], _26[3u]._m0[_112 + 1u]));
    _21[2u]._m0[gl_GlobalInvocationID.x] = doubleBitsToUint64(_122.x);
    _21[2u]._m0[gl_GlobalInvocationID.x + 1u] = doubleBitsToUint64(_122.y);
    _21[2u]._m0[gl_GlobalInvocationID.x + 2u] = doubleBitsToUint64(_56);
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 136
; Schema: 0
OpCapability Shader
OpCapability Float64
OpCapability Int64
OpCapability RuntimeDescriptorArray
OpExtension "SPV_EXT_descriptor_indexing"
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %30
OpExecutionMode %3 LocalSize 128 1 1
OpName %3 "main"
OpName %8 "SSBO"
OpName %13 "SSBO"
OpName %18 "SSBO"
OpName %23 "SSBO"
OpDecorate %7 ArrayStride 24
OpMemberDecorate %8 0 Offset 0
OpDecorate %8 Block
OpDecorate %11 DescriptorSet 0
OpDecorate %11 Binding 0
OpDecorate %11 NonReadable
OpDecorate %12 ArrayStride 24
OpMemberDecorate %13 0 Offset 0
OpDecorate %13 Block
OpDecorate %16 DescriptorSet 0
OpDecorate %16 Binding 0
OpDecorate %16 NonWritable
OpDecorate %16 Restrict
OpDecorate %17 ArrayStride 8
OpMemberDecorate %18 0 Offset 0
OpDecorate %18 Block
OpDecorate %21 DescriptorSet 0
OpDecorate %21 Binding 0
OpDecorate %21 NonReadable
OpDecorate %22 ArrayStride 8
OpMemberDecorate %23 0 Offset 0
OpDecorate %23 Block
OpDecorate %26 DescriptorSet 0
OpDecorate %26 Binding 0
OpDecorate %26 NonWritable
OpDecorate %26 Restrict
OpDecorate %30 BuiltIn GlobalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 64 0
%6 = OpTypeVector %5 3
%7 = OpTypeRuntimeArray %6
%8 = OpTypeStruct %7
%9 = OpTypeRuntimeArray %8
%10 = OpTypePointer StorageBuffer %9
%11 = OpVariable %10 StorageBuffer
%12 = OpTypeRuntimeArray %6
%13 = OpTypeStruct %12
%14 = OpTypeRuntimeArray %13
%15 = OpTypePointer StorageBuffer %14
%16 = OpVariable %15 StorageBuffer
%17 = OpTypeRuntimeArray %5
%18 = OpTypeStruct %17
%19 = OpTypeRuntimeArray %18
%20 = OpTypePointer StorageBuffer %19
%21 = OpVariable %20 StorageBuffer
%22 = OpTypeRuntimeArray %5
%23 = OpTypeStruct %22
%24 = OpTypeRuntimeArray %23
%25 = OpTypePointer StorageBuffer %24
%26 = OpVariable %25 StorageBuffer
%27 = OpTypeInt 32 0
%28 = OpTypeVector %27 3
%29 = OpTypePointer Input %28
%30 = OpVariable %29 Input
%31 = OpTypePointer Input %27
%33 = OpConstant %27 0
%35 = OpTypePointer StorageBuffer %8
%37 = OpTypePointer StorageBuffer %13
%39 = OpConstant %27 1
%40 = OpTypePointer StorageBuffer %18
%42 = OpConstant %27 2
%43 = OpTypePointer StorageBuffer %23
%45 = OpConstant %27 3
%48 = OpTypePointer StorageBuffer %6
%51 = OpTypeFloat 64
%52 = OpTypeVector %51 3
%71 = OpConstant %27 4
%111 = OpConstant %27 24
%113 = OpTypePointer StorageBuffer %5
%119 = OpTypeVector %5 2
%121 = OpTypeVector %51 2
%3 = OpFunction %1 None %2
%4 = OpLabel
OpBranch %134
%134 = OpLabel
%32 = OpAccessChain %31 %30 %33
%34 = OpLoad %27 %32
%36 = OpAccessChain %35 %11 %33
%38 = OpAccessChain %37 %16 %39
%41 = OpAccessChain %40 %21 %42
%44 = OpAccessChain %43 %26 %45
%46 = OpShiftLeftLogical %27 %34 %39
%47 = OpIMul %27 %34 %42
%49 = OpAccessChain %48 %38 %33 %47
%50 = OpLoad %6 %49
%53 = OpBitcast %52 %50
%54 = OpCompositeExtract %51 %53 0
%55 = OpCompositeExtract %51 %53 1
%56 = OpCompositeExtract %51 %53 2
%57 = OpBitwiseOr %27 %46 %39
%58 = OpIMul %27 %34 %42
%59 = OpIAdd %27 %58 %39
%60 = OpAccessChain %48 %38 %33 %59
%61 = OpLoad %6 %60
%62 = OpBitcast %52 %61
%63 = OpCompositeExtract %51 %62 0
%64 = OpCompositeExtract %51 %62 1
%65 = OpCompositeExtract %51 %62 2
%66 = OpFAdd %51 %63 %54
%67 = OpFAdd %51 %64 %55
%68 = OpFAdd %51 %65 %56
%69 = OpShiftLeftLogical %27 %34 %42
%70 = OpIMul %27 %34 %71
%72 = OpBitcast %5 %66
%73 = OpBitcast %5 %67
%74 = OpBitcast %5 %68
%75 = OpCompositeConstruct %6 %72 %73 %74
%76 = OpAccessChain %48 %36 %33 %70
OpStore %76 %75
%77 = OpFSub %51 %54 %63
%78 = OpFSub %51 %55 %64
%79 = OpFSub %51 %56 %65
%80 = OpBitwiseOr %27 %69 %39
%81 = OpIMul %27 %34 %71
%82 = OpIAdd %27 %81 %39
%83 = OpBitcast %5 %77
%84 = OpBitcast %5 %78
%85 = OpBitcast %5 %79
%86 = OpCompositeConstruct %6 %83 %84 %85
%87 = OpAccessChain %48 %36 %33 %82
OpStore %87 %86
%88 = OpFMul %51 %63 %54
%89 = OpFMul %51 %64 %55
%90 = OpFMul %51 %65 %56
%91 = OpBitwiseOr %27 %69 %42
%92 = OpIMul %27 %34 %71
%93 = OpIAdd %27 %92 %42
%94 = OpBitcast %5 %88
%95 = OpBitcast %5 %89
%96 = OpBitcast %5 %90
%97 = OpCompositeConstruct %6 %94 %95 %96
%98 = OpAccessChain %48 %36 %33 %93
OpStore %98 %97
%99 = OpFDiv %51 %54 %63
%100 = OpFDiv %51 %55 %64
%101 = OpFDiv %51 %56 %65
%102 = OpBitwiseOr %27 %69 %45
%103 = OpIMul %27 %34 %71
%104 = OpIAdd %27 %103 %45
%105 = OpBitcast %5 %99
%106 = OpBitcast %5 %100
%107 = OpBitcast %5 %101
%108 = OpCompositeConstruct %6 %105 %106 %107
%109 = OpAccessChain %48 %36 %33 %104
OpStore %109 %108
%110 = OpIMul %27 %34 %111
%112 = OpIMul %27 %34 %45
%114 = OpAccessChain %113 %44 %33 %112
%115 = OpLoad %5 %114
%117 = OpIAdd %27 %112 %39
%116 = OpAccessChain %113 %44 %33 %117
%118 = OpLoad %5 %116
%120 = OpCompositeConstruct %119 %115 %118
%122 = OpBitcast %121 %120
%123 = OpCompositeExtract %51 %122 0
%124 = OpCompositeExtract %51 %122 1
%125 = OpShiftLeftLogical %27 %34 %45
%126 = OpBitcast %5 %123
%127 = OpBitcast %5 %124
%128 = OpBitcast %5 %56
%129 = OpAccessChain %113 %41 %33 %34
OpStore %129 %126
%131 = OpIAdd %27 %34 %39
%130 = OpAccessChain %113 %41 %33 %131
OpStore %130 %127
%133 = OpIAdd %27 %34 %42
%132 = OpAccessChain %113 %41 %33 %133
OpStore %132 %128
OpReturn
OpFunctionEnd
#endif
