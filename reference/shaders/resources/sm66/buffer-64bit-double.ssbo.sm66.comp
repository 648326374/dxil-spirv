#version 460
#extension GL_ARB_gpu_shader_int64 : require
#extension GL_EXT_nonuniform_qualifier : require
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, std430) writeonly buffer SSBO
{
    uint64_t _m0[];
} _10[];

layout(set = 0, binding = 0, std430) restrict readonly buffer _12_15
{
    uint64_t _m0[];
} _15[];

layout(set = 0, binding = 0, std430) writeonly buffer _17_20
{
    uint64_t _m0[];
} _20[];

layout(set = 0, binding = 0, std430) restrict readonly buffer _22_25
{
    uint64_t _m0[];
} _25[];

void main()
{
    uint _45 = gl_GlobalInvocationID.x << 1u;
    uint _46 = _45 * 3u;
    dvec3 _60 = uint64BitsToDouble(u64vec3(_15[1u]._m0[_46], _15[1u]._m0[_46 + 1u], _15[1u]._m0[_46 + 2u]));
    double _61 = _60.x;
    double _62 = _60.y;
    double _63 = _60.z;
    uint _65 = (_45 | 1u) * 3u;
    dvec3 _75 = uint64BitsToDouble(u64vec3(_15[1u]._m0[_65], _15[1u]._m0[_65 + 1u], _15[1u]._m0[_65 + 2u]));
    double _76 = _75.x;
    double _77 = _75.y;
    double _78 = _75.z;
    uint _82 = gl_GlobalInvocationID.x << 2u;
    uint _83 = _82 * 3u;
    _10[0u]._m0[_83] = doubleBitsToUint64(_76 + _61);
    _10[0u]._m0[_83 + 1u] = doubleBitsToUint64(_77 + _62);
    _10[0u]._m0[_83 + 2u] = doubleBitsToUint64(_78 + _63);
    uint _96 = (_82 | 1u) * 3u;
    _10[0u]._m0[_96] = doubleBitsToUint64(_61 - _76);
    _10[0u]._m0[_96 + 1u] = doubleBitsToUint64(_62 - _77);
    _10[0u]._m0[_96 + 2u] = doubleBitsToUint64(_63 - _78);
    uint _109 = (_82 | 2u) * 3u;
    _10[0u]._m0[_109] = doubleBitsToUint64(_76 * _61);
    _10[0u]._m0[_109 + 1u] = doubleBitsToUint64(_77 * _62);
    _10[0u]._m0[_109 + 2u] = doubleBitsToUint64(_78 * _63);
    uint _122 = (_82 | 3u) * 3u;
    _10[0u]._m0[_122] = doubleBitsToUint64(_61 / _76);
    _10[0u]._m0[_122 + 1u] = doubleBitsToUint64(_62 / _77);
    _10[0u]._m0[_122 + 2u] = doubleBitsToUint64(_63 / _78);
    uint _133 = gl_GlobalInvocationID.x * 3u;
    dvec2 _142 = uint64BitsToDouble(u64vec2(_25[3u]._m0[_133], _25[3u]._m0[_133 + 1u]));
    _20[2u]._m0[gl_GlobalInvocationID.x] = doubleBitsToUint64(_142.x);
    _20[2u]._m0[gl_GlobalInvocationID.x + 1u] = doubleBitsToUint64(_142.y);
    _20[2u]._m0[gl_GlobalInvocationID.x + 2u] = doubleBitsToUint64(_63);
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 156
; Schema: 0
OpCapability Shader
OpCapability Float64
OpCapability Int64
OpCapability RuntimeDescriptorArray
OpExtension "SPV_EXT_descriptor_indexing"
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %29
OpExecutionMode %3 LocalSize 128 1 1
OpName %3 "main"
OpName %7 "SSBO"
OpName %12 "SSBO"
OpName %17 "SSBO"
OpName %22 "SSBO"
OpDecorate %6 ArrayStride 8
OpMemberDecorate %7 0 Offset 0
OpDecorate %7 Block
OpDecorate %10 DescriptorSet 0
OpDecorate %10 Binding 0
OpDecorate %10 NonReadable
OpDecorate %11 ArrayStride 8
OpMemberDecorate %12 0 Offset 0
OpDecorate %12 Block
OpDecorate %15 DescriptorSet 0
OpDecorate %15 Binding 0
OpDecorate %15 NonWritable
OpDecorate %15 Restrict
OpDecorate %16 ArrayStride 8
OpMemberDecorate %17 0 Offset 0
OpDecorate %17 Block
OpDecorate %20 DescriptorSet 0
OpDecorate %20 Binding 0
OpDecorate %20 NonReadable
OpDecorate %21 ArrayStride 8
OpMemberDecorate %22 0 Offset 0
OpDecorate %22 Block
OpDecorate %25 DescriptorSet 0
OpDecorate %25 Binding 0
OpDecorate %25 NonWritable
OpDecorate %25 Restrict
OpDecorate %29 BuiltIn GlobalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 64 0
%6 = OpTypeRuntimeArray %5
%7 = OpTypeStruct %6
%8 = OpTypeRuntimeArray %7
%9 = OpTypePointer StorageBuffer %8
%10 = OpVariable %9 StorageBuffer
%11 = OpTypeRuntimeArray %5
%12 = OpTypeStruct %11
%13 = OpTypeRuntimeArray %12
%14 = OpTypePointer StorageBuffer %13
%15 = OpVariable %14 StorageBuffer
%16 = OpTypeRuntimeArray %5
%17 = OpTypeStruct %16
%18 = OpTypeRuntimeArray %17
%19 = OpTypePointer StorageBuffer %18
%20 = OpVariable %19 StorageBuffer
%21 = OpTypeRuntimeArray %5
%22 = OpTypeStruct %21
%23 = OpTypeRuntimeArray %22
%24 = OpTypePointer StorageBuffer %23
%25 = OpVariable %24 StorageBuffer
%26 = OpTypeInt 32 0
%27 = OpTypeVector %26 3
%28 = OpTypePointer Input %27
%29 = OpVariable %28 Input
%30 = OpTypePointer Input %26
%32 = OpConstant %26 0
%34 = OpTypePointer StorageBuffer %7
%36 = OpTypePointer StorageBuffer %12
%38 = OpConstant %26 1
%39 = OpTypePointer StorageBuffer %17
%41 = OpConstant %26 2
%42 = OpTypePointer StorageBuffer %22
%44 = OpConstant %26 3
%47 = OpTypePointer StorageBuffer %5
%56 = OpTypeVector %5 3
%58 = OpTypeFloat 64
%59 = OpTypeVector %58 3
%132 = OpConstant %26 24
%139 = OpTypeVector %5 2
%141 = OpTypeVector %58 2
%3 = OpFunction %1 None %2
%4 = OpLabel
OpBranch %154
%154 = OpLabel
%31 = OpAccessChain %30 %29 %32
%33 = OpLoad %26 %31
%35 = OpAccessChain %34 %10 %32
%37 = OpAccessChain %36 %15 %38
%40 = OpAccessChain %39 %20 %41
%43 = OpAccessChain %42 %25 %44
%45 = OpShiftLeftLogical %26 %33 %38
%46 = OpIMul %26 %45 %44
%48 = OpAccessChain %47 %37 %32 %46
%49 = OpLoad %5 %48
%51 = OpIAdd %26 %46 %38
%50 = OpAccessChain %47 %37 %32 %51
%52 = OpLoad %5 %50
%54 = OpIAdd %26 %46 %41
%53 = OpAccessChain %47 %37 %32 %54
%55 = OpLoad %5 %53
%57 = OpCompositeConstruct %56 %49 %52 %55
%60 = OpBitcast %59 %57
%61 = OpCompositeExtract %58 %60 0
%62 = OpCompositeExtract %58 %60 1
%63 = OpCompositeExtract %58 %60 2
%64 = OpBitwiseOr %26 %45 %38
%65 = OpIMul %26 %64 %44
%66 = OpAccessChain %47 %37 %32 %65
%67 = OpLoad %5 %66
%69 = OpIAdd %26 %65 %38
%68 = OpAccessChain %47 %37 %32 %69
%70 = OpLoad %5 %68
%72 = OpIAdd %26 %65 %41
%71 = OpAccessChain %47 %37 %32 %72
%73 = OpLoad %5 %71
%74 = OpCompositeConstruct %56 %67 %70 %73
%75 = OpBitcast %59 %74
%76 = OpCompositeExtract %58 %75 0
%77 = OpCompositeExtract %58 %75 1
%78 = OpCompositeExtract %58 %75 2
%79 = OpFAdd %58 %76 %61
%80 = OpFAdd %58 %77 %62
%81 = OpFAdd %58 %78 %63
%82 = OpShiftLeftLogical %26 %33 %41
%83 = OpIMul %26 %82 %44
%84 = OpBitcast %5 %79
%85 = OpBitcast %5 %80
%86 = OpBitcast %5 %81
%87 = OpAccessChain %47 %35 %32 %83
OpStore %87 %84
%89 = OpIAdd %26 %83 %38
%88 = OpAccessChain %47 %35 %32 %89
OpStore %88 %85
%91 = OpIAdd %26 %83 %41
%90 = OpAccessChain %47 %35 %32 %91
OpStore %90 %86
%92 = OpFSub %58 %61 %76
%93 = OpFSub %58 %62 %77
%94 = OpFSub %58 %63 %78
%95 = OpBitwiseOr %26 %82 %38
%96 = OpIMul %26 %95 %44
%97 = OpBitcast %5 %92
%98 = OpBitcast %5 %93
%99 = OpBitcast %5 %94
%100 = OpAccessChain %47 %35 %32 %96
OpStore %100 %97
%102 = OpIAdd %26 %96 %38
%101 = OpAccessChain %47 %35 %32 %102
OpStore %101 %98
%104 = OpIAdd %26 %96 %41
%103 = OpAccessChain %47 %35 %32 %104
OpStore %103 %99
%105 = OpFMul %58 %76 %61
%106 = OpFMul %58 %77 %62
%107 = OpFMul %58 %78 %63
%108 = OpBitwiseOr %26 %82 %41
%109 = OpIMul %26 %108 %44
%110 = OpBitcast %5 %105
%111 = OpBitcast %5 %106
%112 = OpBitcast %5 %107
%113 = OpAccessChain %47 %35 %32 %109
OpStore %113 %110
%115 = OpIAdd %26 %109 %38
%114 = OpAccessChain %47 %35 %32 %115
OpStore %114 %111
%117 = OpIAdd %26 %109 %41
%116 = OpAccessChain %47 %35 %32 %117
OpStore %116 %112
%118 = OpFDiv %58 %61 %76
%119 = OpFDiv %58 %62 %77
%120 = OpFDiv %58 %63 %78
%121 = OpBitwiseOr %26 %82 %44
%122 = OpIMul %26 %121 %44
%123 = OpBitcast %5 %118
%124 = OpBitcast %5 %119
%125 = OpBitcast %5 %120
%126 = OpAccessChain %47 %35 %32 %122
OpStore %126 %123
%128 = OpIAdd %26 %122 %38
%127 = OpAccessChain %47 %35 %32 %128
OpStore %127 %124
%130 = OpIAdd %26 %122 %41
%129 = OpAccessChain %47 %35 %32 %130
OpStore %129 %125
%131 = OpIMul %26 %33 %132
%133 = OpIMul %26 %33 %44
%134 = OpAccessChain %47 %43 %32 %133
%135 = OpLoad %5 %134
%137 = OpIAdd %26 %133 %38
%136 = OpAccessChain %47 %43 %32 %137
%138 = OpLoad %5 %136
%140 = OpCompositeConstruct %139 %135 %138
%142 = OpBitcast %141 %140
%143 = OpCompositeExtract %58 %142 0
%144 = OpCompositeExtract %58 %142 1
%145 = OpShiftLeftLogical %26 %33 %44
%146 = OpBitcast %5 %143
%147 = OpBitcast %5 %144
%148 = OpBitcast %5 %63
%149 = OpAccessChain %47 %40 %32 %33
OpStore %149 %146
%151 = OpIAdd %26 %33 %38
%150 = OpAccessChain %47 %40 %32 %151
OpStore %150 %147
%153 = OpIAdd %26 %33 %41
%152 = OpAccessChain %47 %40 %32 %153
OpStore %152 %148
OpReturn
OpFunctionEnd
#endif
