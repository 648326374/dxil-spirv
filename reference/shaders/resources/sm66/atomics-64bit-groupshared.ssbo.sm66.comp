#version 460
#extension GL_ARB_gpu_shader_int64 : require
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

struct CmpXchgResult
{
    uint64_t _m0;
    bool _m1;
};

layout(set = 0, binding = 0, std430) writeonly buffer SSBO
{
    uint _m0[];
} _9;

layout(set = 0, binding = 0, std430) writeonly buffer SSBO_64bit
{
    uint64_t _m0[];
} _14;

shared uint64_t _18[4];

void main()
{
    bool _27 = gl_GlobalInvocationID.x < 4u;
    if (_27)
    {
        _18[gl_GlobalInvocationID.x] = 0ul;
    }
    barrier();
    uint _33 = gl_GlobalInvocationID.x & 3u;
    uint64_t _35 = uint64_t(gl_GlobalInvocationID.x);
    uint64_t _37 = atomicAdd(_18[_33], _35);
    uint64_t _38 = atomicAnd(_18[_33], _35);
    uint64_t _39 = atomicOr(_18[_33], _35);
    uint64_t _40 = atomicXor(_18[_33], _35);
    uint64_t _41 = atomicMin(_18[_33], _35);
    uint64_t _42 = atomicMax(_18[_33], _35);
    uint64_t _43 = atomicMin(_18[_33], _35);
    uint64_t _44 = atomicMax(_18[_33], _35);
    uint64_t _45 = atomicExchange(_18[_33], _35);
    uint64_t _46 = atomicCompSwap(_18[_33], 10ul, _45);
    uint64_t _51 = atomicCompSwap(_18[_33], 20ul, _35);
    uint64_t _55 = atomicAdd(_18[_33], _35);
    uint64_t _56 = atomicAdd(_18[_33], _35);
    barrier();
    if (_27)
    {
        _14._m0[gl_GlobalInvocationID.x] = _18[gl_GlobalInvocationID.x];
    }
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 68
; Schema: 0
OpCapability Shader
OpCapability Int64
OpCapability Int64Atomics
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %21
OpExecutionMode %3 LocalSize 128 1 1
OpName %3 "main"
OpName %7 "SSBO"
OpName %12 "SSBO_64bit"
OpName %49 "CmpXchgResult"
OpDecorate %6 ArrayStride 4
OpMemberDecorate %7 0 Offset 0
OpDecorate %7 Block
OpDecorate %11 ArrayStride 8
OpMemberDecorate %12 0 Offset 0
OpDecorate %12 Block
OpDecorate %9 DescriptorSet 0
OpDecorate %9 Binding 0
OpDecorate %9 NonReadable
OpDecorate %9 Aliased
OpDecorate %14 DescriptorSet 0
OpDecorate %14 Binding 0
OpDecorate %14 NonReadable
OpDecorate %14 Aliased
OpDecorate %21 BuiltIn GlobalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeRuntimeArray %5
%7 = OpTypeStruct %6
%8 = OpTypePointer StorageBuffer %7
%9 = OpVariable %8 StorageBuffer
%10 = OpTypeInt 64 0
%11 = OpTypeRuntimeArray %10
%12 = OpTypeStruct %11
%13 = OpTypePointer StorageBuffer %12
%14 = OpVariable %13 StorageBuffer
%15 = OpConstant %5 4
%16 = OpTypeArray %10 %15
%17 = OpTypePointer Workgroup %16
%18 = OpVariable %17 Workgroup
%19 = OpTypeVector %5 3
%20 = OpTypePointer Input %19
%21 = OpVariable %20 Input
%22 = OpTypePointer Input %5
%24 = OpConstant %5 0
%26 = OpTypeBool
%28 = OpTypePointer Workgroup %10
%30 = OpConstant %10 0
%31 = OpConstant %5 2
%32 = OpConstant %5 264
%34 = OpConstant %5 3
%47 = OpConstant %10 10
%49 = OpTypeStruct %10 %26
%52 = OpConstant %10 20
%60 = OpTypePointer StorageBuffer %10
%3 = OpFunction %1 None %2
%4 = OpLabel
OpBranch %62
%62 = OpLabel
%23 = OpAccessChain %22 %21 %24
%25 = OpLoad %5 %23
%27 = OpULessThan %26 %25 %15
OpSelectionMerge %64 None
OpBranchConditional %27 %63 %64
%63 = OpLabel
%29 = OpAccessChain %28 %18 %25
OpStore %29 %30
OpBranch %64
%64 = OpLabel
OpControlBarrier %31 %31 %32
%33 = OpBitwiseAnd %5 %25 %34
%35 = OpUConvert %10 %25
%36 = OpAccessChain %28 %18 %33
%37 = OpAtomicIAdd %10 %36 %31 %24 %35
%38 = OpAtomicAnd %10 %36 %31 %24 %35
%39 = OpAtomicOr %10 %36 %31 %24 %35
%40 = OpAtomicXor %10 %36 %31 %24 %35
%41 = OpAtomicSMin %10 %36 %31 %24 %35
%42 = OpAtomicSMax %10 %36 %31 %24 %35
%43 = OpAtomicSMin %10 %36 %31 %24 %35
%44 = OpAtomicSMax %10 %36 %31 %24 %35
%45 = OpAtomicExchange %10 %36 %31 %24 %35
%46 = OpAtomicCompareExchange %10 %36 %31 %24 %24 %45 %47
%48 = OpIEqual %26 %46 %47
%50 = OpCompositeConstruct %49 %46 %48
%51 = OpAtomicCompareExchange %10 %36 %31 %24 %24 %35 %52
%53 = OpIEqual %26 %51 %52
%54 = OpCompositeConstruct %49 %51 %53
%55 = OpAtomicIAdd %10 %36 %31 %24 %35
%56 = OpAtomicIAdd %10 %36 %31 %24 %35
OpControlBarrier %31 %31 %32
OpSelectionMerge %66 None
OpBranchConditional %27 %65 %66
%65 = OpLabel
%57 = OpAccessChain %28 %18 %25
%58 = OpLoad %10 %57
%59 = OpShiftLeftLogical %5 %25 %34
%61 = OpAccessChain %60 %14 %24 %25
OpStore %61 %58
OpBranch %66
%66 = OpLabel
OpReturn
OpFunctionEnd
#endif
