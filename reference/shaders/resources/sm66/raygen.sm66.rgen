#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require

struct _14
{
    vec4 _m0;
};

struct _17
{
    float _m0;
};

layout(set = 40, binding = 30) uniform accelerationStructureEXT AS;
layout(set = 20, binding = 10) uniform writeonly image2D IMG;
layout(location = 0) rayPayloadEXT _14 _16;
layout(location = 1) rayPayloadEXT _17 _19;

void main()
{
    traceRayEXT(AS, 0u, 0u, 0u, 0u, 0u, vec3(1.0, 2.0, 3.0), 1.0, vec3(0.0, 0.0, 1.0), 4.0, 0);
    traceRayEXT(AS, 0u, 1u, 0u, 0u, 0u, vec3(1.0, 2.0, 3.0), 1.0, vec3(0.0, 0.0, 1.0), 4.0, 1);
    imageStore(IMG, ivec2(uvec2(0u)), vec4(_16._m0.x + _19._m0, _16._m0.y + _19._m0, _16._m0.z + _19._m0, _16._m0.w + _19._m0));
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.4
; Generator: Unknown(30017); 21022
; Bound: 58
; Schema: 0
OpCapability Shader
OpCapability UniformBufferArrayDynamicIndexing
OpCapability SampledImageArrayDynamicIndexing
OpCapability StorageBufferArrayDynamicIndexing
OpCapability StorageImageArrayDynamicIndexing
OpCapability StorageImageWriteWithoutFormat
OpCapability RayTracingKHR
OpCapability RuntimeDescriptorArray
OpCapability UniformBufferArrayNonUniformIndexing
OpCapability SampledImageArrayNonUniformIndexing
OpCapability StorageBufferArrayNonUniformIndexing
OpCapability StorageImageArrayNonUniformIndexing
OpExtension "SPV_EXT_descriptor_indexing"
OpExtension "SPV_KHR_ray_tracing"
OpMemoryModel Logical GLSL450
OpEntryPoint RayGenerationNV %3 "main" %8 %12 %16 %19
OpName %3 "main"
OpName %8 "AS"
OpName %12 "IMG"
OpName %14 ""
OpName %17 ""
OpDecorate %8 DescriptorSet 40
OpDecorate %8 Binding 30
OpDecorate %12 DescriptorSet 20
OpDecorate %12 Binding 10
OpDecorate %12 NonReadable
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 1
%6 = OpTypeAccelerationStructureKHR
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%9 = OpTypeFloat 32
%10 = OpTypeImage %9 2D 0 0 0 2 Unknown
%11 = OpTypePointer UniformConstant %10
%12 = OpVariable %11 UniformConstant
%13 = OpTypeVector %9 4
%14 = OpTypeStruct %13
%15 = OpTypePointer RayPayloadNV %14
%16 = OpVariable %15 RayPayloadNV
%17 = OpTypeStruct %9
%18 = OpTypePointer RayPayloadNV %17
%19 = OpVariable %18 RayPayloadNV
%22 = OpTypeInt 32 0
%23 = OpConstant %22 0
%24 = OpConstant %9 1
%25 = OpConstant %9 0
%26 = OpConstant %9 2
%27 = OpConstant %9 3
%28 = OpConstant %9 4
%29 = OpTypeVector %9 3
%34 = OpConstant %22 1
%37 = OpTypePointer RayPayloadNV %13
%44 = OpTypePointer RayPayloadNV %9
%53 = OpTypeVector %22 2
%3 = OpFunction %1 None %2
%4 = OpLabel
OpBranch %56
%56 = OpLabel
%20 = OpLoad %6 %8
%21 = OpLoad %6 %8
%30 = OpCompositeConstruct %29 %24 %26 %27
%31 = OpCompositeConstruct %29 %25 %25 %24
OpTraceRayKHR %21 %23 %23 %23 %23 %23 %30 %24 %31 %28 %16
%32 = OpLoad %6 %8
%33 = OpLoad %6 %8
%35 = OpCompositeConstruct %29 %24 %26 %27
%36 = OpCompositeConstruct %29 %25 %25 %24
OpTraceRayKHR %33 %23 %34 %23 %23 %23 %35 %24 %36 %28 %19
%38 = OpInBoundsAccessChain %37 %16 %23
%39 = OpLoad %13 %38
%40 = OpCompositeExtract %9 %39 0
%41 = OpCompositeExtract %9 %39 1
%42 = OpCompositeExtract %9 %39 2
%43 = OpCompositeExtract %9 %39 3
%45 = OpInBoundsAccessChain %44 %19 %23
%46 = OpLoad %9 %45
%47 = OpFAdd %9 %40 %46
%48 = OpFAdd %9 %41 %46
%49 = OpFAdd %9 %42 %46
%50 = OpFAdd %9 %43 %46
%51 = OpLoad %10 %12
%52 = OpLoad %10 %12
%54 = OpCompositeConstruct %53 %23 %23
%55 = OpCompositeConstruct %13 %47 %48 %49 %50
OpImageWrite %52 %54 %55
OpReturn
OpFunctionEnd
#endif
