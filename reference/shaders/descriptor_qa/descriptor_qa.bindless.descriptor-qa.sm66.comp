#version 460
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_buffer_reference_uvec2 : require
#extension GL_EXT_samplerless_texture_functions : require
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(buffer_reference, buffer_reference_align = 4) buffer uintPointer
{
    uint value;
};

layout(set = 7, binding = 0, std430) readonly buffer AtomicCounters
{
    uvec2 counters[];
} _33;

layout(set = 5, binding = 0, std140) uniform BindlessCBV
{
    vec4 _m0[4096];
} _47[];

layout(set = 10, binding = 10, std430) buffer DescriptorHeapGlobalQAData
{
    uvec2 failed_shader_hash;
    uint failed_offset;
    uint failed_heap;
    uint failed_cookie;
    uint fault_atomic;
    uint failed_instruction;
    uint failed_descriptor_type_mask;
    uint actual_descriptor_type_mask;
    uint fault_type;
    uint live_status_table[];
} QAGlobalData;

layout(set = 10, binding = 11, std430) readonly buffer DescriptorHeapQAData
{
    uint descriptor_count;
    uint heap_index;
    uvec2 cookies_descriptor_info[];
} QAHeapData;

layout(push_constant, std430) uniform RootConstants
{
    uint _m0;
    uint _m1;
    uint _m2;
    uint _m3;
    uint _m4;
    uint _m5;
    uint _m6;
    uint _m7;
} registers;

layout(set = 0, binding = 0) uniform texture2D _13[];
layout(set = 1, binding = 0) uniform samplerBuffer _17[];
layout(set = 1, binding = 0) uniform usamplerBuffer _21[];
layout(set = 1, binding = 0) uniform usamplerBuffer _24[];
layout(set = 4, binding = 0, r32ui) uniform writeonly uimageBuffer _28[];
layout(set = 4, binding = 0, r32ui) uniform writeonly uimageBuffer _36[];
layout(set = 3, binding = 0) uniform writeonly image2D _40[];
layout(set = 2, binding = 0) uniform sampler _51[];

void descriptor_qa_report_fault(uint fault_type, uint heap_offset, uint cookie, uint heap_index, uint descriptor_type, uint actual_descriptor_type, uint instruction)
{
    uint _86 = atomicAdd(QAGlobalData.fault_atomic, 1u);
    if (_86 == 0u)
    {
        QAGlobalData.failed_cookie = cookie;
        QAGlobalData.failed_offset = heap_offset;
        QAGlobalData.failed_heap = heap_index;
        QAGlobalData.failed_descriptor_type_mask = descriptor_type;
        QAGlobalData.actual_descriptor_type_mask = actual_descriptor_type;
        QAGlobalData.failed_instruction = instruction;
        QAGlobalData.failed_shader_hash = uvec2(3735928559u, 0u);
        memoryBarrierBuffer();
        QAGlobalData.fault_type = fault_type;
    }
}

uint descriptor_qa_check(uint heap_offset, uint descriptor_type_mask, uint instruction)
{
    uint _119 = QAHeapData.descriptor_count;
    uint _121 = QAHeapData.heap_index;
    uvec2 _123 = QAHeapData.cookies_descriptor_info[heap_offset];
    uint _131 = QAGlobalData.live_status_table[_123.x >> 5u];
    uint _142 = (uint(heap_offset >= _119) | (((_123.y & descriptor_type_mask) == descriptor_type_mask) ? 0u : 2u)) | (((_131 & (1u << (_123.x & 31u))) != 0u) ? 0u : 4u);
    if (_142 != 0u)
    {
        descriptor_qa_report_fault(_142, heap_offset, _123.x, _121, descriptor_type_mask, _123.y, instruction);
        return _119;
    }
    return heap_offset;
}

uint RobustPhysicalAtomicCounter(uvec2 _373, uint _374, uint _375)
{
    uint _388;
    if (any(notEqual(_373, uvec2(0u))))
    {
        uint _386 = atomicAdd(uintPointer(_373), _374);
        _388 = _386 + _375;
    }
    else
    {
        _388 = 0u;
    }
    return _388;
}

void main()
{
    float _153;
    if (gl_GlobalInvocationID.x > 2u)
    {
        uint _68 = descriptor_qa_check(registers._m5, 4u, 1u);
        _153 = _47[_68]._m0[0u].x;
    }
    else
    {
        _153 = 0.0;
    }
    float _166;
    if (gl_GlobalInvocationID.x > 3u)
    {
        uint _161 = descriptor_qa_check(registers._m5 + (gl_GlobalInvocationID.x + 1u), 4u, 2u);
        _166 = _47[_161]._m0[0u].x + _153;
    }
    else
    {
        _166 = _153;
    }
    float _187;
    if (gl_GlobalInvocationID.x > 4u)
    {
        uint _172 = descriptor_qa_check(registers._m0, 1u, 3u);
        _187 = textureLod(sampler2D(_13[_172], _51[registers._m2]), vec2(0.5), 0.0).x + _166;
    }
    else
    {
        _187 = _166;
    }
    float _201;
    if (gl_GlobalInvocationID.x > 5u)
    {
        uint _195 = descriptor_qa_check(registers._m0 + ((gl_GlobalInvocationID.x & 1u) + 1u), 1u, 4u);
        _201 = texelFetch(_13[_195], ivec2(uvec2(0u, gl_GlobalInvocationID.x)), int(0u)).x + _187;
    }
    else
    {
        _201 = _187;
    }
    float _214;
    if (gl_GlobalInvocationID.x > 6u)
    {
        uint _208 = descriptor_qa_check(registers._m1 + 3u, 16u, 5u);
        _214 = texelFetch(_17[_208], int(gl_GlobalInvocationID.x)).x + _201;
    }
    else
    {
        _214 = _201;
    }
    float _227;
    if (gl_GlobalInvocationID.x > 7u)
    {
        uint _222 = descriptor_qa_check(registers._m1 + ((gl_GlobalInvocationID.x & 1u) + 4u), 16u, 6u);
        _227 = texelFetch(_17[_222], int(gl_GlobalInvocationID.x)).x + _214;
    }
    else
    {
        _227 = _214;
    }
    float _241;
    if (gl_GlobalInvocationID.x > 8u)
    {
        uint _234 = descriptor_qa_check(registers._m1 + 6u, 16u, 7u);
        _241 = uintBitsToFloat(texelFetch(_21[_234], int(gl_GlobalInvocationID.x)).x) + _227;
    }
    else
    {
        _241 = _227;
    }
    float _255;
    if (gl_GlobalInvocationID.x > 9u)
    {
        uint _249 = descriptor_qa_check(registers._m1 + ((gl_GlobalInvocationID.x & 1u) + 7u), 16u, 8u);
        _255 = uintBitsToFloat(texelFetch(_21[_249], int(gl_GlobalInvocationID.x)).x) + _241;
    }
    else
    {
        _255 = _241;
    }
    float _269;
    if (gl_GlobalInvocationID.x > 10u)
    {
        uint _263 = descriptor_qa_check(registers._m1 + 9u, 16u, 9u);
        _269 = uintBitsToFloat(texelFetch(_24[_263], int(gl_GlobalInvocationID.x)).x) + _255;
    }
    else
    {
        _269 = _255;
    }
    float _285;
    if (gl_GlobalInvocationID.x > 11u)
    {
        uint _278 = descriptor_qa_check(registers._m1 + ((gl_GlobalInvocationID.x & 1u) + 10u), 16u, 10u);
        _285 = uintBitsToFloat(texelFetch(_24[_278], int(gl_GlobalInvocationID.x >> 2u)).x) + _269;
    }
    else
    {
        _285 = _269;
    }
    if (gl_GlobalInvocationID.x > 1u)
    {
        uint _291 = descriptor_qa_check(registers._m4, 32u, 11u);
        imageStore(_28[_291], int(gl_GlobalInvocationID.x), uvec4(floatBitsToUint(_285)));
    }
    if (gl_GlobalInvocationID.x > 30u)
    {
        uint _304 = descriptor_qa_check(registers._m4 + ((gl_GlobalInvocationID.x & 1u) + 1u), 32u, 12u);
        imageStore(_28[_304], int(gl_GlobalInvocationID.x), uvec4(floatBitsToUint(_285)));
    }
    if (gl_GlobalInvocationID.x > 40u)
    {
        uint _317 = descriptor_qa_check(registers._m4 + 3u, 32u, 13u);
        imageStore(_36[_317], int(gl_GlobalInvocationID.x), uvec4(floatBitsToUint(_285)));
    }
    if (gl_GlobalInvocationID.x > 50u)
    {
        uint _331 = descriptor_qa_check(registers._m4 + ((gl_GlobalInvocationID.x & 1u) + 4u), 32u, 14u);
        imageStore(_36[_331], int(gl_GlobalInvocationID.x), uvec4(floatBitsToUint(_285)));
    }
    if (gl_GlobalInvocationID.x > 80u)
    {
        uint _342 = descriptor_qa_check(registers._m3 + 6u, 2u, 15u);
        imageStore(_40[_342], ivec2(uvec2(gl_GlobalInvocationID.x, 0u)), vec4(_285));
    }
    if (gl_GlobalInvocationID.x > 90u)
    {
        uint _355 = descriptor_qa_check(registers._m3 + ((gl_GlobalInvocationID.x & 1u) + 7u), 2u, 16u);
        imageStore(_40[_355], ivec2(uvec2(0u, gl_GlobalInvocationID.x)), vec4(_285));
    }
    uint _362 = descriptor_qa_check(registers._m4, 32u, 17u);
    uint _368 = descriptor_qa_check(registers._m4, 256u, 18u);
    uvec2 _371 = _33.counters[_368];
    uint _390 = RobustPhysicalAtomicCounter(_371, 1u, 0u);
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 425
; Schema: 0
OpCapability Shader
OpCapability UniformBufferArrayDynamicIndexing
OpCapability SampledImageArrayDynamicIndexing
OpCapability StorageImageArrayDynamicIndexing
OpCapability SampledBuffer
OpCapability ImageBuffer
OpCapability StorageImageWriteWithoutFormat
OpCapability RuntimeDescriptorArray
OpCapability UniformTexelBufferArrayDynamicIndexing
OpCapability StorageTexelBufferArrayDynamicIndexing
OpCapability PhysicalStorageBufferAddresses
OpExtension "SPV_EXT_descriptor_indexing"
OpExtension "SPV_KHR_physical_storage_buffer"
OpMemoryModel PhysicalStorageBuffer64 GLSL450
OpEntryPoint GLCompute %3 "main" %54
OpExecutionMode %3 LocalSize 1 1 1
OpName %3 "main"
OpName %6 "RootConstants"
OpName %8 "registers"
OpName %31 "AtomicCounters"
OpMemberName %31 0 "counters"
OpName %44 "BindlessCBV"
OpName %70 "DescriptorHeapGlobalQAData"
OpMemberName %70 0 "failed_shader_hash"
OpMemberName %70 1 "failed_offset"
OpMemberName %70 2 "failed_heap"
OpMemberName %70 3 "failed_cookie"
OpMemberName %70 4 "fault_atomic"
OpMemberName %70 5 "failed_instruction"
OpMemberName %70 6 "failed_descriptor_type_mask"
OpMemberName %70 7 "actual_descriptor_type_mask"
OpMemberName %70 8 "fault_type"
OpMemberName %70 9 "live_status_table"
OpName %72 "QAGlobalData"
OpName %81 "descriptor_qa_report_fault"
OpName %74 "fault_type"
OpName %75 "heap_offset"
OpName %76 "cookie"
OpName %77 "heap_index"
OpName %78 "descriptor_type"
OpName %79 "actual_descriptor_type"
OpName %80 "instruction"
OpName %109 "DescriptorHeapQAData"
OpMemberName %109 0 "descriptor_count"
OpMemberName %109 1 "heap_index"
OpMemberName %109 2 "cookies_descriptor_info"
OpName %111 "QAHeapData"
OpName %116 "descriptor_qa_check"
OpName %113 "heap_offset"
OpName %114 "descriptor_type_mask"
OpName %115 "instruction"
OpName %376 "RobustPhysicalAtomicCounter"
OpDecorate %6 Block
OpMemberDecorate %6 0 Offset 0
OpMemberDecorate %6 1 Offset 4
OpMemberDecorate %6 2 Offset 8
OpMemberDecorate %6 3 Offset 12
OpMemberDecorate %6 4 Offset 16
OpMemberDecorate %6 5 Offset 20
OpMemberDecorate %6 6 Offset 24
OpMemberDecorate %6 7 Offset 28
OpDecorate %13 DescriptorSet 0
OpDecorate %13 Binding 0
OpDecorate %17 DescriptorSet 1
OpDecorate %17 Binding 0
OpDecorate %21 DescriptorSet 1
OpDecorate %21 Binding 0
OpDecorate %24 DescriptorSet 1
OpDecorate %24 Binding 0
OpDecorate %28 DescriptorSet 4
OpDecorate %28 Binding 0
OpDecorate %28 NonReadable
OpDecorate %30 ArrayStride 8
OpDecorate %31 Block
OpMemberDecorate %31 0 Offset 0
OpMemberDecorate %31 0 NonWritable
OpDecorate %33 DescriptorSet 7
OpDecorate %33 Binding 0
OpDecorate %33 AliasedPointer
OpDecorate %36 DescriptorSet 4
OpDecorate %36 Binding 0
OpDecorate %36 NonReadable
OpDecorate %40 DescriptorSet 3
OpDecorate %40 Binding 0
OpDecorate %40 NonReadable
OpDecorate %43 ArrayStride 16
OpDecorate %44 Block
OpMemberDecorate %44 0 Offset 0
OpDecorate %47 DescriptorSet 5
OpDecorate %47 Binding 0
OpDecorate %51 DescriptorSet 2
OpDecorate %51 Binding 0
OpDecorate %54 BuiltIn GlobalInvocationId
OpDecorate %69 ArrayStride 4
OpMemberDecorate %70 0 Offset 0
OpMemberDecorate %70 1 Offset 8
OpMemberDecorate %70 2 Offset 12
OpMemberDecorate %70 3 Offset 16
OpMemberDecorate %70 4 Offset 20
OpMemberDecorate %70 5 Offset 24
OpMemberDecorate %70 6 Offset 28
OpMemberDecorate %70 7 Offset 32
OpMemberDecorate %70 8 Offset 36
OpMemberDecorate %70 9 Offset 40
OpDecorate %70 Block
OpDecorate %72 DescriptorSet 10
OpDecorate %72 Binding 10
OpDecorate %108 ArrayStride 8
OpMemberDecorate %109 0 Offset 0
OpMemberDecorate %109 1 Offset 4
OpMemberDecorate %109 2 Offset 8
OpDecorate %109 Block
OpDecorate %111 DescriptorSet 10
OpDecorate %111 Binding 11
OpDecorate %111 NonWritable
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeStruct %5 %5 %5 %5 %5 %5 %5 %5
%7 = OpTypePointer PushConstant %6
%8 = OpVariable %7 PushConstant
%9 = OpTypeFloat 32
%10 = OpTypeImage %9 2D 0 0 0 1 Unknown
%11 = OpTypeRuntimeArray %10
%12 = OpTypePointer UniformConstant %11
%13 = OpVariable %12 UniformConstant
%14 = OpTypeImage %9 Buffer 0 0 0 1 Unknown
%15 = OpTypeRuntimeArray %14
%16 = OpTypePointer UniformConstant %15
%17 = OpVariable %16 UniformConstant
%18 = OpTypeImage %5 Buffer 0 0 0 1 Unknown
%19 = OpTypeRuntimeArray %18
%20 = OpTypePointer UniformConstant %19
%21 = OpVariable %20 UniformConstant
%22 = OpTypeRuntimeArray %18
%23 = OpTypePointer UniformConstant %22
%24 = OpVariable %23 UniformConstant
%25 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%26 = OpTypeRuntimeArray %25
%27 = OpTypePointer UniformConstant %26
%28 = OpVariable %27 UniformConstant
%29 = OpTypeVector %5 2
%30 = OpTypeRuntimeArray %29
%31 = OpTypeStruct %30
%32 = OpTypePointer StorageBuffer %31
%33 = OpVariable %32 StorageBuffer
%34 = OpTypeRuntimeArray %25
%35 = OpTypePointer UniformConstant %34
%36 = OpVariable %35 UniformConstant
%37 = OpTypeImage %9 2D 0 0 0 2 Unknown
%38 = OpTypeRuntimeArray %37
%39 = OpTypePointer UniformConstant %38
%40 = OpVariable %39 UniformConstant
%41 = OpTypeVector %9 4
%42 = OpConstant %5 4096
%43 = OpTypeArray %41 %42
%44 = OpTypeStruct %43
%45 = OpTypeRuntimeArray %44
%46 = OpTypePointer Uniform %45
%47 = OpVariable %46 Uniform
%48 = OpTypeSampler
%49 = OpTypeRuntimeArray %48
%50 = OpTypePointer UniformConstant %49
%51 = OpVariable %50 UniformConstant
%52 = OpTypeVector %5 3
%53 = OpTypePointer Input %52
%54 = OpVariable %53 Input
%55 = OpTypePointer Input %5
%57 = OpConstant %5 0
%59 = OpTypeBool
%61 = OpConstant %5 2
%62 = OpTypePointer Uniform %44
%64 = OpTypePointer PushConstant %5
%66 = OpConstant %5 5
%69 = OpTypeRuntimeArray %5
%70 = OpTypeStruct %29 %5 %5 %5 %5 %5 %5 %5 %5 %69
%71 = OpTypePointer StorageBuffer %70
%72 = OpVariable %71 StorageBuffer
%73 = OpTypeFunction %1 %5 %5 %5 %5 %5 %5 %5
%83 = OpTypePointer StorageBuffer %5
%85 = OpConstant %5 4
%87 = OpConstant %5 1
%92 = OpConstant %5 3
%96 = OpConstant %5 6
%98 = OpConstant %5 7
%100 = OpConstant %5 3735928559
%101 = OpConstantComposite %29 %100 %57
%102 = OpTypePointer StorageBuffer %29
%104 = OpConstant %5 72
%106 = OpConstant %5 8
%108 = OpTypeRuntimeArray %29
%109 = OpTypeStruct %5 %5 %108
%110 = OpTypePointer StorageBuffer %109
%111 = OpVariable %110 StorageBuffer
%112 = OpTypeFunction %5 %5 %5 %5
%128 = OpConstant %5 31
%130 = OpConstant %5 9
%149 = OpTypePointer Uniform %41
%154 = OpConstant %9 0
%168 = OpTypePointer UniformConstant %10
%174 = OpTypePointer UniformConstant %48
%179 = OpTypeSampledImage %10
%181 = OpConstant %9 0.5
%183 = OpTypeVector %9 2
%203 = OpTypePointer UniformConstant %14
%209 = OpConstant %5 16
%229 = OpTypePointer UniformConstant %18
%236 = OpTypeVector %5 4
%257 = OpConstant %5 10
%271 = OpConstant %5 11
%287 = OpTypePointer UniformConstant %25
%292 = OpConstant %5 32
%297 = OpConstant %5 30
%305 = OpConstant %5 12
%310 = OpConstant %5 40
%318 = OpConstant %5 13
%322 = OpConstant %5 50
%332 = OpConstant %5 14
%336 = OpConstant %5 80
%337 = OpTypePointer UniformConstant %37
%343 = OpConstant %5 15
%348 = OpConstant %5 90
%363 = OpConstant %5 17
%369 = OpConstant %5 256
%370 = OpConstant %5 18
%372 = OpTypeFunction %5 %29 %5 %5
%380 = OpTypeVector %59 2
%381 = OpConstantNull %29
%384 = OpTypePointer PhysicalStorageBuffer %5
%3 = OpFunction %1 None %2
%4 = OpLabel
OpBranch %391
%391 = OpLabel
%56 = OpAccessChain %55 %54 %57
%58 = OpLoad %5 %56
%60 = OpUGreaterThan %59 %58 %61
OpSelectionMerge %393 None
OpBranchConditional %60 %392 %393
%392 = OpLabel
%65 = OpAccessChain %64 %8 %66
%67 = OpLoad %5 %65
%68 = OpFunctionCall %5 %116 %67 %85 %87
%63 = OpAccessChain %62 %47 %68
%150 = OpAccessChain %149 %63 %57 %57
%151 = OpLoad %41 %150
%152 = OpCompositeExtract %9 %151 0
OpBranch %393
%393 = OpLabel
%153 = OpPhi %9 %154 %391 %152 %392
%155 = OpUGreaterThan %59 %58 %92
OpSelectionMerge %395 None
OpBranchConditional %155 %394 %395
%394 = OpLabel
%156 = OpIAdd %5 %58 %87
%158 = OpAccessChain %64 %8 %66
%159 = OpLoad %5 %158
%160 = OpIAdd %5 %159 %156
%161 = OpFunctionCall %5 %116 %160 %85 %61
%157 = OpAccessChain %62 %47 %161
%162 = OpAccessChain %149 %157 %57 %57
%163 = OpLoad %41 %162
%164 = OpCompositeExtract %9 %163 0
%165 = OpFAdd %9 %164 %153
OpBranch %395
%395 = OpLabel
%166 = OpPhi %9 %153 %393 %165 %394
%167 = OpUGreaterThan %59 %58 %85
OpSelectionMerge %397 None
OpBranchConditional %167 %396 %397
%396 = OpLabel
%170 = OpAccessChain %64 %8 %57
%171 = OpLoad %5 %170
%172 = OpFunctionCall %5 %116 %171 %87 %92
%169 = OpAccessChain %168 %13 %172
%173 = OpLoad %10 %169
%176 = OpAccessChain %64 %8 %61
%177 = OpLoad %5 %176
%175 = OpAccessChain %174 %51 %177
%178 = OpLoad %48 %175
%180 = OpSampledImage %179 %173 %178
%184 = OpCompositeConstruct %183 %181 %181
%182 = OpImageSampleExplicitLod %41 %180 %184 Lod %154
%185 = OpCompositeExtract %9 %182 0
%186 = OpFAdd %9 %185 %166
OpBranch %397
%397 = OpLabel
%187 = OpPhi %9 %166 %395 %186 %396
%188 = OpUGreaterThan %59 %58 %66
OpSelectionMerge %399 None
OpBranchConditional %188 %398 %399
%398 = OpLabel
%189 = OpBitwiseAnd %5 %58 %87
%190 = OpIAdd %5 %189 %87
%192 = OpAccessChain %64 %8 %57
%193 = OpLoad %5 %192
%194 = OpIAdd %5 %193 %190
%195 = OpFunctionCall %5 %116 %194 %87 %85
%191 = OpAccessChain %168 %13 %195
%196 = OpLoad %10 %191
%198 = OpCompositeConstruct %29 %57 %58
%197 = OpImageFetch %41 %196 %198 Lod %57
%199 = OpCompositeExtract %9 %197 0
%200 = OpFAdd %9 %199 %187
OpBranch %399
%399 = OpLabel
%201 = OpPhi %9 %187 %397 %200 %398
%202 = OpUGreaterThan %59 %58 %96
OpSelectionMerge %401 None
OpBranchConditional %202 %400 %401
%400 = OpLabel
%205 = OpAccessChain %64 %8 %87
%206 = OpLoad %5 %205
%207 = OpIAdd %5 %206 %92
%208 = OpFunctionCall %5 %116 %207 %209 %66
%204 = OpAccessChain %203 %17 %208
%210 = OpLoad %14 %204
%211 = OpImageFetch %41 %210 %58
%212 = OpCompositeExtract %9 %211 0
%213 = OpFAdd %9 %212 %201
OpBranch %401
%401 = OpLabel
%214 = OpPhi %9 %201 %399 %213 %400
%215 = OpUGreaterThan %59 %58 %98
OpSelectionMerge %403 None
OpBranchConditional %215 %402 %403
%402 = OpLabel
%216 = OpBitwiseAnd %5 %58 %87
%217 = OpIAdd %5 %216 %85
%219 = OpAccessChain %64 %8 %87
%220 = OpLoad %5 %219
%221 = OpIAdd %5 %220 %217
%222 = OpFunctionCall %5 %116 %221 %209 %96
%218 = OpAccessChain %203 %17 %222
%223 = OpLoad %14 %218
%224 = OpImageFetch %41 %223 %58
%225 = OpCompositeExtract %9 %224 0
%226 = OpFAdd %9 %225 %214
OpBranch %403
%403 = OpLabel
%227 = OpPhi %9 %214 %401 %226 %402
%228 = OpUGreaterThan %59 %58 %106
OpSelectionMerge %405 None
OpBranchConditional %228 %404 %405
%404 = OpLabel
%231 = OpAccessChain %64 %8 %87
%232 = OpLoad %5 %231
%233 = OpIAdd %5 %232 %96
%234 = OpFunctionCall %5 %116 %233 %209 %98
%230 = OpAccessChain %229 %21 %234
%235 = OpLoad %18 %230
%237 = OpImageFetch %236 %235 %58
%238 = OpCompositeExtract %5 %237 0
%239 = OpBitcast %9 %238
%240 = OpFAdd %9 %239 %227
OpBranch %405
%405 = OpLabel
%241 = OpPhi %9 %227 %403 %240 %404
%242 = OpUGreaterThan %59 %58 %130
OpSelectionMerge %407 None
OpBranchConditional %242 %406 %407
%406 = OpLabel
%243 = OpBitwiseAnd %5 %58 %87
%244 = OpIAdd %5 %243 %98
%246 = OpAccessChain %64 %8 %87
%247 = OpLoad %5 %246
%248 = OpIAdd %5 %247 %244
%249 = OpFunctionCall %5 %116 %248 %209 %106
%245 = OpAccessChain %229 %21 %249
%250 = OpLoad %18 %245
%251 = OpImageFetch %236 %250 %58
%252 = OpCompositeExtract %5 %251 0
%253 = OpBitcast %9 %252
%254 = OpFAdd %9 %253 %241
OpBranch %407
%407 = OpLabel
%255 = OpPhi %9 %241 %405 %254 %406
%256 = OpUGreaterThan %59 %58 %257
OpSelectionMerge %409 None
OpBranchConditional %256 %408 %409
%408 = OpLabel
%258 = OpShiftLeftLogical %5 %58 %61
%260 = OpAccessChain %64 %8 %87
%261 = OpLoad %5 %260
%262 = OpIAdd %5 %261 %130
%263 = OpFunctionCall %5 %116 %262 %209 %130
%259 = OpAccessChain %229 %24 %263
%264 = OpLoad %18 %259
%265 = OpImageFetch %236 %264 %58
%266 = OpCompositeExtract %5 %265 0
%267 = OpBitcast %9 %266
%268 = OpFAdd %9 %267 %255
OpBranch %409
%409 = OpLabel
%269 = OpPhi %9 %255 %407 %268 %408
%270 = OpUGreaterThan %59 %58 %271
OpSelectionMerge %411 None
OpBranchConditional %270 %410 %411
%410 = OpLabel
%272 = OpBitwiseAnd %5 %58 %87
%273 = OpIAdd %5 %272 %257
%275 = OpAccessChain %64 %8 %87
%276 = OpLoad %5 %275
%277 = OpIAdd %5 %276 %273
%278 = OpFunctionCall %5 %116 %277 %209 %257
%274 = OpAccessChain %229 %24 %278
%279 = OpLoad %18 %274
%280 = OpShiftRightLogical %5 %58 %61
%281 = OpImageFetch %236 %279 %280
%282 = OpCompositeExtract %5 %281 0
%283 = OpBitcast %9 %282
%284 = OpFAdd %9 %283 %269
OpBranch %411
%411 = OpLabel
%285 = OpPhi %9 %269 %409 %284 %410
%286 = OpUGreaterThan %59 %58 %87
OpSelectionMerge %413 None
OpBranchConditional %286 %412 %413
%412 = OpLabel
%289 = OpAccessChain %64 %8 %85
%290 = OpLoad %5 %289
%291 = OpFunctionCall %5 %116 %290 %292 %271
%288 = OpAccessChain %287 %28 %291
%293 = OpLoad %25 %288
%294 = OpBitcast %5 %285
%295 = OpCompositeConstruct %236 %294 %294 %294 %294
OpImageWrite %293 %58 %295
OpBranch %413
%413 = OpLabel
%296 = OpUGreaterThan %59 %58 %297
OpSelectionMerge %415 None
OpBranchConditional %296 %414 %415
%414 = OpLabel
%298 = OpBitwiseAnd %5 %58 %87
%299 = OpIAdd %5 %298 %87
%301 = OpAccessChain %64 %8 %85
%302 = OpLoad %5 %301
%303 = OpIAdd %5 %302 %299
%304 = OpFunctionCall %5 %116 %303 %292 %305
%300 = OpAccessChain %287 %28 %304
%306 = OpLoad %25 %300
%307 = OpBitcast %5 %285
%308 = OpCompositeConstruct %236 %307 %307 %307 %307
OpImageWrite %306 %58 %308
OpBranch %415
%415 = OpLabel
%309 = OpUGreaterThan %59 %58 %310
OpSelectionMerge %417 None
OpBranchConditional %309 %416 %417
%416 = OpLabel
%311 = OpBitcast %5 %285
%312 = OpShiftLeftLogical %5 %58 %61
%314 = OpAccessChain %64 %8 %85
%315 = OpLoad %5 %314
%316 = OpIAdd %5 %315 %92
%317 = OpFunctionCall %5 %116 %316 %292 %318
%313 = OpAccessChain %287 %36 %317
%319 = OpLoad %25 %313
%320 = OpCompositeConstruct %236 %311 %311 %311 %311
OpImageWrite %319 %58 %320
OpBranch %417
%417 = OpLabel
%321 = OpUGreaterThan %59 %58 %322
OpSelectionMerge %419 None
OpBranchConditional %321 %418 %419
%418 = OpLabel
%323 = OpBitwiseAnd %5 %58 %87
%324 = OpBitcast %5 %285
%325 = OpShiftLeftLogical %5 %58 %61
%326 = OpIAdd %5 %323 %85
%328 = OpAccessChain %64 %8 %85
%329 = OpLoad %5 %328
%330 = OpIAdd %5 %329 %326
%331 = OpFunctionCall %5 %116 %330 %292 %332
%327 = OpAccessChain %287 %36 %331
%333 = OpLoad %25 %327
%334 = OpCompositeConstruct %236 %324 %324 %324 %324
OpImageWrite %333 %58 %334
OpBranch %419
%419 = OpLabel
%335 = OpUGreaterThan %59 %58 %336
OpSelectionMerge %421 None
OpBranchConditional %335 %420 %421
%420 = OpLabel
%339 = OpAccessChain %64 %8 %92
%340 = OpLoad %5 %339
%341 = OpIAdd %5 %340 %96
%342 = OpFunctionCall %5 %116 %341 %61 %343
%338 = OpAccessChain %337 %40 %342
%344 = OpLoad %37 %338
%345 = OpCompositeConstruct %29 %58 %57
%346 = OpCompositeConstruct %41 %285 %285 %285 %285
OpImageWrite %344 %345 %346
OpBranch %421
%421 = OpLabel
%347 = OpUGreaterThan %59 %58 %348
OpSelectionMerge %423 None
OpBranchConditional %347 %422 %423
%422 = OpLabel
%349 = OpBitwiseAnd %5 %58 %87
%350 = OpIAdd %5 %349 %98
%352 = OpAccessChain %64 %8 %92
%353 = OpLoad %5 %352
%354 = OpIAdd %5 %353 %350
%355 = OpFunctionCall %5 %116 %354 %61 %209
%351 = OpAccessChain %337 %40 %355
%356 = OpLoad %37 %351
%357 = OpCompositeConstruct %29 %57 %58
%358 = OpCompositeConstruct %41 %285 %285 %285 %285
OpImageWrite %356 %357 %358
OpBranch %423
%423 = OpLabel
%360 = OpAccessChain %64 %8 %85
%361 = OpLoad %5 %360
%362 = OpFunctionCall %5 %116 %361 %292 %363
%359 = OpAccessChain %287 %28 %362
%364 = OpLoad %25 %359
%366 = OpAccessChain %64 %8 %85
%367 = OpLoad %5 %366
%368 = OpFunctionCall %5 %116 %367 %369 %370
%365 = OpAccessChain %102 %33 %57 %368
%371 = OpLoad %29 %365
%390 = OpFunctionCall %5 %376 %371 %87 %57
OpReturn
OpFunctionEnd
%81 = OpFunction %1 None %73
%74 = OpFunctionParameter %5
%75 = OpFunctionParameter %5
%76 = OpFunctionParameter %5
%77 = OpFunctionParameter %5
%78 = OpFunctionParameter %5
%79 = OpFunctionParameter %5
%80 = OpFunctionParameter %5
%82 = OpLabel
%84 = OpAccessChain %83 %72 %85
%86 = OpAtomicIAdd %5 %84 %87 %57 %87
%88 = OpIEqual %59 %86 %57
OpSelectionMerge %90 None
OpBranchConditional %88 %89 %90
%89 = OpLabel
%91 = OpAccessChain %83 %72 %92
OpStore %91 %76
%93 = OpAccessChain %83 %72 %87
OpStore %93 %75
%94 = OpAccessChain %83 %72 %61
OpStore %94 %77
%95 = OpAccessChain %83 %72 %96
OpStore %95 %78
%97 = OpAccessChain %83 %72 %98
OpStore %97 %79
%99 = OpAccessChain %83 %72 %66
OpStore %99 %80
%103 = OpAccessChain %102 %72 %57
OpStore %103 %101
OpMemoryBarrier %87 %104
%105 = OpAccessChain %83 %72 %106
OpStore %105 %74
OpBranch %90
%90 = OpLabel
OpReturn
OpFunctionEnd
%116 = OpFunction %5 None %112
%113 = OpFunctionParameter %5
%114 = OpFunctionParameter %5
%115 = OpFunctionParameter %5
%117 = OpLabel
%118 = OpAccessChain %83 %111 %57
%119 = OpLoad %5 %118
%120 = OpAccessChain %83 %111 %87
%121 = OpLoad %5 %120
%122 = OpAccessChain %102 %111 %61 %113
%123 = OpLoad %29 %122
%124 = OpCompositeExtract %5 %123 0
%126 = OpShiftRightLogical %5 %124 %66
%127 = OpBitwiseAnd %5 %124 %128
%125 = OpCompositeExtract %5 %123 1
%129 = OpAccessChain %83 %72 %130 %126
%131 = OpLoad %5 %129
%132 = OpShiftLeftLogical %5 %87 %127
%133 = OpBitwiseAnd %5 %131 %132
%134 = OpINotEqual %59 %133 %57
%135 = OpBitwiseAnd %5 %125 %114
%136 = OpIEqual %59 %135 %114
%137 = OpUGreaterThanEqual %59 %113 %119
%138 = OpSelect %5 %137 %87 %57
%139 = OpSelect %5 %136 %57 %61
%140 = OpSelect %5 %134 %57 %85
%141 = OpBitwiseOr %5 %138 %139
%142 = OpBitwiseOr %5 %141 %140
%143 = OpINotEqual %59 %142 %57
OpSelectionMerge %145 None
OpBranchConditional %143 %144 %145
%144 = OpLabel
%146 = OpFunctionCall %1 %81 %142 %113 %124 %121 %114 %125 %115
OpReturnValue %119
%145 = OpLabel
OpReturnValue %113
OpFunctionEnd
%376 = OpFunction %5 None %372
%373 = OpFunctionParameter %29
%374 = OpFunctionParameter %5
%375 = OpFunctionParameter %5
%377 = OpLabel
%382 = OpINotEqual %380 %373 %381
%383 = OpAny %59 %382
OpSelectionMerge %379 None
OpBranchConditional %383 %378 %379
%378 = OpLabel
%385 = OpBitcast %384 %373
%386 = OpAtomicIAdd %5 %385 %87 %57 %374
%387 = OpIAdd %5 %386 %375
OpBranch %379
%379 = OpLabel
%388 = OpPhi %5 %57 %377 %387 %378
OpReturnValue %388
OpFunctionEnd
#endif
