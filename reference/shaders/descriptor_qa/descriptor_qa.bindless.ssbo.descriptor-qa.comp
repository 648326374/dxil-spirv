#version 460
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_samplerless_texture_functions : require
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(buffer_reference) buffer AtomicCounter;
layout(buffer_reference, std430) buffer AtomicCounter
{
    uint _m0;
};

layout(set = 1, binding = 0, std430) restrict readonly buffer SSBO
{
    uint _m0[];
} _22[];

layout(set = 1, binding = 0, std430) restrict readonly buffer _24_27
{
    uint _m0[];
} _27[];

layout(set = 4, binding = 0, std430) writeonly buffer _29_32
{
    uint _m0[];
} _32[];

layout(set = 7, binding = 0, std430) readonly buffer AtomicCounters
{
    AtomicCounter counters[];
} _38;

layout(set = 4, binding = 0, std430) writeonly buffer _40_43
{
    uint _m0[];
} _43[];

layout(set = 5, binding = 0, std140) uniform BindlessCBV
{
    vec4 _m0[4096];
} _54[];

layout(set = 10, binding = 10, std430) buffer DescriptorHeapGlobalQAData
{
    uvec2 failed_shader_hash;
    uint failed_offset;
    uint failed_heap;
    uint failed_cookie;
    uint fault_atomic;
    uint failed_instruction;
    uint failed_descriptor_type_mask;
    uint actual_descriptor_type_mask;
    uint fault_type;
    uint live_status_table[];
} QAGlobalData;

layout(set = 10, binding = 11, std430) readonly buffer DescriptorHeapQAData
{
    uint descriptor_count;
    uint heap_index;
    uvec2 cookies_descriptor_info[];
} QAHeapData;

layout(push_constant, std430) uniform RootConstants
{
    uint _m0;
    uint _m1;
    uint _m2;
    uint _m3;
    uint _m4;
    uint _m5;
    uint _m6;
    uint _m7;
} registers;

layout(set = 0, binding = 0) uniform texture2D _13[];
layout(set = 1, binding = 0) uniform samplerBuffer _17[];
layout(set = 3, binding = 0) uniform writeonly image2D _47[];

void descriptor_qa_report_fault(uint fault_type, uint heap_offset, uint cookie, uint heap_index, uint descriptor_type, uint actual_descriptor_type, uint instruction)
{
    uint _90 = atomicAdd(QAGlobalData.fault_atomic, 1u);
    if (_90 == 0u)
    {
        QAGlobalData.failed_cookie = cookie;
        QAGlobalData.failed_offset = heap_offset;
        QAGlobalData.failed_heap = heap_index;
        QAGlobalData.failed_descriptor_type_mask = descriptor_type;
        QAGlobalData.actual_descriptor_type_mask = actual_descriptor_type;
        QAGlobalData.failed_instruction = instruction;
        QAGlobalData.failed_shader_hash = uvec2(3735928559u, 0u);
        memoryBarrierBuffer();
        QAGlobalData.fault_type = fault_type;
    }
}

uint descriptor_qa_check(uint heap_offset, uint descriptor_type_mask, uint instruction)
{
    uint _123 = QAHeapData.descriptor_count;
    uint _125 = QAHeapData.heap_index;
    uvec2 _127 = QAHeapData.cookies_descriptor_info[heap_offset];
    uint _135 = QAGlobalData.live_status_table[_127.x >> 5u];
    uint _146 = (uint(heap_offset >= _123) | (((_127.y & descriptor_type_mask) == descriptor_type_mask) ? 0u : 2u)) | (((_135 & (1u << (_127.x & 31u))) != 0u) ? 0u : 4u);
    if (_146 != 0u)
    {
        descriptor_qa_report_fault(_146, heap_offset, _127.x, _125, descriptor_type_mask, _127.y, instruction);
        return _123;
    }
    return heap_offset;
}

void main()
{
    float _157;
    if (gl_GlobalInvocationID.x > 2u)
    {
        uint _71 = descriptor_qa_check(registers._m5, 4u, 1u);
        _157 = _54[_71]._m0[0u].x;
    }
    else
    {
        _157 = 0.0;
    }
    float _170;
    if (gl_GlobalInvocationID.x > 3u)
    {
        uint _165 = descriptor_qa_check(registers._m5 + (gl_GlobalInvocationID.x + 1u), 4u, 2u);
        _170 = _54[_165]._m0[0u].x + _157;
    }
    else
    {
        _170 = _157;
    }
    float _182;
    if (gl_GlobalInvocationID.x > 4u)
    {
        uint _176 = descriptor_qa_check(registers._m0, 1u, 3u);
        _182 = texelFetch(_13[_176], ivec2(uvec2(gl_GlobalInvocationID.x, 0u)), int(0u)).x + _170;
    }
    else
    {
        _182 = _170;
    }
    float _196;
    if (gl_GlobalInvocationID.x > 5u)
    {
        uint _190 = descriptor_qa_check(registers._m0 + ((gl_GlobalInvocationID.x & 1u) + 1u), 1u, 4u);
        _196 = texelFetch(_13[_190], ivec2(uvec2(0u, gl_GlobalInvocationID.x)), int(0u)).x + _182;
    }
    else
    {
        _196 = _182;
    }
    float _209;
    if (gl_GlobalInvocationID.x > 6u)
    {
        uint _203 = descriptor_qa_check(registers._m1 + 3u, 16u, 5u);
        _209 = texelFetch(_17[_203], int(gl_GlobalInvocationID.x)).x + _196;
    }
    else
    {
        _209 = _196;
    }
    float _222;
    if (gl_GlobalInvocationID.x > 7u)
    {
        uint _217 = descriptor_qa_check(registers._m1 + ((gl_GlobalInvocationID.x & 1u) + 4u), 16u, 6u);
        _222 = texelFetch(_17[_217], int(gl_GlobalInvocationID.x)).x + _209;
    }
    else
    {
        _222 = _209;
    }
    float _234;
    if (gl_GlobalInvocationID.x > 8u)
    {
        uint _229 = descriptor_qa_check(registers._m1 + 6u, 8u, 7u);
        _234 = uintBitsToFloat(_22[_229]._m0[gl_GlobalInvocationID.x]) + _222;
    }
    else
    {
        _234 = _222;
    }
    float _247;
    if (gl_GlobalInvocationID.x > 9u)
    {
        uint _242 = descriptor_qa_check(registers._m1 + ((gl_GlobalInvocationID.x & 1u) + 7u), 8u, 8u);
        _247 = uintBitsToFloat(_22[_242]._m0[gl_GlobalInvocationID.x]) + _234;
    }
    else
    {
        _247 = _234;
    }
    float _261;
    if (gl_GlobalInvocationID.x > 10u)
    {
        uint _255 = descriptor_qa_check(registers._m1 + 9u, 8u, 9u);
        _261 = uintBitsToFloat(_27[_255]._m0[gl_GlobalInvocationID.x]) + _247;
    }
    else
    {
        _261 = _247;
    }
    float _276;
    if (gl_GlobalInvocationID.x > 11u)
    {
        uint _270 = descriptor_qa_check(registers._m1 + ((gl_GlobalInvocationID.x & 1u) + 10u), 8u, 10u);
        _276 = uintBitsToFloat(_27[_270]._m0[gl_GlobalInvocationID.x >> 2u]) + _261;
    }
    else
    {
        _276 = _261;
    }
    if (gl_GlobalInvocationID.x > 1u)
    {
        uint _282 = descriptor_qa_check(registers._m4, 8u, 11u);
        uint _287 = descriptor_qa_check(registers._m4, 256u, 12u);
        _32[_282]._m0[gl_GlobalInvocationID.x] = floatBitsToUint(_276);
    }
    if (gl_GlobalInvocationID.x > 30u)
    {
        uint _301 = descriptor_qa_check(registers._m4 + ((gl_GlobalInvocationID.x & 1u) + 1u), 8u, 13u);
        _32[_301]._m0[gl_GlobalInvocationID.x] = floatBitsToUint(_276);
    }
    if (gl_GlobalInvocationID.x > 40u)
    {
        uint _312 = descriptor_qa_check(registers._m4 + 3u, 8u, 14u);
        _43[_312]._m0[gl_GlobalInvocationID.x] = floatBitsToUint(_276);
    }
    if (gl_GlobalInvocationID.x > 50u)
    {
        uint _327 = descriptor_qa_check(registers._m4 + ((gl_GlobalInvocationID.x & 1u) + 4u), 8u, 15u);
        _43[_327]._m0[gl_GlobalInvocationID.x] = floatBitsToUint(_276);
    }
    if (gl_GlobalInvocationID.x > 80u)
    {
        uint _337 = descriptor_qa_check(registers._m3 + 6u, 2u, 16u);
        imageStore(_47[_337], ivec2(uvec2(gl_GlobalInvocationID.x, 0u)), vec4(_276));
    }
    if (gl_GlobalInvocationID.x > 90u)
    {
        uint _349 = descriptor_qa_check(registers._m3 + ((gl_GlobalInvocationID.x & 1u) + 7u), 2u, 17u);
        imageStore(_47[_349], ivec2(uvec2(0u, gl_GlobalInvocationID.x)), vec4(_276));
    }
    uint _357 = descriptor_qa_check(registers._m4, 8u, 18u);
    uint _362 = descriptor_qa_check(registers._m4, 256u, 19u);
    uint _367 = atomicAdd(_38.counters[_362]._m0, 1u);
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 402
; Schema: 0
OpCapability Shader
OpCapability UniformBufferArrayDynamicIndexing
OpCapability SampledImageArrayDynamicIndexing
OpCapability StorageBufferArrayDynamicIndexing
OpCapability StorageImageArrayDynamicIndexing
OpCapability SampledBuffer
OpCapability StorageImageWriteWithoutFormat
OpCapability RuntimeDescriptorArray
OpCapability UniformTexelBufferArrayDynamicIndexing
OpCapability PhysicalStorageBufferAddresses
OpExtension "SPV_EXT_descriptor_indexing"
OpExtension "SPV_KHR_physical_storage_buffer"
OpMemoryModel PhysicalStorageBuffer64 GLSL450
OpEntryPoint GLCompute %3 "main" %57
OpExecutionMode %3 LocalSize 1 1 1
OpName %3 "main"
OpName %6 "RootConstants"
OpName %8 "registers"
OpName %19 "SSBO"
OpName %24 "SSBO"
OpName %29 "SSBO"
OpName %33 "AtomicCounter"
OpName %36 "AtomicCounters"
OpMemberName %36 0 "counters"
OpName %40 "SSBO"
OpName %51 "BindlessCBV"
OpName %74 "DescriptorHeapGlobalQAData"
OpMemberName %74 0 "failed_shader_hash"
OpMemberName %74 1 "failed_offset"
OpMemberName %74 2 "failed_heap"
OpMemberName %74 3 "failed_cookie"
OpMemberName %74 4 "fault_atomic"
OpMemberName %74 5 "failed_instruction"
OpMemberName %74 6 "failed_descriptor_type_mask"
OpMemberName %74 7 "actual_descriptor_type_mask"
OpMemberName %74 8 "fault_type"
OpMemberName %74 9 "live_status_table"
OpName %76 "QAGlobalData"
OpName %85 "descriptor_qa_report_fault"
OpName %78 "fault_type"
OpName %79 "heap_offset"
OpName %80 "cookie"
OpName %81 "heap_index"
OpName %82 "descriptor_type"
OpName %83 "actual_descriptor_type"
OpName %84 "instruction"
OpName %113 "DescriptorHeapQAData"
OpMemberName %113 0 "descriptor_count"
OpMemberName %113 1 "heap_index"
OpMemberName %113 2 "cookies_descriptor_info"
OpName %115 "QAHeapData"
OpName %120 "descriptor_qa_check"
OpName %117 "heap_offset"
OpName %118 "descriptor_type_mask"
OpName %119 "instruction"
OpDecorate %6 Block
OpMemberDecorate %6 0 Offset 0
OpMemberDecorate %6 1 Offset 4
OpMemberDecorate %6 2 Offset 8
OpMemberDecorate %6 3 Offset 12
OpMemberDecorate %6 4 Offset 16
OpMemberDecorate %6 5 Offset 20
OpMemberDecorate %6 6 Offset 24
OpMemberDecorate %6 7 Offset 28
OpDecorate %13 DescriptorSet 0
OpDecorate %13 Binding 0
OpDecorate %17 DescriptorSet 1
OpDecorate %17 Binding 0
OpDecorate %18 ArrayStride 4
OpMemberDecorate %19 0 Offset 0
OpDecorate %19 Block
OpDecorate %22 DescriptorSet 1
OpDecorate %22 Binding 0
OpDecorate %22 NonWritable
OpDecorate %22 Restrict
OpDecorate %23 ArrayStride 4
OpMemberDecorate %24 0 Offset 0
OpDecorate %24 Block
OpDecorate %27 DescriptorSet 1
OpDecorate %27 Binding 0
OpDecorate %27 NonWritable
OpDecorate %27 Restrict
OpDecorate %28 ArrayStride 4
OpMemberDecorate %29 0 Offset 0
OpDecorate %29 Block
OpDecorate %32 DescriptorSet 4
OpDecorate %32 Binding 0
OpDecorate %32 NonReadable
OpDecorate %33 Block
OpMemberDecorate %33 0 Offset 0
OpDecorate %35 ArrayStride 8
OpDecorate %36 Block
OpMemberDecorate %36 0 Offset 0
OpMemberDecorate %36 0 NonWritable
OpDecorate %38 DescriptorSet 7
OpDecorate %38 Binding 0
OpDecorate %38 AliasedPointer
OpDecorate %39 ArrayStride 4
OpMemberDecorate %40 0 Offset 0
OpDecorate %40 Block
OpDecorate %43 DescriptorSet 4
OpDecorate %43 Binding 0
OpDecorate %43 NonReadable
OpDecorate %47 DescriptorSet 3
OpDecorate %47 Binding 0
OpDecorate %47 NonReadable
OpDecorate %50 ArrayStride 16
OpDecorate %51 Block
OpMemberDecorate %51 0 Offset 0
OpDecorate %54 DescriptorSet 5
OpDecorate %54 Binding 0
OpDecorate %57 BuiltIn GlobalInvocationId
OpDecorate %73 ArrayStride 4
OpMemberDecorate %74 0 Offset 0
OpMemberDecorate %74 1 Offset 8
OpMemberDecorate %74 2 Offset 12
OpMemberDecorate %74 3 Offset 16
OpMemberDecorate %74 4 Offset 20
OpMemberDecorate %74 5 Offset 24
OpMemberDecorate %74 6 Offset 28
OpMemberDecorate %74 7 Offset 32
OpMemberDecorate %74 8 Offset 36
OpMemberDecorate %74 9 Offset 40
OpDecorate %74 Block
OpDecorate %76 DescriptorSet 10
OpDecorate %76 Binding 10
OpDecorate %112 ArrayStride 8
OpMemberDecorate %113 0 Offset 0
OpMemberDecorate %113 1 Offset 4
OpMemberDecorate %113 2 Offset 8
OpDecorate %113 Block
OpDecorate %115 DescriptorSet 10
OpDecorate %115 Binding 11
OpDecorate %115 NonWritable
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeStruct %5 %5 %5 %5 %5 %5 %5 %5
%7 = OpTypePointer PushConstant %6
%8 = OpVariable %7 PushConstant
%9 = OpTypeFloat 32
%10 = OpTypeImage %9 2D 0 0 0 1 Unknown
%11 = OpTypeRuntimeArray %10
%12 = OpTypePointer UniformConstant %11
%13 = OpVariable %12 UniformConstant
%14 = OpTypeImage %9 Buffer 0 0 0 1 Unknown
%15 = OpTypeRuntimeArray %14
%16 = OpTypePointer UniformConstant %15
%17 = OpVariable %16 UniformConstant
%18 = OpTypeRuntimeArray %5
%19 = OpTypeStruct %18
%20 = OpTypeRuntimeArray %19
%21 = OpTypePointer StorageBuffer %20
%22 = OpVariable %21 StorageBuffer
%23 = OpTypeRuntimeArray %5
%24 = OpTypeStruct %23
%25 = OpTypeRuntimeArray %24
%26 = OpTypePointer StorageBuffer %25
%27 = OpVariable %26 StorageBuffer
%28 = OpTypeRuntimeArray %5
%29 = OpTypeStruct %28
%30 = OpTypeRuntimeArray %29
%31 = OpTypePointer StorageBuffer %30
%32 = OpVariable %31 StorageBuffer
%33 = OpTypeStruct %5
%34 = OpTypePointer PhysicalStorageBuffer %33
%35 = OpTypeRuntimeArray %34
%36 = OpTypeStruct %35
%37 = OpTypePointer StorageBuffer %36
%38 = OpVariable %37 StorageBuffer
%39 = OpTypeRuntimeArray %5
%40 = OpTypeStruct %39
%41 = OpTypeRuntimeArray %40
%42 = OpTypePointer StorageBuffer %41
%43 = OpVariable %42 StorageBuffer
%44 = OpTypeImage %9 2D 0 0 0 2 Unknown
%45 = OpTypeRuntimeArray %44
%46 = OpTypePointer UniformConstant %45
%47 = OpVariable %46 UniformConstant
%48 = OpTypeVector %9 4
%49 = OpConstant %5 4096
%50 = OpTypeArray %48 %49
%51 = OpTypeStruct %50
%52 = OpTypeRuntimeArray %51
%53 = OpTypePointer Uniform %52
%54 = OpVariable %53 Uniform
%55 = OpTypeVector %5 3
%56 = OpTypePointer Input %55
%57 = OpVariable %56 Input
%58 = OpTypePointer Input %5
%60 = OpConstant %5 0
%62 = OpTypeBool
%64 = OpConstant %5 2
%65 = OpTypePointer Uniform %51
%67 = OpTypePointer PushConstant %5
%69 = OpConstant %5 5
%72 = OpTypeVector %5 2
%73 = OpTypeRuntimeArray %5
%74 = OpTypeStruct %72 %5 %5 %5 %5 %5 %5 %5 %5 %73
%75 = OpTypePointer StorageBuffer %74
%76 = OpVariable %75 StorageBuffer
%77 = OpTypeFunction %1 %5 %5 %5 %5 %5 %5 %5
%87 = OpTypePointer StorageBuffer %5
%89 = OpConstant %5 4
%91 = OpConstant %5 1
%96 = OpConstant %5 3
%100 = OpConstant %5 6
%102 = OpConstant %5 7
%104 = OpConstant %5 3735928559
%105 = OpConstantComposite %72 %104 %60
%106 = OpTypePointer StorageBuffer %72
%108 = OpConstant %5 72
%110 = OpConstant %5 8
%112 = OpTypeRuntimeArray %72
%113 = OpTypeStruct %5 %5 %112
%114 = OpTypePointer StorageBuffer %113
%115 = OpVariable %114 StorageBuffer
%116 = OpTypeFunction %5 %5 %5 %5
%132 = OpConstant %5 31
%134 = OpConstant %5 9
%153 = OpTypePointer Uniform %48
%158 = OpConstant %9 0
%172 = OpTypePointer UniformConstant %10
%198 = OpTypePointer UniformConstant %14
%204 = OpConstant %5 16
%224 = OpTypePointer StorageBuffer %19
%249 = OpConstant %5 10
%250 = OpTypePointer StorageBuffer %24
%263 = OpConstant %5 11
%278 = OpTypePointer StorageBuffer %29
%283 = OpTypePointer StorageBuffer %34
%288 = OpConstant %5 256
%289 = OpConstant %5 12
%294 = OpConstant %5 30
%302 = OpConstant %5 13
%306 = OpConstant %5 40
%307 = OpTypePointer StorageBuffer %40
%313 = OpConstant %5 14
%318 = OpConstant %5 50
%328 = OpConstant %5 15
%331 = OpConstant %5 80
%332 = OpTypePointer UniformConstant %44
%342 = OpConstant %5 90
%350 = OpConstant %5 17
%358 = OpConstant %5 18
%363 = OpConstant %5 19
%365 = OpTypePointer PhysicalStorageBuffer %5
%3 = OpFunction %1 None %2
%4 = OpLabel
OpBranch %368
%368 = OpLabel
%59 = OpAccessChain %58 %57 %60
%61 = OpLoad %5 %59
%63 = OpUGreaterThan %62 %61 %64
OpSelectionMerge %370 None
OpBranchConditional %63 %369 %370
%369 = OpLabel
%68 = OpAccessChain %67 %8 %69
%70 = OpLoad %5 %68
%71 = OpFunctionCall %5 %120 %70 %89 %91
%66 = OpAccessChain %65 %54 %71
%154 = OpAccessChain %153 %66 %60 %60
%155 = OpLoad %48 %154
%156 = OpCompositeExtract %9 %155 0
OpBranch %370
%370 = OpLabel
%157 = OpPhi %9 %158 %368 %156 %369
%159 = OpUGreaterThan %62 %61 %96
OpSelectionMerge %372 None
OpBranchConditional %159 %371 %372
%371 = OpLabel
%160 = OpIAdd %5 %61 %91
%162 = OpAccessChain %67 %8 %69
%163 = OpLoad %5 %162
%164 = OpIAdd %5 %163 %160
%165 = OpFunctionCall %5 %120 %164 %89 %64
%161 = OpAccessChain %65 %54 %165
%166 = OpAccessChain %153 %161 %60 %60
%167 = OpLoad %48 %166
%168 = OpCompositeExtract %9 %167 0
%169 = OpFAdd %9 %168 %157
OpBranch %372
%372 = OpLabel
%170 = OpPhi %9 %157 %370 %169 %371
%171 = OpUGreaterThan %62 %61 %89
OpSelectionMerge %374 None
OpBranchConditional %171 %373 %374
%373 = OpLabel
%174 = OpAccessChain %67 %8 %60
%175 = OpLoad %5 %174
%176 = OpFunctionCall %5 %120 %175 %91 %96
%173 = OpAccessChain %172 %13 %176
%177 = OpLoad %10 %173
%179 = OpCompositeConstruct %72 %61 %60
%178 = OpImageFetch %48 %177 %179 Lod %60
%180 = OpCompositeExtract %9 %178 0
%181 = OpFAdd %9 %180 %170
OpBranch %374
%374 = OpLabel
%182 = OpPhi %9 %170 %372 %181 %373
%183 = OpUGreaterThan %62 %61 %69
OpSelectionMerge %376 None
OpBranchConditional %183 %375 %376
%375 = OpLabel
%184 = OpBitwiseAnd %5 %61 %91
%185 = OpIAdd %5 %184 %91
%187 = OpAccessChain %67 %8 %60
%188 = OpLoad %5 %187
%189 = OpIAdd %5 %188 %185
%190 = OpFunctionCall %5 %120 %189 %91 %89
%186 = OpAccessChain %172 %13 %190
%191 = OpLoad %10 %186
%193 = OpCompositeConstruct %72 %60 %61
%192 = OpImageFetch %48 %191 %193 Lod %60
%194 = OpCompositeExtract %9 %192 0
%195 = OpFAdd %9 %194 %182
OpBranch %376
%376 = OpLabel
%196 = OpPhi %9 %182 %374 %195 %375
%197 = OpUGreaterThan %62 %61 %100
OpSelectionMerge %378 None
OpBranchConditional %197 %377 %378
%377 = OpLabel
%200 = OpAccessChain %67 %8 %91
%201 = OpLoad %5 %200
%202 = OpIAdd %5 %201 %96
%203 = OpFunctionCall %5 %120 %202 %204 %69
%199 = OpAccessChain %198 %17 %203
%205 = OpLoad %14 %199
%206 = OpImageFetch %48 %205 %61
%207 = OpCompositeExtract %9 %206 0
%208 = OpFAdd %9 %207 %196
OpBranch %378
%378 = OpLabel
%209 = OpPhi %9 %196 %376 %208 %377
%210 = OpUGreaterThan %62 %61 %102
OpSelectionMerge %380 None
OpBranchConditional %210 %379 %380
%379 = OpLabel
%211 = OpBitwiseAnd %5 %61 %91
%212 = OpIAdd %5 %211 %89
%214 = OpAccessChain %67 %8 %91
%215 = OpLoad %5 %214
%216 = OpIAdd %5 %215 %212
%217 = OpFunctionCall %5 %120 %216 %204 %100
%213 = OpAccessChain %198 %17 %217
%218 = OpLoad %14 %213
%219 = OpImageFetch %48 %218 %61
%220 = OpCompositeExtract %9 %219 0
%221 = OpFAdd %9 %220 %209
OpBranch %380
%380 = OpLabel
%222 = OpPhi %9 %209 %378 %221 %379
%223 = OpUGreaterThan %62 %61 %110
OpSelectionMerge %382 None
OpBranchConditional %223 %381 %382
%381 = OpLabel
%226 = OpAccessChain %67 %8 %91
%227 = OpLoad %5 %226
%228 = OpIAdd %5 %227 %100
%229 = OpFunctionCall %5 %120 %228 %110 %102
%225 = OpAccessChain %224 %22 %229
%230 = OpAccessChain %87 %225 %60 %61
%231 = OpLoad %5 %230
%232 = OpBitcast %9 %231
%233 = OpFAdd %9 %232 %222
OpBranch %382
%382 = OpLabel
%234 = OpPhi %9 %222 %380 %233 %381
%235 = OpUGreaterThan %62 %61 %134
OpSelectionMerge %384 None
OpBranchConditional %235 %383 %384
%383 = OpLabel
%236 = OpBitwiseAnd %5 %61 %91
%237 = OpIAdd %5 %236 %102
%239 = OpAccessChain %67 %8 %91
%240 = OpLoad %5 %239
%241 = OpIAdd %5 %240 %237
%242 = OpFunctionCall %5 %120 %241 %110 %110
%238 = OpAccessChain %224 %22 %242
%243 = OpAccessChain %87 %238 %60 %61
%244 = OpLoad %5 %243
%245 = OpBitcast %9 %244
%246 = OpFAdd %9 %245 %234
OpBranch %384
%384 = OpLabel
%247 = OpPhi %9 %234 %382 %246 %383
%248 = OpUGreaterThan %62 %61 %249
OpSelectionMerge %386 None
OpBranchConditional %248 %385 %386
%385 = OpLabel
%252 = OpAccessChain %67 %8 %91
%253 = OpLoad %5 %252
%254 = OpIAdd %5 %253 %134
%255 = OpFunctionCall %5 %120 %254 %110 %134
%251 = OpAccessChain %250 %27 %255
%256 = OpShiftLeftLogical %5 %61 %64
%257 = OpAccessChain %87 %251 %60 %61
%258 = OpLoad %5 %257
%259 = OpBitcast %9 %258
%260 = OpFAdd %9 %259 %247
OpBranch %386
%386 = OpLabel
%261 = OpPhi %9 %247 %384 %260 %385
%262 = OpUGreaterThan %62 %61 %263
OpSelectionMerge %388 None
OpBranchConditional %262 %387 %388
%387 = OpLabel
%264 = OpBitwiseAnd %5 %61 %91
%265 = OpIAdd %5 %264 %249
%267 = OpAccessChain %67 %8 %91
%268 = OpLoad %5 %267
%269 = OpIAdd %5 %268 %265
%270 = OpFunctionCall %5 %120 %269 %110 %249
%266 = OpAccessChain %250 %27 %270
%271 = OpShiftRightLogical %5 %61 %64
%272 = OpAccessChain %87 %266 %60 %271
%273 = OpLoad %5 %272
%274 = OpBitcast %9 %273
%275 = OpFAdd %9 %274 %261
OpBranch %388
%388 = OpLabel
%276 = OpPhi %9 %261 %386 %275 %387
%277 = OpUGreaterThan %62 %61 %91
OpSelectionMerge %390 None
OpBranchConditional %277 %389 %390
%389 = OpLabel
%280 = OpAccessChain %67 %8 %89
%281 = OpLoad %5 %280
%282 = OpFunctionCall %5 %120 %281 %110 %263
%279 = OpAccessChain %278 %32 %282
%285 = OpAccessChain %67 %8 %89
%286 = OpLoad %5 %285
%287 = OpFunctionCall %5 %120 %286 %288 %289
%284 = OpAccessChain %283 %38 %60 %287
%290 = OpLoad %34 %284
%291 = OpBitcast %5 %276
%292 = OpAccessChain %87 %279 %60 %61
OpStore %292 %291
OpBranch %390
%390 = OpLabel
%293 = OpUGreaterThan %62 %61 %294
OpSelectionMerge %392 None
OpBranchConditional %293 %391 %392
%391 = OpLabel
%295 = OpBitwiseAnd %5 %61 %91
%296 = OpIAdd %5 %295 %91
%298 = OpAccessChain %67 %8 %89
%299 = OpLoad %5 %298
%300 = OpIAdd %5 %299 %296
%301 = OpFunctionCall %5 %120 %300 %110 %302
%297 = OpAccessChain %278 %32 %301
%303 = OpBitcast %5 %276
%304 = OpAccessChain %87 %297 %60 %61
OpStore %304 %303
OpBranch %392
%392 = OpLabel
%305 = OpUGreaterThan %62 %61 %306
OpSelectionMerge %394 None
OpBranchConditional %305 %393 %394
%393 = OpLabel
%309 = OpAccessChain %67 %8 %89
%310 = OpLoad %5 %309
%311 = OpIAdd %5 %310 %96
%312 = OpFunctionCall %5 %120 %311 %110 %313
%308 = OpAccessChain %307 %43 %312
%314 = OpBitcast %5 %276
%315 = OpShiftLeftLogical %5 %61 %64
%316 = OpAccessChain %87 %308 %60 %61
OpStore %316 %314
OpBranch %394
%394 = OpLabel
%317 = OpUGreaterThan %62 %61 %318
OpSelectionMerge %396 None
OpBranchConditional %317 %395 %396
%395 = OpLabel
%319 = OpBitwiseAnd %5 %61 %91
%320 = OpBitcast %5 %276
%321 = OpShiftLeftLogical %5 %61 %64
%322 = OpIAdd %5 %319 %89
%324 = OpAccessChain %67 %8 %89
%325 = OpLoad %5 %324
%326 = OpIAdd %5 %325 %322
%327 = OpFunctionCall %5 %120 %326 %110 %328
%323 = OpAccessChain %307 %43 %327
%329 = OpAccessChain %87 %323 %60 %61
OpStore %329 %320
OpBranch %396
%396 = OpLabel
%330 = OpUGreaterThan %62 %61 %331
OpSelectionMerge %398 None
OpBranchConditional %330 %397 %398
%397 = OpLabel
%334 = OpAccessChain %67 %8 %96
%335 = OpLoad %5 %334
%336 = OpIAdd %5 %335 %100
%337 = OpFunctionCall %5 %120 %336 %64 %204
%333 = OpAccessChain %332 %47 %337
%338 = OpLoad %44 %333
%339 = OpCompositeConstruct %72 %61 %60
%340 = OpCompositeConstruct %48 %276 %276 %276 %276
OpImageWrite %338 %339 %340
OpBranch %398
%398 = OpLabel
%341 = OpUGreaterThan %62 %61 %342
OpSelectionMerge %400 None
OpBranchConditional %341 %399 %400
%399 = OpLabel
%343 = OpBitwiseAnd %5 %61 %91
%344 = OpIAdd %5 %343 %102
%346 = OpAccessChain %67 %8 %96
%347 = OpLoad %5 %346
%348 = OpIAdd %5 %347 %344
%349 = OpFunctionCall %5 %120 %348 %64 %350
%345 = OpAccessChain %332 %47 %349
%351 = OpLoad %44 %345
%352 = OpCompositeConstruct %72 %60 %61
%353 = OpCompositeConstruct %48 %276 %276 %276 %276
OpImageWrite %351 %352 %353
OpBranch %400
%400 = OpLabel
%355 = OpAccessChain %67 %8 %89
%356 = OpLoad %5 %355
%357 = OpFunctionCall %5 %120 %356 %110 %358
%354 = OpAccessChain %278 %32 %357
%360 = OpAccessChain %67 %8 %89
%361 = OpLoad %5 %360
%362 = OpFunctionCall %5 %120 %361 %288 %363
%359 = OpAccessChain %283 %38 %60 %362
%364 = OpLoad %34 %359
%366 = OpAccessChain %365 %364 %60
%367 = OpAtomicIAdd %5 %366 %91 %60 %91
OpReturn
OpFunctionEnd
%85 = OpFunction %1 None %77
%78 = OpFunctionParameter %5
%79 = OpFunctionParameter %5
%80 = OpFunctionParameter %5
%81 = OpFunctionParameter %5
%82 = OpFunctionParameter %5
%83 = OpFunctionParameter %5
%84 = OpFunctionParameter %5
%86 = OpLabel
%88 = OpAccessChain %87 %76 %89
%90 = OpAtomicIAdd %5 %88 %91 %60 %91
%92 = OpIEqual %62 %90 %60
OpSelectionMerge %94 None
OpBranchConditional %92 %93 %94
%93 = OpLabel
%95 = OpAccessChain %87 %76 %96
OpStore %95 %80
%97 = OpAccessChain %87 %76 %91
OpStore %97 %79
%98 = OpAccessChain %87 %76 %64
OpStore %98 %81
%99 = OpAccessChain %87 %76 %100
OpStore %99 %82
%101 = OpAccessChain %87 %76 %102
OpStore %101 %83
%103 = OpAccessChain %87 %76 %69
OpStore %103 %84
%107 = OpAccessChain %106 %76 %60
OpStore %107 %105
OpMemoryBarrier %91 %108
%109 = OpAccessChain %87 %76 %110
OpStore %109 %78
OpBranch %94
%94 = OpLabel
OpReturn
OpFunctionEnd
%120 = OpFunction %5 None %116
%117 = OpFunctionParameter %5
%118 = OpFunctionParameter %5
%119 = OpFunctionParameter %5
%121 = OpLabel
%122 = OpAccessChain %87 %115 %60
%123 = OpLoad %5 %122
%124 = OpAccessChain %87 %115 %91
%125 = OpLoad %5 %124
%126 = OpAccessChain %106 %115 %64 %117
%127 = OpLoad %72 %126
%128 = OpCompositeExtract %5 %127 0
%130 = OpShiftRightLogical %5 %128 %69
%131 = OpBitwiseAnd %5 %128 %132
%129 = OpCompositeExtract %5 %127 1
%133 = OpAccessChain %87 %76 %134 %130
%135 = OpLoad %5 %133
%136 = OpShiftLeftLogical %5 %91 %131
%137 = OpBitwiseAnd %5 %135 %136
%138 = OpINotEqual %62 %137 %60
%139 = OpBitwiseAnd %5 %129 %118
%140 = OpIEqual %62 %139 %118
%141 = OpUGreaterThanEqual %62 %117 %123
%142 = OpSelect %5 %141 %91 %60
%143 = OpSelect %5 %140 %60 %64
%144 = OpSelect %5 %138 %60 %89
%145 = OpBitwiseOr %5 %142 %143
%146 = OpBitwiseOr %5 %145 %144
%147 = OpINotEqual %62 %146 %60
OpSelectionMerge %149 None
OpBranchConditional %147 %148 %149
%148 = OpLabel
%150 = OpFunctionCall %1 %85 %146 %117 %128 %125 %118 %129 %119
OpReturnValue %123
%149 = OpLabel
OpReturnValue %117
OpFunctionEnd
#endif
