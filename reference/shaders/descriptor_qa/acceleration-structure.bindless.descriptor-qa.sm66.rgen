#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_nonuniform_qualifier : require

struct _15
{
    vec4 _m0;
};

layout(set = 10, binding = 10, std430) buffer DescriptorHeapGlobalQAData
{
    uvec2 failed_shader_hash;
    uint failed_offset;
    uint failed_heap;
    uint failed_cookie;
    uint fault_atomic;
    uint failed_instruction;
    uint failed_descriptor_type_mask;
    uint actual_descriptor_type_mask;
    uint fault_type;
    uint live_status_table[];
} QAGlobalData;

layout(set = 10, binding = 11, std430) readonly buffer DescriptorHeapQAData
{
    uint descriptor_count;
    uint heap_index;
    uvec2 cookies_descriptor_info[];
} QAHeapData;

layout(push_constant, std430) uniform RootConstants
{
    uint _m0;
    uint _m1;
    uint _m2;
    uint _m3;
    uint _m4;
    uint _m5;
    uint _m6;
    uint _m7;
} registers;

layout(set = 0, binding = 0) uniform accelerationStructureEXT _12[];
layout(location = 0) rayPayloadEXT _15 _17;

void descriptor_qa_report_fault(uint fault_type, uint heap_offset, uint cookie, uint heap_index, uint descriptor_type, uint actual_descriptor_type, uint instruction)
{
    uint _52 = atomicAdd(QAGlobalData.fault_atomic, 1u);
    if (_52 == 0u)
    {
        QAGlobalData.failed_cookie = cookie;
        QAGlobalData.failed_offset = heap_offset;
        QAGlobalData.failed_heap = heap_index;
        QAGlobalData.failed_descriptor_type_mask = descriptor_type;
        QAGlobalData.actual_descriptor_type_mask = actual_descriptor_type;
        QAGlobalData.failed_instruction = instruction;
        QAGlobalData.failed_shader_hash = uvec2(3735928559u, 0u);
        memoryBarrierBuffer();
        QAGlobalData.fault_type = fault_type;
    }
}

uint descriptor_qa_check(uint heap_offset, uint descriptor_type_mask, uint instruction)
{
    uint _88 = QAHeapData.descriptor_count;
    uint _90 = QAHeapData.heap_index;
    uvec2 _92 = QAHeapData.cookies_descriptor_info[heap_offset];
    uint _100 = QAGlobalData.live_status_table[_92.x >> 5u];
    uint _111 = (uint(heap_offset >= _88) | (((_92.y & descriptor_type_mask) == descriptor_type_mask) ? 0u : 2u)) | (((_100 & (1u << (_92.x & 31u))) != 0u) ? 0u : 4u);
    if (_111 != 0u)
    {
        descriptor_qa_report_fault(_111, heap_offset, _92.x, _90, descriptor_type_mask, _92.y, instruction);
        return _88;
    }
    return heap_offset;
}

void main()
{
    _17._m0 = vec4(1.0, 2.0, 3.0, 4.0);
    uint _33 = descriptor_qa_check(registers._m0 + 10u, 64u, 1u);
    traceRayEXT(_12[_33], 0u, 0u, 0u, 0u, 0u, vec3(1.0, 2.0, 3.0), 1.0, vec3(0.0, 0.0, 1.0), 4.0, 0);
    uint _128 = descriptor_qa_check(registers._m0 + 3u, 64u, 2u);
    traceRayEXT(_12[_128], 0u, 0u, 0u, 0u, 0u, vec3(1.0, 2.0, 3.0), 1.0, vec3(0.0, 0.0, 1.0), 4.0, 0);
    uint _139 = descriptor_qa_check(registers._m0 + uint(int(_17._m0.w)), 64u, 3u);
    traceRayEXT(_12[nonuniformEXT(_139)], 0u, 0u, 0u, 0u, 0u, vec3(1.0, 2.0, 3.0), 1.0, vec3(0.0, 0.0, 1.0), 4.0, 0);
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.4
; Generator: Unknown(30017); 21022
; Bound: 145
; Schema: 0
OpCapability Shader
OpCapability UniformBufferArrayDynamicIndexing
OpCapability SampledImageArrayDynamicIndexing
OpCapability StorageBufferArrayDynamicIndexing
OpCapability StorageImageArrayDynamicIndexing
OpCapability RayTracingKHR
OpCapability RuntimeDescriptorArray
OpCapability UniformBufferArrayNonUniformIndexing
OpCapability SampledImageArrayNonUniformIndexing
OpCapability StorageBufferArrayNonUniformIndexing
OpCapability StorageImageArrayNonUniformIndexing
OpCapability PhysicalStorageBufferAddresses
OpExtension "SPV_EXT_descriptor_indexing"
OpExtension "SPV_KHR_physical_storage_buffer"
OpExtension "SPV_KHR_ray_tracing"
OpMemoryModel PhysicalStorageBuffer64 GLSL450
OpEntryPoint RayGenerationNV %3 "main" %8 %12 %17 %38 %80
OpName %3 "main"
OpName %6 "RootConstants"
OpName %8 "registers"
OpName %15 ""
OpName %36 "DescriptorHeapGlobalQAData"
OpMemberName %36 0 "failed_shader_hash"
OpMemberName %36 1 "failed_offset"
OpMemberName %36 2 "failed_heap"
OpMemberName %36 3 "failed_cookie"
OpMemberName %36 4 "fault_atomic"
OpMemberName %36 5 "failed_instruction"
OpMemberName %36 6 "failed_descriptor_type_mask"
OpMemberName %36 7 "actual_descriptor_type_mask"
OpMemberName %36 8 "fault_type"
OpMemberName %36 9 "live_status_table"
OpName %38 "QAGlobalData"
OpName %47 "descriptor_qa_report_fault"
OpName %40 "fault_type"
OpName %41 "heap_offset"
OpName %42 "cookie"
OpName %43 "heap_index"
OpName %44 "descriptor_type"
OpName %45 "actual_descriptor_type"
OpName %46 "instruction"
OpName %78 "DescriptorHeapQAData"
OpMemberName %78 0 "descriptor_count"
OpMemberName %78 1 "heap_index"
OpMemberName %78 2 "cookies_descriptor_info"
OpName %80 "QAHeapData"
OpName %85 "descriptor_qa_check"
OpName %82 "heap_offset"
OpName %83 "descriptor_type_mask"
OpName %84 "instruction"
OpDecorate %6 Block
OpMemberDecorate %6 0 Offset 0
OpMemberDecorate %6 1 Offset 4
OpMemberDecorate %6 2 Offset 8
OpMemberDecorate %6 3 Offset 12
OpMemberDecorate %6 4 Offset 16
OpMemberDecorate %6 5 Offset 20
OpMemberDecorate %6 6 Offset 24
OpMemberDecorate %6 7 Offset 28
OpDecorate %12 DescriptorSet 0
OpDecorate %12 Binding 0
OpDecorate %35 ArrayStride 4
OpMemberDecorate %36 0 Offset 0
OpMemberDecorate %36 1 Offset 8
OpMemberDecorate %36 2 Offset 12
OpMemberDecorate %36 3 Offset 16
OpMemberDecorate %36 4 Offset 20
OpMemberDecorate %36 5 Offset 24
OpMemberDecorate %36 6 Offset 28
OpMemberDecorate %36 7 Offset 32
OpMemberDecorate %36 8 Offset 36
OpMemberDecorate %36 9 Offset 40
OpDecorate %36 Block
OpDecorate %38 DescriptorSet 10
OpDecorate %38 Binding 10
OpDecorate %77 ArrayStride 8
OpMemberDecorate %78 0 Offset 0
OpMemberDecorate %78 1 Offset 4
OpMemberDecorate %78 2 Offset 8
OpDecorate %78 Block
OpDecorate %80 DescriptorSet 10
OpDecorate %80 Binding 11
OpDecorate %80 NonWritable
OpDecorate %139 NonUniform
OpDecorate %140 NonUniform
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeStruct %5 %5 %5 %5 %5 %5 %5 %5
%7 = OpTypePointer PushConstant %6
%8 = OpVariable %7 PushConstant
%9 = OpTypeAccelerationStructureKHR
%10 = OpTypeRuntimeArray %9
%11 = OpTypePointer UniformConstant %10
%12 = OpVariable %11 UniformConstant
%13 = OpTypeFloat 32
%14 = OpTypeVector %13 4
%15 = OpTypeStruct %14
%16 = OpTypePointer RayPayloadNV %15
%17 = OpVariable %16 RayPayloadNV
%18 = OpTypePointer RayPayloadNV %14
%20 = OpConstant %5 0
%21 = OpConstant %13 1
%22 = OpConstant %13 2
%23 = OpConstant %13 3
%24 = OpConstant %13 4
%25 = OpConstantComposite %14 %21 %22 %23 %24
%26 = OpTypePointer UniformConstant %9
%28 = OpTypePointer PushConstant %5
%32 = OpConstant %5 10
%34 = OpTypeVector %5 2
%35 = OpTypeRuntimeArray %5
%36 = OpTypeStruct %34 %5 %5 %5 %5 %5 %5 %5 %5 %35
%37 = OpTypePointer StorageBuffer %36
%38 = OpVariable %37 StorageBuffer
%39 = OpTypeFunction %1 %5 %5 %5 %5 %5 %5 %5
%49 = OpTypePointer StorageBuffer %5
%51 = OpConstant %5 4
%53 = OpConstant %5 1
%54 = OpTypeBool
%59 = OpConstant %5 3
%62 = OpConstant %5 2
%64 = OpConstant %5 6
%66 = OpConstant %5 7
%68 = OpConstant %5 5
%69 = OpConstant %5 3735928559
%70 = OpConstantComposite %34 %69 %20
%71 = OpTypePointer StorageBuffer %34
%73 = OpConstant %5 72
%75 = OpConstant %5 8
%77 = OpTypeRuntimeArray %34
%78 = OpTypeStruct %5 %5 %77
%79 = OpTypePointer StorageBuffer %78
%80 = OpVariable %79 StorageBuffer
%81 = OpTypeFunction %5 %5 %5 %5
%97 = OpConstant %5 31
%99 = OpConstant %5 9
%118 = OpConstant %5 64
%120 = OpConstant %13 0
%121 = OpTypeVector %13 3
%3 = OpFunction %1 None %2
%4 = OpLabel
OpBranch %143
%143 = OpLabel
%19 = OpInBoundsAccessChain %18 %17 %20
OpStore %19 %25
%29 = OpAccessChain %28 %8 %20
%30 = OpLoad %5 %29
%31 = OpIAdd %5 %30 %32
%33 = OpFunctionCall %5 %85 %31 %118 %53
%27 = OpAccessChain %26 %12 %33
%119 = OpLoad %9 %27
%122 = OpCompositeConstruct %121 %21 %22 %23
%123 = OpCompositeConstruct %121 %120 %120 %21
OpTraceRayKHR %119 %20 %20 %20 %20 %20 %122 %21 %123 %24 %17
%125 = OpAccessChain %28 %8 %20
%126 = OpLoad %5 %125
%127 = OpIAdd %5 %126 %59
%128 = OpFunctionCall %5 %85 %127 %118 %62
%124 = OpAccessChain %26 %12 %128
%129 = OpLoad %9 %124
%130 = OpCompositeConstruct %121 %21 %22 %23
%131 = OpCompositeConstruct %121 %120 %120 %21
OpTraceRayKHR %129 %20 %20 %20 %20 %20 %130 %21 %131 %24 %17
%132 = OpLoad %14 %19
%133 = OpCompositeExtract %13 %132 3
%134 = OpConvertFToS %5 %133
%136 = OpAccessChain %28 %8 %20
%137 = OpLoad %5 %136
%138 = OpIAdd %5 %137 %134
%139 = OpFunctionCall %5 %85 %138 %118 %59
%135 = OpAccessChain %26 %12 %139
%140 = OpLoad %9 %135
%141 = OpCompositeConstruct %121 %21 %22 %23
%142 = OpCompositeConstruct %121 %120 %120 %21
OpTraceRayKHR %140 %20 %20 %20 %20 %20 %141 %21 %142 %24 %17
OpReturn
OpFunctionEnd
%47 = OpFunction %1 None %39
%40 = OpFunctionParameter %5
%41 = OpFunctionParameter %5
%42 = OpFunctionParameter %5
%43 = OpFunctionParameter %5
%44 = OpFunctionParameter %5
%45 = OpFunctionParameter %5
%46 = OpFunctionParameter %5
%48 = OpLabel
%50 = OpAccessChain %49 %38 %51
%52 = OpAtomicIAdd %5 %50 %53 %20 %53
%55 = OpIEqual %54 %52 %20
OpSelectionMerge %57 None
OpBranchConditional %55 %56 %57
%56 = OpLabel
%58 = OpAccessChain %49 %38 %59
OpStore %58 %42
%60 = OpAccessChain %49 %38 %53
OpStore %60 %41
%61 = OpAccessChain %49 %38 %62
OpStore %61 %43
%63 = OpAccessChain %49 %38 %64
OpStore %63 %44
%65 = OpAccessChain %49 %38 %66
OpStore %65 %45
%67 = OpAccessChain %49 %38 %68
OpStore %67 %46
%72 = OpAccessChain %71 %38 %20
OpStore %72 %70
OpMemoryBarrier %53 %73
%74 = OpAccessChain %49 %38 %75
OpStore %74 %40
OpBranch %57
%57 = OpLabel
OpReturn
OpFunctionEnd
%85 = OpFunction %5 None %81
%82 = OpFunctionParameter %5
%83 = OpFunctionParameter %5
%84 = OpFunctionParameter %5
%86 = OpLabel
%87 = OpAccessChain %49 %80 %20
%88 = OpLoad %5 %87
%89 = OpAccessChain %49 %80 %53
%90 = OpLoad %5 %89
%91 = OpAccessChain %71 %80 %62 %82
%92 = OpLoad %34 %91
%93 = OpCompositeExtract %5 %92 0
%95 = OpShiftRightLogical %5 %93 %68
%96 = OpBitwiseAnd %5 %93 %97
%94 = OpCompositeExtract %5 %92 1
%98 = OpAccessChain %49 %38 %99 %95
%100 = OpLoad %5 %98
%101 = OpShiftLeftLogical %5 %53 %96
%102 = OpBitwiseAnd %5 %100 %101
%103 = OpINotEqual %54 %102 %20
%104 = OpBitwiseAnd %5 %94 %83
%105 = OpIEqual %54 %104 %83
%106 = OpUGreaterThanEqual %54 %82 %88
%107 = OpSelect %5 %106 %53 %20
%108 = OpSelect %5 %105 %20 %62
%109 = OpSelect %5 %103 %20 %51
%110 = OpBitwiseOr %5 %107 %108
%111 = OpBitwiseOr %5 %110 %109
%112 = OpINotEqual %54 %111 %20
OpSelectionMerge %114 None
OpBranchConditional %112 %113 %114
%113 = OpLabel
%115 = OpFunctionCall %1 %47 %111 %82 %93 %90 %83 %94 %84
OpReturnValue %88
%114 = OpLabel
OpReturnValue %82
OpFunctionEnd
#endif
