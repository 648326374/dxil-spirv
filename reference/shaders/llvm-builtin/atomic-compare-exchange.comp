#version 460
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

struct CmpXchgResult
{
    uint _m0;
    bool _m1;
};

layout(set = 0, binding = 0, r32ui) uniform writeonly uimageBuffer _8;

shared uint _data_3PAIA[64];

uint _34;

void main()
{
    uint _23 = atomicCompSwap(_data_3PAIA[gl_GlobalInvocationID.x], 20u, 30u);
    imageStore(_8, int((gl_GlobalInvocationID.x << 2u) >> 2u), uvec4(CmpXchgResult(_23, _23 == 20u)._m0));
}


#if 0
// LLVM disassembly
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%struct.RWByteAddressBuffer = type { i32 }

@"\01?data@@3PAIA" = external addrspace(3) global [64 x i32], align 4

define void @main() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 0, i32 0, i1 false)
  %2 = call i32 @dx.op.threadId.i32(i32 93, i32 0)
  %3 = getelementptr [64 x i32], [64 x i32] addrspace(3)* @"\01?data@@3PAIA", i32 0, i32 %2
  %4 = cmpxchg i32 addrspace(3)* %3, i32 20, i32 30 seq_cst seq_cst
  %5 = extractvalue { i32, i1 } %4, 0
  %6 = shl i32 %2, 2
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1, i32 %6, i32 undef, i32 %5, i32 undef, i32 undef, i32 undef, i8 1)
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #1

; Function Attrs: nounwind
declare void @dx.op.bufferStore.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i8) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!7}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 5}
!3 = !{!"cs", i32 6, i32 0}
!4 = !{null, !5, null, null}
!5 = !{!6}
!6 = !{i32 0, %struct.RWByteAddressBuffer* undef, !"", i32 0, i32 0, i32 1, i32 11, i1 false, i1 false, i1 false, null}
!7 = !{void ()* @main, !"main", null, !4, !8}
!8 = !{i32 0, i64 16, i32 4, !9}
!9 = !{i32 64, i32 1, i32 1}
#endif
#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 39
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %16
OpExecutionMode %3 LocalSize 64 1 1
OpName %3 "main"
OpName %12 "?data@@3PAIA"
OpName %29 "CmpXchgResult"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %16 BuiltIn GlobalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%9 = OpConstant %5 64
%10 = OpTypeArray %5 %9
%11 = OpTypePointer Workgroup %10
%12 = OpVariable %11 Workgroup
%14 = OpTypeVector %5 3
%15 = OpTypePointer Input %14
%16 = OpVariable %15 Input
%17 = OpTypePointer Input %5
%19 = OpConstant %5 0
%21 = OpTypePointer Workgroup %5
%24 = OpConstant %5 2
%25 = OpConstant %5 30
%26 = OpConstant %5 20
%27 = OpTypeBool
%29 = OpTypeStruct %5 %27
%35 = OpTypeVector %5 4
%3 = OpFunction %1 None %2
%4 = OpLabel
%34 = OpUndef %5
OpBranch %37
%37 = OpLabel
%13 = OpLoad %6 %8
%18 = OpAccessChain %17 %16 %19
%20 = OpLoad %5 %18
%22 = OpAccessChain %21 %12 %20
%23 = OpAtomicCompareExchange %5 %22 %24 %19 %19 %25 %26
%28 = OpIEqual %27 %23 %26
%30 = OpCompositeConstruct %29 %23 %28
%31 = OpCompositeExtract %5 %30 0
%32 = OpShiftLeftLogical %5 %20 %24
%33 = OpShiftRightLogical %5 %32 %24
%36 = OpCompositeConstruct %35 %31 %31 %31 %31
OpImageWrite %13 %33 %36
OpReturn
OpFunctionEnd
#endif
