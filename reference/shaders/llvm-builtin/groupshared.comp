#version 460
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, r32ui) uniform writeonly uimageBuffer _8;

shared float _foos_3PAUFoo_A_0_v_1dim[256];
shared float _foos_3PAUFoo_A_1_v_1dim[128];

float _104;

void main()
{
    float _25 = float(gl_LocalInvocationIndex + 1u);
    _foos_3PAUFoo_A_0_v_1dim[0u + ((0u + (gl_LocalInvocationIndex * 2u)) * 2u)] = float(gl_LocalInvocationIndex);
    _foos_3PAUFoo_A_0_v_1dim[1u + ((0u + (gl_LocalInvocationIndex * 2u)) * 2u)] = _25;
    float _40 = float(gl_LocalInvocationIndex + 2u);
    _foos_3PAUFoo_A_0_v_1dim[0u + ((1u + (gl_LocalInvocationIndex * 2u)) * 2u)] = _25;
    _foos_3PAUFoo_A_0_v_1dim[1u + ((1u + (gl_LocalInvocationIndex * 2u)) * 2u)] = _40;
    _foos_3PAUFoo_A_1_v_1dim[0u + (gl_LocalInvocationIndex * 2u)] = _40;
    _foos_3PAUFoo_A_1_v_1dim[1u + (gl_LocalInvocationIndex * 2u)] = float(gl_LocalInvocationIndex + 3u);
    barrier();
    uint _61 = gl_LocalInvocationIndex ^ 1u;
    uint _74 = gl_LocalInvocationIndex ^ 2u;
    uint _89 = gl_LocalInvocationIndex ^ 4u;
    uint _101 = gl_LocalInvocationIndex * 2u;
    imageStore(_8, int(_101), uvec4(floatBitsToUint((_foos_3PAUFoo_A_0_v_1dim[0u + ((1u + (_74 * 2u)) * 2u)] * _foos_3PAUFoo_A_0_v_1dim[0u + ((0u + (_61 * 2u)) * 2u)]) * _foos_3PAUFoo_A_1_v_1dim[0u + (_89 * 2u)])));
    imageStore(_8, int(_101 + 1u), uvec4(floatBitsToUint((_foos_3PAUFoo_A_0_v_1dim[1u + ((1u + (_74 * 2u)) * 2u)] * _foos_3PAUFoo_A_0_v_1dim[1u + ((0u + (_61 * 2u)) * 2u)]) * _foos_3PAUFoo_A_1_v_1dim[1u + (_89 * 2u)])));
}


#if 0
// LLVM disassembly
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%"class.RWStructuredBuffer<vector<float, 2> >" = type { <2 x float> }

@"\01?foos@@3PAUFoo@@A.0.v.1dim" = addrspace(3) global [256 x float] undef
@"\01?foos@@3PAUFoo@@A.1.v.1dim" = addrspace(3) global [128 x float] undef

define void @main() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 0, i32 0, i1 false)
  %2 = call i32 @dx.op.flattenedThreadIdInGroup.i32(i32 96)
  %3 = uitofp i32 %2 to float
  %4 = add i32 %2, 1
  %5 = uitofp i32 %4 to float
  %6 = mul i32 %2, 2
  %7 = add i32 0, %6
  %8 = mul i32 %7, 2
  %9 = add i32 0, %8
  %10 = getelementptr [256 x float], [256 x float] addrspace(3)* @"\01?foos@@3PAUFoo@@A.0.v.1dim", i32 0, i32 %9
  store float %3, float addrspace(3)* %10, align 16
  %11 = mul i32 %2, 2
  %12 = add i32 0, %11
  %13 = mul i32 %12, 2
  %14 = add i32 1, %13
  %15 = getelementptr [256 x float], [256 x float] addrspace(3)* @"\01?foos@@3PAUFoo@@A.0.v.1dim", i32 0, i32 %14
  store float %5, float addrspace(3)* %15, align 4
  %16 = add i32 %2, 2
  %17 = uitofp i32 %16 to float
  %18 = mul i32 %2, 2
  %19 = add i32 1, %18
  %20 = mul i32 %19, 2
  %21 = add i32 0, %20
  %22 = getelementptr [256 x float], [256 x float] addrspace(3)* @"\01?foos@@3PAUFoo@@A.0.v.1dim", i32 0, i32 %21
  store float %5, float addrspace(3)* %22, align 8
  %23 = mul i32 %2, 2
  %24 = add i32 1, %23
  %25 = mul i32 %24, 2
  %26 = add i32 1, %25
  %27 = getelementptr [256 x float], [256 x float] addrspace(3)* @"\01?foos@@3PAUFoo@@A.0.v.1dim", i32 0, i32 %26
  store float %17, float addrspace(3)* %27, align 4
  %28 = add i32 %2, 3
  %29 = uitofp i32 %28 to float
  %30 = mul i32 %2, 2
  %31 = add i32 0, %30
  %32 = getelementptr [128 x float], [128 x float] addrspace(3)* @"\01?foos@@3PAUFoo@@A.1.v.1dim", i32 0, i32 %31
  store float %17, float addrspace(3)* %32, align 8
  %33 = mul i32 %2, 2
  %34 = add i32 1, %33
  %35 = getelementptr [128 x float], [128 x float] addrspace(3)* @"\01?foos@@3PAUFoo@@A.1.v.1dim", i32 0, i32 %34
  store float %29, float addrspace(3)* %35, align 4
  call void @dx.op.barrier(i32 80, i32 9)
  %36 = xor i32 %2, 1
  %37 = mul i32 %36, 2
  %38 = add i32 0, %37
  %39 = mul i32 %38, 2
  %40 = add i32 0, %39
  %41 = getelementptr [256 x float], [256 x float] addrspace(3)* @"\01?foos@@3PAUFoo@@A.0.v.1dim", i32 0, i32 %40
  %42 = load float, float addrspace(3)* %41, align 16
  %43 = mul i32 %36, 2
  %44 = add i32 0, %43
  %45 = mul i32 %44, 2
  %46 = add i32 1, %45
  %47 = getelementptr [256 x float], [256 x float] addrspace(3)* @"\01?foos@@3PAUFoo@@A.0.v.1dim", i32 0, i32 %46
  %48 = load float, float addrspace(3)* %47, align 4
  %49 = xor i32 %2, 2
  %50 = mul i32 %49, 2
  %51 = add i32 1, %50
  %52 = mul i32 %51, 2
  %53 = add i32 0, %52
  %54 = getelementptr [256 x float], [256 x float] addrspace(3)* @"\01?foos@@3PAUFoo@@A.0.v.1dim", i32 0, i32 %53
  %55 = load float, float addrspace(3)* %54, align 8
  %56 = mul i32 %49, 2
  %57 = add i32 1, %56
  %58 = mul i32 %57, 2
  %59 = add i32 1, %58
  %60 = getelementptr [256 x float], [256 x float] addrspace(3)* @"\01?foos@@3PAUFoo@@A.0.v.1dim", i32 0, i32 %59
  %61 = load float, float addrspace(3)* %60, align 4
  %62 = fmul fast float %55, %42
  %63 = fmul fast float %61, %48
  %64 = xor i32 %2, 4
  %65 = mul i32 %64, 2
  %66 = add i32 0, %65
  %67 = getelementptr [128 x float], [128 x float] addrspace(3)* @"\01?foos@@3PAUFoo@@A.1.v.1dim", i32 0, i32 %66
  %68 = load float, float addrspace(3)* %67, align 8
  %69 = mul i32 %64, 2
  %70 = add i32 1, %69
  %71 = getelementptr [128 x float], [128 x float] addrspace(3)* @"\01?foos@@3PAUFoo@@A.1.v.1dim", i32 0, i32 %70
  %72 = load float, float addrspace(3)* %71, align 4
  %73 = fmul fast float %62, %68
  %74 = fmul fast float %63, %72
  call void @dx.op.bufferStore.f32(i32 69, %dx.types.Handle %1, i32 %2, i32 0, float %73, float %74, float undef, float undef, i8 3)
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.flattenedThreadIdInGroup.i32(i32) #0

; Function Attrs: noduplicate nounwind
declare void @dx.op.barrier(i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

; Function Attrs: nounwind
declare void @dx.op.bufferStore.f32(i32, %dx.types.Handle, i32, i32, float, float, float, float, i8) #3

attributes #0 = { nounwind readnone }
attributes #1 = { noduplicate nounwind }
attributes #2 = { nounwind readonly }
attributes #3 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!8}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 5}
!3 = !{!"cs", i32 6, i32 0}
!4 = !{null, !5, null, null}
!5 = !{!6}
!6 = !{i32 0, %"class.RWStructuredBuffer<vector<float, 2> >"* undef, !"", i32 0, i32 0, i32 1, i32 12, i1 false, i1 false, i1 false, !7}
!7 = !{i32 1, i32 8}
!8 = !{void ()* @main, !"main", null, !4, !9}
!9 = !{i32 0, i64 16, i32 4, !10}
!10 = !{i32 64, i32 1, i32 1}
#endif
#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 111
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %20
OpExecutionMode %3 LocalSize 64 1 1
OpName %3 "main"
OpName %13 "?foos@@3PAUFoo@@A.0.v.1dim"
OpName %17 "?foos@@3PAUFoo@@A.1.v.1dim"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %20 BuiltIn LocalInvocationIndex
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%9 = OpConstant %5 256
%10 = OpTypeFloat 32
%11 = OpTypeArray %10 %9
%12 = OpTypePointer Workgroup %11
%13 = OpVariable %12 Workgroup
%14 = OpConstant %5 128
%15 = OpTypeArray %10 %14
%16 = OpTypePointer Workgroup %15
%17 = OpVariable %16 Workgroup
%19 = OpTypePointer Input %5
%20 = OpVariable %19 Input
%24 = OpConstant %5 1
%27 = OpConstant %5 2
%29 = OpConstant %5 0
%33 = OpTypePointer Workgroup %10
%52 = OpConstant %5 3
%60 = OpConstant %5 264
%90 = OpConstant %5 4
%105 = OpTypeVector %5 4
%3 = OpFunction %1 None %2
%4 = OpLabel
%104 = OpUndef %10
OpBranch %109
%109 = OpLabel
%18 = OpLoad %6 %8
%21 = OpLoad %5 %20
%22 = OpConvertUToF %10 %21
%23 = OpIAdd %5 %21 %24
%25 = OpConvertUToF %10 %23
%26 = OpIMul %5 %21 %27
%28 = OpIAdd %5 %29 %26
%30 = OpIMul %5 %28 %27
%31 = OpIAdd %5 %29 %30
%32 = OpAccessChain %33 %13 %31
OpStore %32 %22
%34 = OpIMul %5 %21 %27
%35 = OpIAdd %5 %29 %34
%36 = OpIMul %5 %35 %27
%37 = OpIAdd %5 %24 %36
%38 = OpAccessChain %33 %13 %37
OpStore %38 %25
%39 = OpIAdd %5 %21 %27
%40 = OpConvertUToF %10 %39
%41 = OpIMul %5 %21 %27
%42 = OpIAdd %5 %24 %41
%43 = OpIMul %5 %42 %27
%44 = OpIAdd %5 %29 %43
%45 = OpAccessChain %33 %13 %44
OpStore %45 %25
%46 = OpIMul %5 %21 %27
%47 = OpIAdd %5 %24 %46
%48 = OpIMul %5 %47 %27
%49 = OpIAdd %5 %24 %48
%50 = OpAccessChain %33 %13 %49
OpStore %50 %40
%51 = OpIAdd %5 %21 %52
%53 = OpConvertUToF %10 %51
%54 = OpIMul %5 %21 %27
%55 = OpIAdd %5 %29 %54
%56 = OpAccessChain %33 %17 %55
OpStore %56 %40
%57 = OpIMul %5 %21 %27
%58 = OpIAdd %5 %24 %57
%59 = OpAccessChain %33 %17 %58
OpStore %59 %53
OpControlBarrier %27 %27 %60
%61 = OpBitwiseXor %5 %21 %24
%62 = OpIMul %5 %61 %27
%63 = OpIAdd %5 %29 %62
%64 = OpIMul %5 %63 %27
%65 = OpIAdd %5 %29 %64
%66 = OpAccessChain %33 %13 %65
%67 = OpLoad %10 %66
%68 = OpIMul %5 %61 %27
%69 = OpIAdd %5 %29 %68
%70 = OpIMul %5 %69 %27
%71 = OpIAdd %5 %24 %70
%72 = OpAccessChain %33 %13 %71
%73 = OpLoad %10 %72
%74 = OpBitwiseXor %5 %21 %27
%75 = OpIMul %5 %74 %27
%76 = OpIAdd %5 %24 %75
%77 = OpIMul %5 %76 %27
%78 = OpIAdd %5 %29 %77
%79 = OpAccessChain %33 %13 %78
%80 = OpLoad %10 %79
%81 = OpIMul %5 %74 %27
%82 = OpIAdd %5 %24 %81
%83 = OpIMul %5 %82 %27
%84 = OpIAdd %5 %24 %83
%85 = OpAccessChain %33 %13 %84
%86 = OpLoad %10 %85
%87 = OpFMul %10 %80 %67
%88 = OpFMul %10 %86 %73
%89 = OpBitwiseXor %5 %21 %90
%91 = OpIMul %5 %89 %27
%92 = OpIAdd %5 %29 %91
%93 = OpAccessChain %33 %17 %92
%94 = OpLoad %10 %93
%95 = OpIMul %5 %89 %27
%96 = OpIAdd %5 %24 %95
%97 = OpAccessChain %33 %17 %96
%98 = OpLoad %10 %97
%99 = OpFMul %10 %87 %94
%100 = OpFMul %10 %88 %98
%101 = OpIMul %5 %21 %27
%102 = OpBitcast %5 %99
%103 = OpBitcast %5 %100
%106 = OpCompositeConstruct %105 %102 %102 %102 %102
OpImageWrite %18 %101 %106
%107 = OpCompositeConstruct %105 %103 %103 %103 %103
%108 = OpIAdd %5 %101 %24
OpImageWrite %18 %108 %107
OpReturn
OpFunctionEnd
#endif
