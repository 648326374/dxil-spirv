#version 460
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform usamplerBuffer _8;
layout(set = 0, binding = 0, r32ui) uniform writeonly uimageBuffer _11;

void main()
{
    float _20 = uintBitsToFloat(texelFetch(_8, int(1u)).x);
    float _24 = uintBitsToFloat(texelFetch(_8, int(2u)).x);
    imageStore(_11, int(0u), uvec4(floatBitsToUint(_24)));
    float _31 = uintBitsToFloat(texelFetch(_8, int(3u)).x);
    imageStore(_11, int(1u), uvec4(floatBitsToUint(_31)));
    imageStore(_11, int(2u), uvec4(floatBitsToUint(_20 / (uintBitsToFloat(texelFetch(_8, int(4u)).x) * _20))));
    imageStore(_11, int(3u), uvec4(floatBitsToUint(_20 / (uintBitsToFloat(texelFetch(_8, int(5u)).x) * _20))));
    float _54 = uintBitsToFloat(texelFetch(_8, int(6u)).x);
    imageStore(_11, int(4u), uvec4(floatBitsToUint(_54)));
    float _61 = uintBitsToFloat(texelFetch(_8, int(7u)).x);
    imageStore(_11, int(5u), uvec4(floatBitsToUint(_61)));
    imageStore(_11, int(6u), uvec4(floatBitsToUint((_20 / uintBitsToFloat(texelFetch(_8, int(8u)).x)) * _20)));
    imageStore(_11, int(7u), uvec4(floatBitsToUint((_20 / uintBitsToFloat(texelFetch(_8, int(9u)).x)) * _20)));
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 83
; Schema: 0
OpCapability Shader
OpCapability SampledBuffer
OpCapability ImageBuffer
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main"
OpExecutionMode %3 LocalSize 1 1 1
OpName %3 "main"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %11 DescriptorSet 0
OpDecorate %11 Binding 0
OpDecorate %11 NonReadable
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 1 Unknown
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%9 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%10 = OpTypePointer UniformConstant %9
%11 = OpVariable %10 UniformConstant
%14 = OpConstant %5 1
%15 = OpConstant %5 0
%16 = OpTypeVector %5 4
%19 = OpTypeFloat 32
%21 = OpConstant %5 2
%28 = OpConstant %5 3
%35 = OpConstant %5 4
%43 = OpConstant %5 5
%51 = OpConstant %5 6
%58 = OpConstant %5 7
%65 = OpConstant %5 8
%73 = OpConstant %5 9
%3 = OpFunction %1 None %2
%4 = OpLabel
OpBranch %81
%81 = OpLabel
%12 = OpLoad %9 %11
%13 = OpLoad %6 %8
%17 = OpImageFetch %16 %13 %14
%18 = OpCompositeExtract %5 %17 0
%20 = OpBitcast %19 %18
%22 = OpImageFetch %16 %13 %21
%23 = OpCompositeExtract %5 %22 0
%24 = OpBitcast %19 %23
%25 = OpFMul %19 %24 %20
%26 = OpBitcast %5 %24
%27 = OpCompositeConstruct %16 %26 %26 %26 %26
OpImageWrite %12 %15 %27
%29 = OpImageFetch %16 %13 %28
%30 = OpCompositeExtract %5 %29 0
%31 = OpBitcast %19 %30
%32 = OpFMul %19 %31 %20
%33 = OpBitcast %5 %31
%34 = OpCompositeConstruct %16 %33 %33 %33 %33
OpImageWrite %12 %14 %34
%36 = OpImageFetch %16 %13 %35
%37 = OpCompositeExtract %5 %36 0
%38 = OpBitcast %19 %37
%39 = OpFMul %19 %38 %20
%40 = OpFDiv %19 %20 %39
%41 = OpBitcast %5 %40
%42 = OpCompositeConstruct %16 %41 %41 %41 %41
OpImageWrite %12 %21 %42
%44 = OpImageFetch %16 %13 %43
%45 = OpCompositeExtract %5 %44 0
%46 = OpBitcast %19 %45
%47 = OpFMul %19 %46 %20
%48 = OpFDiv %19 %20 %47
%49 = OpBitcast %5 %48
%50 = OpCompositeConstruct %16 %49 %49 %49 %49
OpImageWrite %12 %28 %50
%52 = OpImageFetch %16 %13 %51
%53 = OpCompositeExtract %5 %52 0
%54 = OpBitcast %19 %53
%55 = OpFDiv %19 %54 %20
%56 = OpBitcast %5 %54
%57 = OpCompositeConstruct %16 %56 %56 %56 %56
OpImageWrite %12 %35 %57
%59 = OpImageFetch %16 %13 %58
%60 = OpCompositeExtract %5 %59 0
%61 = OpBitcast %19 %60
%62 = OpFDiv %19 %61 %20
%63 = OpBitcast %5 %61
%64 = OpCompositeConstruct %16 %63 %63 %63 %63
OpImageWrite %12 %43 %64
%66 = OpImageFetch %16 %13 %65
%67 = OpCompositeExtract %5 %66 0
%68 = OpBitcast %19 %67
%69 = OpFDiv %19 %20 %68
%70 = OpFMul %19 %69 %20
%71 = OpBitcast %5 %70
%72 = OpCompositeConstruct %16 %71 %71 %71 %71
OpImageWrite %12 %51 %72
%74 = OpImageFetch %16 %13 %73
%75 = OpCompositeExtract %5 %74 0
%76 = OpBitcast %19 %75
%77 = OpFDiv %19 %20 %76
%78 = OpFMul %19 %77 %20
%79 = OpBitcast %5 %78
%80 = OpCompositeConstruct %16 %79 %79 %79 %79
OpImageWrite %12 %58 %80
OpReturn
OpFunctionEnd
#endif
