#version 460
#extension GL_EXT_shader_explicit_arithmetic_types_int16 : require
#extension GL_EXT_shader_16bit_storage : require
#if defined(GL_AMD_gpu_shader_half_float)
#extension GL_AMD_gpu_shader_half_float : require
#elif defined(GL_EXT_shader_explicit_arithmetic_types_float16)
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : require
#else
#error No extension available for FP16.
#endif
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, std430) restrict readonly buffer SSBO
{
    uint _m0[];
} _9;

layout(set = 0, binding = 1, std430) restrict readonly buffer _11_13
{
    uint _m0[];
} _13;

layout(set = 0, binding = 2, std430) restrict readonly buffer _16_18
{
    uint16_t _m0[];
} _18;

layout(set = 0, binding = 3, std430) restrict readonly buffer _20_22
{
    uint16_t _m0[];
} _22;

layout(set = 0, binding = 0, std430) buffer _24_26
{
    uint _m0[];
} _26;

layout(set = 0, binding = 1, std430) buffer _28_30
{
    uint _m0[];
} _30;

void main()
{
    _26._m0[gl_GlobalInvocationID.x] = (((_26._m0[gl_GlobalInvocationID.x] + (bitfieldExtract(_9._m0[gl_GlobalInvocationID.x], int(0u), int(8u)) * bitfieldExtract(_13._m0[gl_GlobalInvocationID.x], int(0u), int(8u)))) + (bitfieldExtract(_9._m0[gl_GlobalInvocationID.x], int(8u), int(8u)) * bitfieldExtract(_13._m0[gl_GlobalInvocationID.x], int(8u), int(8u)))) + (bitfieldExtract(_9._m0[gl_GlobalInvocationID.x], int(16u), int(8u)) * bitfieldExtract(_13._m0[gl_GlobalInvocationID.x], int(16u), int(8u)))) + (bitfieldExtract(_9._m0[gl_GlobalInvocationID.x], int(24u), int(8u)) * bitfieldExtract(_13._m0[gl_GlobalInvocationID.x], int(24u), int(8u)));
    _26._m0[gl_GlobalInvocationID.x] = (((_26._m0[gl_GlobalInvocationID.x] + (uint(bitfieldExtract(int(_9._m0[gl_GlobalInvocationID.x]), int(0u), int(8u))) * uint(bitfieldExtract(int(_13._m0[gl_GlobalInvocationID.x]), int(0u), int(8u))))) + (uint(bitfieldExtract(int(_9._m0[gl_GlobalInvocationID.x]), int(8u), int(8u))) * uint(bitfieldExtract(int(_13._m0[gl_GlobalInvocationID.x]), int(8u), int(8u))))) + (uint(bitfieldExtract(int(_9._m0[gl_GlobalInvocationID.x]), int(16u), int(8u))) * uint(bitfieldExtract(int(_13._m0[gl_GlobalInvocationID.x]), int(16u), int(8u))))) + (uint(bitfieldExtract(int(_9._m0[gl_GlobalInvocationID.x]), int(24u), int(8u))) * uint(bitfieldExtract(int(_13._m0[gl_GlobalInvocationID.x]), int(24u), int(8u))));
    uint _92 = gl_GlobalInvocationID.x * 2u;
    f16vec2 _105 = uint16BitsToFloat16(u16vec2(_22._m0[_92], _22._m0[_92 + 1u]));
    uint _111 = gl_GlobalInvocationID.x * 2u;
    f16vec2 _118 = uint16BitsToFloat16(u16vec2(_18._m0[_111], _18._m0[_111 + 1u]));
    vec2 _128 = vec2(f16vec2(_118.x * float16_t(2.0), _118.y * float16_t(2.0)) * f16vec2(_105.x * float16_t(3.0), _105.y * float16_t(3.0)));
    _30._m0[gl_GlobalInvocationID.x] = floatBitsToUint(uintBitsToFloat(_30._m0[gl_GlobalInvocationID.x]) + (_128.x + _128.y));
    uint _138 = gl_GlobalInvocationID.x * 2u;
    f16vec2 _145 = uint16BitsToFloat16(u16vec2(_22._m0[_138], _22._m0[_138 + 1u]));
    precise float16_t _148 = _145.x * float16_t(5.0);
    precise float16_t _150 = _145.y * float16_t(5.0);
    uint _151 = gl_GlobalInvocationID.x * 2u;
    f16vec2 _158 = uint16BitsToFloat16(u16vec2(_18._m0[_151], _18._m0[_151 + 1u]));
    precise float16_t _161 = _158.x * float16_t(4.0);
    precise float16_t _163 = _158.y * float16_t(4.0);
    precise f16vec2 _166 = f16vec2(_161, _163) * f16vec2(_148, _150);
    vec2 _167 = vec2(_166);
    precise float _170 = _167.x + _167.y;
    precise float _171 = uintBitsToFloat(_30._m0[gl_GlobalInvocationID.x]) + _170;
    _30._m0[gl_GlobalInvocationID.x] = floatBitsToUint(_171);
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 176
; Schema: 0
OpCapability Shader
OpCapability Float16
OpCapability Int16
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %33
OpExecutionMode %3 LocalSize 64 1 1
OpName %3 "main"
OpName %7 "SSBO"
OpName %11 "SSBO"
OpName %16 "SSBO"
OpName %20 "SSBO"
OpName %24 "SSBO"
OpName %28 "SSBO"
OpDecorate %6 ArrayStride 4
OpMemberDecorate %7 0 Offset 0
OpDecorate %7 Block
OpDecorate %9 DescriptorSet 0
OpDecorate %9 Binding 0
OpDecorate %9 NonWritable
OpDecorate %9 Restrict
OpDecorate %10 ArrayStride 4
OpMemberDecorate %11 0 Offset 0
OpDecorate %11 Block
OpDecorate %13 DescriptorSet 0
OpDecorate %13 Binding 1
OpDecorate %13 NonWritable
OpDecorate %13 Restrict
OpDecorate %15 ArrayStride 2
OpMemberDecorate %16 0 Offset 0
OpDecorate %16 Block
OpDecorate %18 DescriptorSet 0
OpDecorate %18 Binding 2
OpDecorate %18 NonWritable
OpDecorate %18 Restrict
OpDecorate %19 ArrayStride 2
OpMemberDecorate %20 0 Offset 0
OpDecorate %20 Block
OpDecorate %22 DescriptorSet 0
OpDecorate %22 Binding 3
OpDecorate %22 NonWritable
OpDecorate %22 Restrict
OpDecorate %23 ArrayStride 4
OpMemberDecorate %24 0 Offset 0
OpDecorate %24 Block
OpDecorate %26 DescriptorSet 0
OpDecorate %26 Binding 0
OpDecorate %27 ArrayStride 4
OpMemberDecorate %28 0 Offset 0
OpDecorate %28 Block
OpDecorate %30 DescriptorSet 0
OpDecorate %30 Binding 1
OpDecorate %33 BuiltIn GlobalInvocationId
OpDecorate %148 NoContraction
OpDecorate %150 NoContraction
OpDecorate %161 NoContraction
OpDecorate %163 NoContraction
OpDecorate %166 NoContraction
OpDecorate %170 NoContraction
OpDecorate %171 NoContraction
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeRuntimeArray %5
%7 = OpTypeStruct %6
%8 = OpTypePointer StorageBuffer %7
%9 = OpVariable %8 StorageBuffer
%10 = OpTypeRuntimeArray %5
%11 = OpTypeStruct %10
%12 = OpTypePointer StorageBuffer %11
%13 = OpVariable %12 StorageBuffer
%14 = OpTypeInt 16 0
%15 = OpTypeRuntimeArray %14
%16 = OpTypeStruct %15
%17 = OpTypePointer StorageBuffer %16
%18 = OpVariable %17 StorageBuffer
%19 = OpTypeRuntimeArray %14
%20 = OpTypeStruct %19
%21 = OpTypePointer StorageBuffer %20
%22 = OpVariable %21 StorageBuffer
%23 = OpTypeRuntimeArray %5
%24 = OpTypeStruct %23
%25 = OpTypePointer StorageBuffer %24
%26 = OpVariable %25 StorageBuffer
%27 = OpTypeRuntimeArray %5
%28 = OpTypeStruct %27
%29 = OpTypePointer StorageBuffer %28
%30 = OpVariable %29 StorageBuffer
%31 = OpTypeVector %5 3
%32 = OpTypePointer Input %31
%33 = OpVariable %32 Input
%34 = OpTypePointer Input %5
%36 = OpConstant %5 0
%38 = OpTypePointer StorageBuffer %5
%46 = OpConstant %5 8
%55 = OpConstant %5 16
%60 = OpConstant %5 24
%90 = OpTypeFloat 32
%93 = OpConstant %5 2
%94 = OpTypePointer StorageBuffer %14
%99 = OpConstant %5 1
%101 = OpTypeVector %14 2
%103 = OpTypeFloat 16
%104 = OpTypeVector %103 2
%109 = OpConstant %103 0x1.8p+1
%122 = OpConstant %103 0x1p+1
%127 = OpTypeVector %90 2
%149 = OpConstant %103 0x1.4p+2
%162 = OpConstant %103 0x1p+2
%3 = OpFunction %1 None %2
%4 = OpLabel
OpBranch %174
%174 = OpLabel
%35 = OpAccessChain %34 %33 %36
%37 = OpLoad %5 %35
%39 = OpAccessChain %38 %26 %36 %37
%40 = OpLoad %5 %39
%41 = OpAccessChain %38 %13 %36 %37
%42 = OpLoad %5 %41
%43 = OpAccessChain %38 %9 %36 %37
%44 = OpLoad %5 %43
%45 = OpBitFieldUExtract %5 %44 %36 %46
%47 = OpBitFieldUExtract %5 %42 %36 %46
%48 = OpIMul %5 %45 %47
%49 = OpIAdd %5 %40 %48
%50 = OpBitFieldUExtract %5 %44 %46 %46
%51 = OpBitFieldUExtract %5 %42 %46 %46
%52 = OpIMul %5 %50 %51
%53 = OpIAdd %5 %49 %52
%54 = OpBitFieldUExtract %5 %44 %55 %46
%56 = OpBitFieldUExtract %5 %42 %55 %46
%57 = OpIMul %5 %54 %56
%58 = OpIAdd %5 %53 %57
%59 = OpBitFieldUExtract %5 %44 %60 %46
%61 = OpBitFieldUExtract %5 %42 %60 %46
%62 = OpIMul %5 %59 %61
%63 = OpIAdd %5 %58 %62
%64 = OpAccessChain %38 %26 %36 %37
OpStore %64 %63
%65 = OpAccessChain %38 %26 %36 %37
%66 = OpLoad %5 %65
%67 = OpAccessChain %38 %13 %36 %37
%68 = OpLoad %5 %67
%69 = OpAccessChain %38 %9 %36 %37
%70 = OpLoad %5 %69
%71 = OpBitFieldSExtract %5 %70 %36 %46
%72 = OpBitFieldSExtract %5 %68 %36 %46
%73 = OpIMul %5 %71 %72
%74 = OpIAdd %5 %66 %73
%75 = OpBitFieldSExtract %5 %70 %46 %46
%76 = OpBitFieldSExtract %5 %68 %46 %46
%77 = OpIMul %5 %75 %76
%78 = OpIAdd %5 %74 %77
%79 = OpBitFieldSExtract %5 %70 %55 %46
%80 = OpBitFieldSExtract %5 %68 %55 %46
%81 = OpIMul %5 %79 %80
%82 = OpIAdd %5 %78 %81
%83 = OpBitFieldSExtract %5 %70 %60 %46
%84 = OpBitFieldSExtract %5 %68 %60 %46
%85 = OpIMul %5 %83 %84
%86 = OpIAdd %5 %82 %85
%87 = OpAccessChain %38 %26 %36 %37
OpStore %87 %86
%88 = OpAccessChain %38 %30 %36 %37
%89 = OpLoad %5 %88
%91 = OpBitcast %90 %89
%92 = OpIMul %5 %37 %93
%95 = OpAccessChain %94 %22 %36 %92
%96 = OpLoad %14 %95
%98 = OpIAdd %5 %92 %99
%97 = OpAccessChain %94 %22 %36 %98
%100 = OpLoad %14 %97
%102 = OpCompositeConstruct %101 %96 %100
%105 = OpBitcast %104 %102
%106 = OpCompositeExtract %103 %105 0
%107 = OpCompositeExtract %103 %105 1
%108 = OpFMul %103 %106 %109
%110 = OpFMul %103 %107 %109
%111 = OpIMul %5 %37 %93
%112 = OpAccessChain %94 %18 %36 %111
%113 = OpLoad %14 %112
%115 = OpIAdd %5 %111 %99
%114 = OpAccessChain %94 %18 %36 %115
%116 = OpLoad %14 %114
%117 = OpCompositeConstruct %101 %113 %116
%118 = OpBitcast %104 %117
%119 = OpCompositeExtract %103 %118 0
%120 = OpCompositeExtract %103 %118 1
%121 = OpFMul %103 %119 %122
%123 = OpFMul %103 %120 %122
%124 = OpCompositeConstruct %104 %121 %123
%125 = OpCompositeConstruct %104 %108 %110
%126 = OpFMul %104 %124 %125
%128 = OpFConvert %127 %126
%129 = OpCompositeExtract %90 %128 0
%130 = OpCompositeExtract %90 %128 1
%131 = OpFAdd %90 %129 %130
%132 = OpFAdd %90 %91 %131
%133 = OpBitcast %5 %132
%134 = OpAccessChain %38 %30 %36 %37
OpStore %134 %133
%135 = OpAccessChain %38 %30 %36 %37
%136 = OpLoad %5 %135
%137 = OpBitcast %90 %136
%138 = OpIMul %5 %37 %93
%139 = OpAccessChain %94 %22 %36 %138
%140 = OpLoad %14 %139
%142 = OpIAdd %5 %138 %99
%141 = OpAccessChain %94 %22 %36 %142
%143 = OpLoad %14 %141
%144 = OpCompositeConstruct %101 %140 %143
%145 = OpBitcast %104 %144
%146 = OpCompositeExtract %103 %145 0
%147 = OpCompositeExtract %103 %145 1
%148 = OpFMul %103 %146 %149
%150 = OpFMul %103 %147 %149
%151 = OpIMul %5 %37 %93
%152 = OpAccessChain %94 %18 %36 %151
%153 = OpLoad %14 %152
%155 = OpIAdd %5 %151 %99
%154 = OpAccessChain %94 %18 %36 %155
%156 = OpLoad %14 %154
%157 = OpCompositeConstruct %101 %153 %156
%158 = OpBitcast %104 %157
%159 = OpCompositeExtract %103 %158 0
%160 = OpCompositeExtract %103 %158 1
%161 = OpFMul %103 %159 %162
%163 = OpFMul %103 %160 %162
%164 = OpCompositeConstruct %104 %161 %163
%165 = OpCompositeConstruct %104 %148 %150
%166 = OpFMul %104 %164 %165
%167 = OpFConvert %127 %166
%168 = OpCompositeExtract %90 %167 0
%169 = OpCompositeExtract %90 %167 1
%170 = OpFAdd %90 %168 %169
%171 = OpFAdd %90 %137 %170
%172 = OpBitcast %5 %171
%173 = OpAccessChain %38 %30 %36 %37
OpStore %173 %172
OpReturn
OpFunctionEnd
#endif
