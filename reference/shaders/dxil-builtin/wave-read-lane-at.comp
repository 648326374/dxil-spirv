#version 460
#extension GL_KHR_shader_subgroup_basic : require
#extension GL_KHR_shader_subgroup_shuffle : require
#extension GL_KHR_shader_subgroup_ballot : require
#extension GL_KHR_shader_subgroup_quad : require
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, r32ui) uniform writeonly uimageBuffer _8;

void main()
{
    uint _27 = (gl_SubgroupSize + 4294967295u) & gl_GlobalInvocationID.x;
    uint _96 = gl_GlobalInvocationID.x * 3u;
    imageStore(_8, int(_96), uvec4((((((((subgroupBroadcast(gl_GlobalInvocationID.x, 11u) + subgroupShuffle(gl_GlobalInvocationID.x, _27)) + subgroupQuadSwapHorizontal(gl_GlobalInvocationID.x)) + subgroupQuadSwapVertical(gl_GlobalInvocationID.x)) + subgroupQuadSwapDiagonal(gl_GlobalInvocationID.x)) + subgroupShuffleXor(gl_GlobalInvocationID.x, 4u)) + subgroupShuffleXor(gl_GlobalInvocationID.x, 8u)) + subgroupShuffleXor(gl_GlobalInvocationID.x, 16u)) + subgroupShuffleXor(gl_GlobalInvocationID.x, 32u)));
    imageStore(_8, int(_96 + 1u), uvec4((((((((subgroupBroadcast(gl_GlobalInvocationID.y, 11u) + subgroupShuffle(gl_GlobalInvocationID.y, _27)) + subgroupQuadSwapHorizontal(gl_GlobalInvocationID.y)) + subgroupQuadSwapVertical(gl_GlobalInvocationID.y)) + subgroupQuadSwapDiagonal(gl_GlobalInvocationID.y)) + subgroupShuffleXor(gl_GlobalInvocationID.y, 4u)) + subgroupShuffleXor(gl_GlobalInvocationID.y, 8u)) + subgroupShuffleXor(gl_GlobalInvocationID.y, 16u)) + subgroupShuffleXor(gl_GlobalInvocationID.y, 32u)));
    imageStore(_8, int(_96 + 2u), uvec4((((((((subgroupBroadcast(gl_GlobalInvocationID.z, 11u) + subgroupShuffle(gl_GlobalInvocationID.z, _27)) + subgroupQuadSwapHorizontal(gl_GlobalInvocationID.z)) + subgroupQuadSwapVertical(gl_GlobalInvocationID.z)) + subgroupQuadSwapDiagonal(gl_GlobalInvocationID.z)) + subgroupShuffleXor(gl_GlobalInvocationID.z, 4u)) + subgroupShuffleXor(gl_GlobalInvocationID.z, 8u)) + subgroupShuffleXor(gl_GlobalInvocationID.z, 16u)) + subgroupShuffleXor(gl_GlobalInvocationID.z, 32u)));
}


#if 0
// SPIR-V disassembly
// HeuristicWaveSize(32)
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 105
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpCapability GroupNonUniform
OpCapability GroupNonUniformBallot
OpCapability GroupNonUniformShuffle
OpCapability GroupNonUniformQuad
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %12 %23 %39
OpExecutionMode %3 LocalSize 64 1 1
OpName %3 "main"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %8 NonReadable
OpDecorate %12 BuiltIn GlobalInvocationId
OpDecorate %23 BuiltIn SubgroupSize
OpDecorate %39 BuiltIn SubgroupLocalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%10 = OpTypeVector %5 3
%11 = OpTypePointer Input %10
%12 = OpVariable %11 Input
%13 = OpTypePointer Input %5
%15 = OpConstant %5 0
%18 = OpConstant %5 1
%21 = OpConstant %5 2
%23 = OpVariable %13 Input
%26 = OpConstant %5 4294967295
%29 = OpConstant %5 3
%33 = OpConstant %5 11
%39 = OpVariable %13 Input
%63 = OpConstant %5 4
%71 = OpConstant %5 8
%79 = OpConstant %5 16
%87 = OpConstant %5 32
%95 = OpConstant %5 12
%97 = OpTypeVector %5 4
%3 = OpFunction %1 None %2
%4 = OpLabel
OpBranch %103
%103 = OpLabel
%9 = OpLoad %6 %8
%14 = OpAccessChain %13 %12 %15
%16 = OpLoad %5 %14
%17 = OpAccessChain %13 %12 %18
%19 = OpLoad %5 %17
%20 = OpAccessChain %13 %12 %21
%22 = OpLoad %5 %20
%24 = OpLoad %5 %23
%25 = OpIAdd %5 %24 %26
%27 = OpBitwiseAnd %5 %25 %16
%28 = OpGroupNonUniformShuffle %5 %29 %16 %27
%30 = OpGroupNonUniformShuffle %5 %29 %19 %27
%31 = OpGroupNonUniformShuffle %5 %29 %22 %27
%32 = OpGroupNonUniformBroadcast %5 %29 %16 %33
%34 = OpGroupNonUniformBroadcast %5 %29 %19 %33
%35 = OpGroupNonUniformBroadcast %5 %29 %22 %33
%36 = OpIAdd %5 %32 %28
%37 = OpIAdd %5 %34 %30
%38 = OpIAdd %5 %35 %31
%40 = OpLoad %5 %39
%41 = OpBitwiseXor %5 %40 %18
%42 = OpGroupNonUniformQuadSwap %5 %29 %16 %15
%43 = OpGroupNonUniformQuadSwap %5 %29 %19 %15
%44 = OpGroupNonUniformQuadSwap %5 %29 %22 %15
%45 = OpIAdd %5 %36 %42
%46 = OpIAdd %5 %37 %43
%47 = OpIAdd %5 %38 %44
%48 = OpBitwiseXor %5 %40 %21
%49 = OpGroupNonUniformQuadSwap %5 %29 %16 %18
%50 = OpGroupNonUniformQuadSwap %5 %29 %19 %18
%51 = OpGroupNonUniformQuadSwap %5 %29 %22 %18
%52 = OpIAdd %5 %45 %49
%53 = OpIAdd %5 %46 %50
%54 = OpIAdd %5 %47 %51
%55 = OpBitwiseXor %5 %40 %29
%56 = OpGroupNonUniformQuadSwap %5 %29 %16 %21
%57 = OpGroupNonUniformQuadSwap %5 %29 %19 %21
%58 = OpGroupNonUniformQuadSwap %5 %29 %22 %21
%59 = OpIAdd %5 %52 %56
%60 = OpIAdd %5 %53 %57
%61 = OpIAdd %5 %54 %58
%62 = OpBitwiseXor %5 %40 %63
%64 = OpGroupNonUniformShuffleXor %5 %29 %16 %63
%65 = OpGroupNonUniformShuffleXor %5 %29 %19 %63
%66 = OpGroupNonUniformShuffleXor %5 %29 %22 %63
%67 = OpIAdd %5 %59 %64
%68 = OpIAdd %5 %60 %65
%69 = OpIAdd %5 %61 %66
%70 = OpBitwiseXor %5 %40 %71
%72 = OpGroupNonUniformShuffleXor %5 %29 %16 %71
%73 = OpGroupNonUniformShuffleXor %5 %29 %19 %71
%74 = OpGroupNonUniformShuffleXor %5 %29 %22 %71
%75 = OpIAdd %5 %67 %72
%76 = OpIAdd %5 %68 %73
%77 = OpIAdd %5 %69 %74
%78 = OpBitwiseXor %5 %40 %79
%80 = OpGroupNonUniformShuffleXor %5 %29 %16 %79
%81 = OpGroupNonUniformShuffleXor %5 %29 %19 %79
%82 = OpGroupNonUniformShuffleXor %5 %29 %22 %79
%83 = OpIAdd %5 %75 %80
%84 = OpIAdd %5 %76 %81
%85 = OpIAdd %5 %77 %82
%86 = OpBitwiseXor %5 %40 %87
%88 = OpGroupNonUniformShuffleXor %5 %29 %16 %87
%89 = OpGroupNonUniformShuffleXor %5 %29 %19 %87
%90 = OpGroupNonUniformShuffleXor %5 %29 %22 %87
%91 = OpIAdd %5 %83 %88
%92 = OpIAdd %5 %84 %89
%93 = OpIAdd %5 %85 %90
%94 = OpIMul %5 %16 %95
%96 = OpIMul %5 %16 %29
%98 = OpCompositeConstruct %97 %91 %91 %91 %91
OpImageWrite %9 %96 %98
%99 = OpCompositeConstruct %97 %92 %92 %92 %92
%100 = OpIAdd %5 %96 %18
OpImageWrite %9 %100 %99
%101 = OpCompositeConstruct %97 %93 %93 %93 %93
%102 = OpIAdd %5 %96 %21
OpImageWrite %9 %102 %101
OpReturn
OpFunctionEnd
#endif
