#version 460
#extension GL_KHR_shader_subgroup_basic : require
#extension GL_KHR_shader_subgroup_shuffle : require
#extension GL_KHR_shader_subgroup_ballot : require
#extension GL_KHR_shader_subgroup_quad : require
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, r32ui) uniform writeonly uimageBuffer _8;

void main()
{
    uint _27 = (gl_SubgroupSize + 4294967295u) & gl_GlobalInvocationID.x;
    uint _102 = gl_GlobalInvocationID.x * 3u;
    imageStore(_8, int(_102), uvec4((((((((subgroupBroadcast(gl_GlobalInvocationID.x, 11u) + subgroupShuffle(gl_GlobalInvocationID.x, _27)) + subgroupQuadSwapHorizontal(gl_GlobalInvocationID.x)) + subgroupQuadSwapVertical(gl_GlobalInvocationID.x)) + subgroupQuadSwapDiagonal(gl_GlobalInvocationID.x)) + subgroupShuffleXor(gl_GlobalInvocationID.x, 4u)) + subgroupShuffleXor(gl_GlobalInvocationID.x, 8u)) + subgroupShuffleXor(gl_GlobalInvocationID.x, 16u)) + subgroupShuffleXor(gl_GlobalInvocationID.x, 32u)));
    imageStore(_8, int(_102 + 1u), uvec4((((((((subgroupBroadcast(gl_GlobalInvocationID.y, 11u) + subgroupShuffle(gl_GlobalInvocationID.y, _27)) + subgroupQuadSwapHorizontal(gl_GlobalInvocationID.y)) + subgroupQuadSwapVertical(gl_GlobalInvocationID.y)) + subgroupQuadSwapDiagonal(gl_GlobalInvocationID.y)) + subgroupShuffleXor(gl_GlobalInvocationID.y, 4u)) + subgroupShuffleXor(gl_GlobalInvocationID.y, 8u)) + subgroupShuffleXor(gl_GlobalInvocationID.y, 16u)) + subgroupShuffleXor(gl_GlobalInvocationID.y, 32u)));
    imageStore(_8, int(_102 + 2u), uvec4((((((((subgroupBroadcast(gl_GlobalInvocationID.z, 11u) + subgroupShuffle(gl_GlobalInvocationID.z, _27)) + subgroupQuadSwapHorizontal(gl_GlobalInvocationID.z)) + subgroupQuadSwapVertical(gl_GlobalInvocationID.z)) + subgroupQuadSwapDiagonal(gl_GlobalInvocationID.z)) + subgroupShuffleXor(gl_GlobalInvocationID.z, 4u)) + subgroupShuffleXor(gl_GlobalInvocationID.z, 8u)) + subgroupShuffleXor(gl_GlobalInvocationID.z, 16u)) + subgroupShuffleXor(gl_GlobalInvocationID.z, 32u)));
}


#if 0
// SPIR-V disassembly
// HeuristicWaveSize(32)
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 111
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpCapability GroupNonUniform
OpCapability GroupNonUniformBallot
OpCapability GroupNonUniformShuffle
OpCapability GroupNonUniformQuad
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %12 %23 %39
OpExecutionMode %3 LocalSize 64 1 1
OpName %3 "main"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %8 NonReadable
OpDecorate %12 BuiltIn GlobalInvocationId
OpDecorate %23 BuiltIn SubgroupSize
OpDecorate %39 BuiltIn SubgroupLocalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%10 = OpTypeVector %5 3
%11 = OpTypePointer Input %10
%12 = OpVariable %11 Input
%13 = OpTypePointer Input %5
%15 = OpConstant %5 0
%18 = OpConstant %5 1
%21 = OpConstant %5 2
%23 = OpVariable %13 Input
%26 = OpConstant %5 4294967295
%29 = OpConstant %5 3
%33 = OpConstant %5 11
%39 = OpVariable %13 Input
%66 = OpConstant %5 4
%75 = OpConstant %5 8
%84 = OpConstant %5 16
%93 = OpConstant %5 32
%101 = OpConstant %5 12
%103 = OpTypeVector %5 4
%3 = OpFunction %1 None %2
%4 = OpLabel
OpBranch %109
%109 = OpLabel
%9 = OpLoad %6 %8
%14 = OpAccessChain %13 %12 %15
%16 = OpLoad %5 %14
%17 = OpAccessChain %13 %12 %18
%19 = OpLoad %5 %17
%20 = OpAccessChain %13 %12 %21
%22 = OpLoad %5 %20
%24 = OpLoad %5 %23
%25 = OpIAdd %5 %24 %26
%27 = OpBitwiseAnd %5 %25 %16
%28 = OpGroupNonUniformShuffle %5 %29 %16 %27
%30 = OpGroupNonUniformShuffle %5 %29 %19 %27
%31 = OpGroupNonUniformShuffle %5 %29 %22 %27
%32 = OpGroupNonUniformBroadcast %5 %29 %16 %33
%34 = OpGroupNonUniformBroadcast %5 %29 %19 %33
%35 = OpGroupNonUniformBroadcast %5 %29 %22 %33
%36 = OpIAdd %5 %32 %28
%37 = OpIAdd %5 %34 %30
%38 = OpIAdd %5 %35 %31
%40 = OpLoad %5 %39
%41 = OpBitwiseXor %5 %40 %18
%42 = OpGroupNonUniformQuadSwap %5 %29 %16 %15
%43 = OpGroupNonUniformQuadSwap %5 %29 %19 %15
%44 = OpGroupNonUniformQuadSwap %5 %29 %22 %15
%45 = OpIAdd %5 %36 %42
%46 = OpIAdd %5 %37 %43
%47 = OpIAdd %5 %38 %44
%48 = OpLoad %5 %39
%49 = OpBitwiseXor %5 %48 %21
%50 = OpGroupNonUniformQuadSwap %5 %29 %16 %18
%51 = OpGroupNonUniformQuadSwap %5 %29 %19 %18
%52 = OpGroupNonUniformQuadSwap %5 %29 %22 %18
%53 = OpIAdd %5 %45 %50
%54 = OpIAdd %5 %46 %51
%55 = OpIAdd %5 %47 %52
%56 = OpLoad %5 %39
%57 = OpBitwiseXor %5 %56 %29
%58 = OpGroupNonUniformQuadSwap %5 %29 %16 %21
%59 = OpGroupNonUniformQuadSwap %5 %29 %19 %21
%60 = OpGroupNonUniformQuadSwap %5 %29 %22 %21
%61 = OpIAdd %5 %53 %58
%62 = OpIAdd %5 %54 %59
%63 = OpIAdd %5 %55 %60
%64 = OpLoad %5 %39
%65 = OpBitwiseXor %5 %64 %66
%67 = OpGroupNonUniformShuffleXor %5 %29 %16 %66
%68 = OpGroupNonUniformShuffleXor %5 %29 %19 %66
%69 = OpGroupNonUniformShuffleXor %5 %29 %22 %66
%70 = OpIAdd %5 %61 %67
%71 = OpIAdd %5 %62 %68
%72 = OpIAdd %5 %63 %69
%73 = OpLoad %5 %39
%74 = OpBitwiseXor %5 %73 %75
%76 = OpGroupNonUniformShuffleXor %5 %29 %16 %75
%77 = OpGroupNonUniformShuffleXor %5 %29 %19 %75
%78 = OpGroupNonUniformShuffleXor %5 %29 %22 %75
%79 = OpIAdd %5 %70 %76
%80 = OpIAdd %5 %71 %77
%81 = OpIAdd %5 %72 %78
%82 = OpLoad %5 %39
%83 = OpBitwiseXor %5 %82 %84
%85 = OpGroupNonUniformShuffleXor %5 %29 %16 %84
%86 = OpGroupNonUniformShuffleXor %5 %29 %19 %84
%87 = OpGroupNonUniformShuffleXor %5 %29 %22 %84
%88 = OpIAdd %5 %79 %85
%89 = OpIAdd %5 %80 %86
%90 = OpIAdd %5 %81 %87
%91 = OpLoad %5 %39
%92 = OpBitwiseXor %5 %91 %93
%94 = OpGroupNonUniformShuffleXor %5 %29 %16 %93
%95 = OpGroupNonUniformShuffleXor %5 %29 %19 %93
%96 = OpGroupNonUniformShuffleXor %5 %29 %22 %93
%97 = OpIAdd %5 %88 %94
%98 = OpIAdd %5 %89 %95
%99 = OpIAdd %5 %90 %96
%100 = OpIMul %5 %16 %101
%102 = OpIMul %5 %16 %29
%104 = OpCompositeConstruct %103 %97 %97 %97 %97
OpImageWrite %9 %102 %104
%105 = OpCompositeConstruct %103 %98 %98 %98 %98
%106 = OpIAdd %5 %102 %18
OpImageWrite %9 %106 %105
%107 = OpCompositeConstruct %103 %99 %99 %99 %99
%108 = OpIAdd %5 %102 %21
OpImageWrite %9 %108 %107
OpReturn
OpFunctionEnd
#endif
