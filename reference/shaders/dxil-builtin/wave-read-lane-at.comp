#version 460
#extension GL_KHR_shader_subgroup_basic : require
#extension GL_KHR_shader_subgroup_shuffle : require
#extension GL_KHR_shader_subgroup_ballot : require
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, r32ui) uniform writeonly uimageBuffer _8;

uint _42;

void main()
{
    uint _27 = (gl_SubgroupSize + 4294967295u) & gl_GlobalInvocationID.x;
    uint _41 = (gl_GlobalInvocationID.x * 12u) >> 2u;
    imageStore(_8, int(_41), uvec4(subgroupBroadcast(gl_GlobalInvocationID.x, 11u) + subgroupShuffle(gl_GlobalInvocationID.x, _27)));
    imageStore(_8, int(_41 + 1u), uvec4(subgroupBroadcast(gl_GlobalInvocationID.y, 11u) + subgroupShuffle(gl_GlobalInvocationID.y, _27)));
    imageStore(_8, int(_41 + 2u), uvec4(subgroupBroadcast(gl_GlobalInvocationID.z, 11u) + subgroupShuffle(gl_GlobalInvocationID.z, _27)));
}


#if 0
// LLVM disassembly
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%struct.RWByteAddressBuffer = type { i32 }

define void @main() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 0, i32 0, i1 false)
  %2 = call i32 @dx.op.threadId.i32(i32 93, i32 0)
  %3 = call i32 @dx.op.threadId.i32(i32 93, i32 1)
  %4 = call i32 @dx.op.threadId.i32(i32 93, i32 2)
  %5 = call i32 @dx.op.waveGetLaneCount(i32 112)
  %6 = add i32 %5, -1
  %7 = and i32 %6, %2
  %8 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %2, i32 %7)
  %9 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %3, i32 %7)
  %10 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %4, i32 %7)
  %11 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %2, i32 11)
  %12 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %3, i32 11)
  %13 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %4, i32 11)
  %14 = add i32 %11, %8
  %15 = add i32 %12, %9
  %16 = add i32 %13, %10
  %17 = mul i32 %2, 12
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1, i32 %17, i32 undef, i32 %14, i32 %15, i32 %16, i32 undef, i8 7)
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind
declare i32 @dx.op.waveReadLaneAt.i32(i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.waveGetLaneCount(i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

; Function Attrs: nounwind
declare void @dx.op.bufferStore.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i8) #1

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!7}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 5}
!3 = !{!"cs", i32 6, i32 0}
!4 = !{null, !5, null, null}
!5 = !{!6}
!6 = !{i32 0, %struct.RWByteAddressBuffer* undef, !"", i32 0, i32 0, i32 1, i32 11, i1 false, i1 false, i1 false, null}
!7 = !{void ()* @main, !"main", null, !4, !8}
!8 = !{i32 0, i64 524304, i32 4, !9}
!9 = !{i32 64, i32 1, i32 1}
#endif
#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 51
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpCapability GroupNonUniform
OpCapability GroupNonUniformBallot
OpCapability GroupNonUniformShuffle
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %12 %23
OpExecutionMode %3 LocalSize 64 1 1
OpName %3 "main"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %12 BuiltIn GlobalInvocationId
OpDecorate %23 BuiltIn SubgroupSize
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%10 = OpTypeVector %5 3
%11 = OpTypePointer Input %10
%12 = OpVariable %11 Input
%13 = OpTypePointer Input %5
%15 = OpConstant %5 0
%18 = OpConstant %5 1
%21 = OpConstant %5 2
%23 = OpVariable %13 Input
%26 = OpConstant %5 4294967295
%29 = OpConstant %5 3
%33 = OpConstant %5 11
%40 = OpConstant %5 12
%43 = OpTypeVector %5 4
%3 = OpFunction %1 None %2
%4 = OpLabel
%42 = OpUndef %5
OpBranch %49
%49 = OpLabel
%9 = OpLoad %6 %8
%14 = OpAccessChain %13 %12 %15
%16 = OpLoad %5 %14
%17 = OpAccessChain %13 %12 %18
%19 = OpLoad %5 %17
%20 = OpAccessChain %13 %12 %21
%22 = OpLoad %5 %20
%24 = OpLoad %5 %23
%25 = OpIAdd %5 %24 %26
%27 = OpBitwiseAnd %5 %25 %16
%28 = OpGroupNonUniformShuffle %5 %29 %16 %27
%30 = OpGroupNonUniformShuffle %5 %29 %19 %27
%31 = OpGroupNonUniformShuffle %5 %29 %22 %27
%32 = OpGroupNonUniformBroadcast %5 %29 %16 %33
%34 = OpGroupNonUniformBroadcast %5 %29 %19 %33
%35 = OpGroupNonUniformBroadcast %5 %29 %22 %33
%36 = OpIAdd %5 %32 %28
%37 = OpIAdd %5 %34 %30
%38 = OpIAdd %5 %35 %31
%39 = OpIMul %5 %16 %40
%41 = OpShiftRightLogical %5 %39 %21
%44 = OpCompositeConstruct %43 %36 %36 %36 %36
OpImageWrite %9 %41 %44
%45 = OpCompositeConstruct %43 %37 %37 %37 %37
%46 = OpIAdd %5 %41 %18
OpImageWrite %9 %46 %45
%47 = OpCompositeConstruct %43 %38 %38 %38 %38
%48 = OpIAdd %5 %41 %21
OpImageWrite %9 %48 %47
OpReturn
OpFunctionEnd
#endif
