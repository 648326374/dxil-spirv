#version 460
#extension GL_KHR_shader_subgroup_arithmetic : require
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, r32ui) uniform writeonly uimageBuffer _8;
layout(set = 0, binding = 1, r32ui) uniform writeonly uimageBuffer _9;
layout(set = 0, binding = 2, r32ui) uniform writeonly uimageBuffer _10;

uint _27;

void main()
{
    uint _23 = gl_GlobalInvocationID.x * 28u;
    imageStore(_8, int(_23 >> 2u), uvec4(subgroupAdd(gl_GlobalInvocationID.x)));
    uint _31 = _23 + 4u;
    imageStore(_8, int(_31 >> 2u), uvec4(subgroupMul(gl_GlobalInvocationID.x)));
    uint _36 = _23 + 8u;
    imageStore(_8, int(_36 >> 2u), uvec4(subgroupAnd(gl_GlobalInvocationID.x)));
    uint _41 = _23 + 12u;
    imageStore(_8, int(_41 >> 2u), uvec4(subgroupOr(gl_GlobalInvocationID.x)));
    uint _46 = _23 + 16u;
    imageStore(_8, int(_46 >> 2u), uvec4(subgroupXor(gl_GlobalInvocationID.x)));
    uint _51 = _23 + 20u;
    imageStore(_8, int(_51 >> 2u), uvec4(subgroupMin(gl_GlobalInvocationID.x)));
    uint _56 = _23 + 24u;
    imageStore(_8, int(_56 >> 2u), uvec4(subgroupMax(gl_GlobalInvocationID.x)));
    imageStore(_9, int(_23 >> 2u), uvec4(subgroupAdd(gl_GlobalInvocationID.x)));
    imageStore(_9, int(_31 >> 2u), uvec4(subgroupMul(gl_GlobalInvocationID.x)));
    imageStore(_9, int(_36 >> 2u), uvec4(subgroupAnd(gl_GlobalInvocationID.x)));
    imageStore(_9, int(_41 >> 2u), uvec4(subgroupOr(gl_GlobalInvocationID.x)));
    imageStore(_9, int(_46 >> 2u), uvec4(subgroupXor(gl_GlobalInvocationID.x)));
    imageStore(_9, int(_51 >> 2u), uvec4(subgroupMin(gl_GlobalInvocationID.x)));
    imageStore(_9, int(_56 >> 2u), uvec4(subgroupMax(gl_GlobalInvocationID.x)));
    float _82 = float(gl_GlobalInvocationID.x);
    imageStore(_10, int(_23 >> 2u), uvec4(uint(subgroupAdd(_82))));
    imageStore(_10, int(_31 >> 2u), uvec4(uint(subgroupMul(_82))));
    imageStore(_10, int(_51 >> 2u), uvec4(uint(subgroupMin(_82))));
    imageStore(_10, int(_56 >> 2u), uvec4(uint(subgroupMax(_82))));
}


#if 0
// LLVM disassembly
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%struct.RWByteAddressBuffer = type { i32 }

define void @main() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 2, i32 2, i1 false)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 1, i32 1, i1 false)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 0, i32 0, i1 false)
  %4 = call i32 @dx.op.threadId.i32(i32 93, i32 0)
  %5 = call i32 @dx.op.waveActiveOp.i32(i32 119, i32 %4, i8 0, i8 1)
  %6 = mul i32 %4, 28
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %3, i32 %6, i32 undef, i32 %5, i32 undef, i32 undef, i32 undef, i8 1)
  %7 = call i32 @dx.op.waveActiveOp.i32(i32 119, i32 %4, i8 1, i8 1)
  %8 = add i32 %6, 4
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %3, i32 %8, i32 undef, i32 %7, i32 undef, i32 undef, i32 undef, i8 1)
  %9 = call i32 @dx.op.waveActiveBit.i32(i32 120, i32 %4, i8 0)
  %10 = add i32 %6, 8
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %3, i32 %10, i32 undef, i32 %9, i32 undef, i32 undef, i32 undef, i8 1)
  %11 = call i32 @dx.op.waveActiveBit.i32(i32 120, i32 %4, i8 1)
  %12 = add i32 %6, 12
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %3, i32 %12, i32 undef, i32 %11, i32 undef, i32 undef, i32 undef, i8 1)
  %13 = call i32 @dx.op.waveActiveBit.i32(i32 120, i32 %4, i8 2)
  %14 = add i32 %6, 16
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %3, i32 %14, i32 undef, i32 %13, i32 undef, i32 undef, i32 undef, i8 1)
  %15 = call i32 @dx.op.waveActiveOp.i32(i32 119, i32 %4, i8 2, i8 1)
  %16 = add i32 %6, 20
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %3, i32 %16, i32 undef, i32 %15, i32 undef, i32 undef, i32 undef, i8 1)
  %17 = call i32 @dx.op.waveActiveOp.i32(i32 119, i32 %4, i8 3, i8 1)
  %18 = add i32 %6, 24
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %3, i32 %18, i32 undef, i32 %17, i32 undef, i32 undef, i32 undef, i8 1)
  %19 = call i32 @dx.op.waveActiveOp.i32(i32 119, i32 %4, i8 0, i8 0)
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %2, i32 %6, i32 undef, i32 %19, i32 undef, i32 undef, i32 undef, i8 1)
  %20 = call i32 @dx.op.waveActiveOp.i32(i32 119, i32 %4, i8 1, i8 0)
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %2, i32 %8, i32 undef, i32 %20, i32 undef, i32 undef, i32 undef, i8 1)
  %21 = call i32 @dx.op.waveActiveBit.i32(i32 120, i32 %4, i8 0)
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %2, i32 %10, i32 undef, i32 %21, i32 undef, i32 undef, i32 undef, i8 1)
  %22 = call i32 @dx.op.waveActiveBit.i32(i32 120, i32 %4, i8 1)
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %2, i32 %12, i32 undef, i32 %22, i32 undef, i32 undef, i32 undef, i8 1)
  %23 = call i32 @dx.op.waveActiveBit.i32(i32 120, i32 %4, i8 2)
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %2, i32 %14, i32 undef, i32 %23, i32 undef, i32 undef, i32 undef, i8 1)
  %24 = call i32 @dx.op.waveActiveOp.i32(i32 119, i32 %4, i8 2, i8 0)
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %2, i32 %16, i32 undef, i32 %24, i32 undef, i32 undef, i32 undef, i8 1)
  %25 = call i32 @dx.op.waveActiveOp.i32(i32 119, i32 %4, i8 3, i8 0)
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %2, i32 %18, i32 undef, i32 %25, i32 undef, i32 undef, i32 undef, i8 1)
  %26 = uitofp i32 %4 to float
  %27 = call float @dx.op.waveActiveOp.f32(i32 119, float %26, i8 0, i8 0)
  %28 = fptoui float %27 to i32
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1, i32 %6, i32 undef, i32 %28, i32 undef, i32 undef, i32 undef, i8 1)
  %29 = call float @dx.op.waveActiveOp.f32(i32 119, float %26, i8 1, i8 0)
  %30 = fptoui float %29 to i32
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1, i32 %8, i32 undef, i32 %30, i32 undef, i32 undef, i32 undef, i8 1)
  %31 = call float @dx.op.waveActiveOp.f32(i32 119, float %26, i8 2, i8 0)
  %32 = fptoui float %31 to i32
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1, i32 %16, i32 undef, i32 %32, i32 undef, i32 undef, i32 undef, i8 1)
  %33 = call float @dx.op.waveActiveOp.f32(i32 119, float %26, i8 3, i8 0)
  %34 = fptoui float %33 to i32
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1, i32 %18, i32 undef, i32 %34, i32 undef, i32 undef, i32 undef, i8 1)
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind
declare i32 @dx.op.waveActiveOp.i32(i32, i32, i8, i8) #1

; Function Attrs: nounwind
declare i32 @dx.op.waveActiveBit.i32(i32, i32, i8) #1

; Function Attrs: nounwind
declare float @dx.op.waveActiveOp.f32(i32, float, i8, i8) #1

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

; Function Attrs: nounwind
declare void @dx.op.bufferStore.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i8) #1

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!9}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 5}
!3 = !{!"cs", i32 6, i32 0}
!4 = !{null, !5, null, null}
!5 = !{!6, !7, !8}
!6 = !{i32 0, %struct.RWByteAddressBuffer* undef, !"", i32 0, i32 0, i32 1, i32 11, i1 false, i1 false, i1 false, null}
!7 = !{i32 1, %struct.RWByteAddressBuffer* undef, !"", i32 0, i32 1, i32 1, i32 11, i1 false, i1 false, i1 false, null}
!8 = !{i32 2, %struct.RWByteAddressBuffer* undef, !"", i32 0, i32 2, i32 1, i32 11, i1 false, i1 false, i1 false, null}
!9 = !{void ()* @main, !"main", null, !4, !10}
!10 = !{i32 0, i64 524304, i32 4, !11}
!11 = !{i32 64, i32 1, i32 1}
#endif
#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 101
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpCapability GroupNonUniformArithmetic
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %16
OpExecutionMode %3 LocalSize 64 1 1
OpName %3 "main"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %9 DescriptorSet 0
OpDecorate %9 Binding 1
OpDecorate %10 DescriptorSet 0
OpDecorate %10 Binding 2
OpDecorate %16 BuiltIn GlobalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%9 = OpVariable %7 UniformConstant
%10 = OpVariable %7 UniformConstant
%14 = OpTypeVector %5 3
%15 = OpTypePointer Input %14
%16 = OpVariable %15 Input
%17 = OpTypePointer Input %5
%19 = OpConstant %5 0
%22 = OpConstant %5 3
%24 = OpConstant %5 28
%26 = OpConstant %5 2
%28 = OpTypeVector %5 4
%32 = OpConstant %5 4
%37 = OpConstant %5 8
%42 = OpConstant %5 12
%47 = OpConstant %5 16
%52 = OpConstant %5 20
%57 = OpConstant %5 24
%81 = OpTypeFloat 32
%3 = OpFunction %1 None %2
%4 = OpLabel
%27 = OpUndef %5
OpBranch %99
%99 = OpLabel
%11 = OpLoad %6 %10
%12 = OpLoad %6 %9
%13 = OpLoad %6 %8
%18 = OpAccessChain %17 %16 %19
%20 = OpLoad %5 %18
%21 = OpGroupNonUniformIAdd %5 %22 Reduce %20
%23 = OpIMul %5 %20 %24
%25 = OpShiftRightLogical %5 %23 %26
%29 = OpCompositeConstruct %28 %21 %21 %21 %21
OpImageWrite %13 %25 %29
%30 = OpGroupNonUniformIMul %5 %22 Reduce %20
%31 = OpIAdd %5 %23 %32
%33 = OpShiftRightLogical %5 %31 %26
%34 = OpCompositeConstruct %28 %30 %30 %30 %30
OpImageWrite %13 %33 %34
%35 = OpGroupNonUniformBitwiseAnd %5 %22 Reduce %20
%36 = OpIAdd %5 %23 %37
%38 = OpShiftRightLogical %5 %36 %26
%39 = OpCompositeConstruct %28 %35 %35 %35 %35
OpImageWrite %13 %38 %39
%40 = OpGroupNonUniformBitwiseOr %5 %22 Reduce %20
%41 = OpIAdd %5 %23 %42
%43 = OpShiftRightLogical %5 %41 %26
%44 = OpCompositeConstruct %28 %40 %40 %40 %40
OpImageWrite %13 %43 %44
%45 = OpGroupNonUniformBitwiseXor %5 %22 Reduce %20
%46 = OpIAdd %5 %23 %47
%48 = OpShiftRightLogical %5 %46 %26
%49 = OpCompositeConstruct %28 %45 %45 %45 %45
OpImageWrite %13 %48 %49
%50 = OpGroupNonUniformUMin %5 %22 Reduce %20
%51 = OpIAdd %5 %23 %52
%53 = OpShiftRightLogical %5 %51 %26
%54 = OpCompositeConstruct %28 %50 %50 %50 %50
OpImageWrite %13 %53 %54
%55 = OpGroupNonUniformUMax %5 %22 Reduce %20
%56 = OpIAdd %5 %23 %57
%58 = OpShiftRightLogical %5 %56 %26
%59 = OpCompositeConstruct %28 %55 %55 %55 %55
OpImageWrite %13 %58 %59
%60 = OpGroupNonUniformIAdd %5 %22 Reduce %20
%61 = OpShiftRightLogical %5 %23 %26
%62 = OpCompositeConstruct %28 %60 %60 %60 %60
OpImageWrite %12 %61 %62
%63 = OpGroupNonUniformIMul %5 %22 Reduce %20
%64 = OpShiftRightLogical %5 %31 %26
%65 = OpCompositeConstruct %28 %63 %63 %63 %63
OpImageWrite %12 %64 %65
%66 = OpGroupNonUniformBitwiseAnd %5 %22 Reduce %20
%67 = OpShiftRightLogical %5 %36 %26
%68 = OpCompositeConstruct %28 %66 %66 %66 %66
OpImageWrite %12 %67 %68
%69 = OpGroupNonUniformBitwiseOr %5 %22 Reduce %20
%70 = OpShiftRightLogical %5 %41 %26
%71 = OpCompositeConstruct %28 %69 %69 %69 %69
OpImageWrite %12 %70 %71
%72 = OpGroupNonUniformBitwiseXor %5 %22 Reduce %20
%73 = OpShiftRightLogical %5 %46 %26
%74 = OpCompositeConstruct %28 %72 %72 %72 %72
OpImageWrite %12 %73 %74
%75 = OpGroupNonUniformSMin %5 %22 Reduce %20
%76 = OpShiftRightLogical %5 %51 %26
%77 = OpCompositeConstruct %28 %75 %75 %75 %75
OpImageWrite %12 %76 %77
%78 = OpGroupNonUniformSMax %5 %22 Reduce %20
%79 = OpShiftRightLogical %5 %56 %26
%80 = OpCompositeConstruct %28 %78 %78 %78 %78
OpImageWrite %12 %79 %80
%82 = OpConvertUToF %81 %20
%83 = OpGroupNonUniformFAdd %81 %22 Reduce %82
%84 = OpConvertFToU %5 %83
%85 = OpShiftRightLogical %5 %23 %26
%86 = OpCompositeConstruct %28 %84 %84 %84 %84
OpImageWrite %11 %85 %86
%87 = OpGroupNonUniformFMul %81 %22 Reduce %82
%88 = OpConvertFToU %5 %87
%89 = OpShiftRightLogical %5 %31 %26
%90 = OpCompositeConstruct %28 %88 %88 %88 %88
OpImageWrite %11 %89 %90
%91 = OpGroupNonUniformFMin %81 %22 Reduce %82
%92 = OpConvertFToU %5 %91
%93 = OpShiftRightLogical %5 %51 %26
%94 = OpCompositeConstruct %28 %92 %92 %92 %92
OpImageWrite %11 %93 %94
%95 = OpGroupNonUniformFMax %81 %22 Reduce %82
%96 = OpConvertFToU %5 %95
%97 = OpShiftRightLogical %5 %56 %26
%98 = OpCompositeConstruct %28 %96 %96 %96 %96
OpImageWrite %11 %97 %98
OpReturn
OpFunctionEnd
#endif
