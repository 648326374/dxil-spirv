#version 460
#extension GL_KHR_shader_subgroup_basic : require
#extension GL_KHR_shader_subgroup_shuffle : require
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, r32ui) uniform readonly uimageBuffer _8;
layout(set = 0, binding = 1, r32ui) uniform writeonly uimageBuffer _9;

uint _40;

void main()
{
    uvec4 _23 = imageLoad(_8, int((gl_GlobalInvocationID.x << 2u) >> 2u));
    uint _24 = _23.x;
    uint _39 = (gl_GlobalInvocationID.x << 3u) >> 2u;
    imageStore(_9, int(_39), uvec4(subgroupShuffle(_24, (gl_SubgroupInvocationID & 4294967292u) + 1u)));
    imageStore(_9, int(_39 + 1u), uvec4(subgroupShuffle(_24, (gl_SubgroupInvocationID & 4294967292u) + (_24 & 3u))));
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 46
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpCapability GroupNonUniform
OpCapability GroupNonUniformShuffle
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %14 %25
OpExecutionMode %3 LocalSize 64 1 1
OpName %3 "main"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %8 NonWritable
OpDecorate %9 DescriptorSet 0
OpDecorate %9 Binding 1
OpDecorate %9 NonReadable
OpDecorate %14 BuiltIn GlobalInvocationId
OpDecorate %25 BuiltIn SubgroupLocalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%9 = OpVariable %7 UniformConstant
%12 = OpTypeVector %5 3
%13 = OpTypePointer Input %12
%14 = OpVariable %13 Input
%15 = OpTypePointer Input %5
%17 = OpConstant %5 0
%20 = OpConstant %5 2
%22 = OpTypeVector %5 4
%25 = OpVariable %15 Input
%28 = OpConstant %5 4294967292
%30 = OpConstant %5 1
%32 = OpConstant %5 3
%3 = OpFunction %1 None %2
%4 = OpLabel
%40 = OpUndef %5
OpBranch %44
%44 = OpLabel
%10 = OpLoad %6 %9
%11 = OpLoad %6 %8
%16 = OpAccessChain %15 %14 %17
%18 = OpLoad %5 %16
%19 = OpShiftLeftLogical %5 %18 %20
%21 = OpShiftRightLogical %5 %19 %20
%23 = OpImageRead %22 %11 %21
%24 = OpCompositeExtract %5 %23 0
%26 = OpLoad %5 %25
%27 = OpBitwiseAnd %5 %26 %28
%29 = OpIAdd %5 %27 %30
%31 = OpGroupNonUniformShuffle %5 %32 %24 %29
%33 = OpBitwiseAnd %5 %24 %32
%34 = OpLoad %5 %25
%35 = OpBitwiseAnd %5 %34 %28
%36 = OpIAdd %5 %35 %33
%37 = OpGroupNonUniformShuffle %5 %32 %24 %36
%38 = OpShiftLeftLogical %5 %18 %32
%39 = OpShiftRightLogical %5 %38 %20
%41 = OpCompositeConstruct %22 %31 %31 %31 %31
OpImageWrite %10 %39 %41
%42 = OpCompositeConstruct %22 %37 %37 %37 %37
%43 = OpIAdd %5 %39 %30
OpImageWrite %10 %43 %42
OpReturn
OpFunctionEnd
#endif
