#version 460
#extension GL_KHR_shader_subgroup_ballot : require
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform usamplerBuffer _8;
layout(set = 0, binding = 1) uniform usamplerBuffer _9;
layout(set = 0, binding = 0, r32ui) uniform writeonly uimageBuffer _12;

uint WaveMultiPrefixCountBits(bool _52, uvec4 _53)
{
    uvec4 _59 = subgroupBallot(true);
    uvec4 _61 = _59 & _53;
    uint _67;
    for (;;)
    {
        bool _64 = all(equal(_61, subgroupBroadcastFirst(_61)));
        _67 = subgroupBallotExclusiveBitCount(subgroupBallot(_64 && _52));
        if (_64)
        {
            break;
        }
        else
        {
            continue;
        }
    }
    return _67;
}

void main()
{
    uint _23 = gl_GlobalInvocationID.x * 4u;
    imageStore(_12, int(gl_GlobalInvocationID.x), uvec4(WaveMultiPrefixCountBits(texelFetch(_8, int(gl_GlobalInvocationID.x)).x != 10u, uvec4(uvec4(texelFetch(_9, int(_23)).x, texelFetch(_9, int(_23 + 1u)).x, texelFetch(_9, int(_23 + 2u)).x, texelFetch(_9, int(_23 + 3u)).x)))));
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 74
; Schema: 0
OpCapability Shader
OpCapability SampledBuffer
OpCapability ImageBuffer
OpCapability GroupNonUniformArithmetic
OpCapability GroupNonUniformBallot
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %18
OpExecutionMode %3 LocalSize 64 1 1
OpName %3 "main"
OpName %54 "WaveMultiPrefixCountBits"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %9 DescriptorSet 0
OpDecorate %9 Binding 1
OpDecorate %12 DescriptorSet 0
OpDecorate %12 Binding 0
OpDecorate %12 NonReadable
OpDecorate %18 BuiltIn GlobalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 1 Unknown
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%9 = OpVariable %7 UniformConstant
%10 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%11 = OpTypePointer UniformConstant %10
%12 = OpVariable %11 UniformConstant
%16 = OpTypeVector %5 3
%17 = OpTypePointer Input %16
%18 = OpVariable %17 Input
%19 = OpTypePointer Input %5
%21 = OpConstant %5 0
%24 = OpConstant %5 4
%25 = OpTypeVector %5 4
%30 = OpConstant %5 1
%34 = OpConstant %5 2
%38 = OpConstant %5 3
%47 = OpTypeBool
%49 = OpConstant %5 10
%50 = OpTypeVector %47 4
%51 = OpTypeFunction %5 %47 %25
%60 = OpConstantTrue %47
%3 = OpFunction %1 None %2
%4 = OpLabel
OpBranch %72
%72 = OpLabel
%13 = OpLoad %10 %12
%14 = OpLoad %6 %9
%15 = OpLoad %6 %8
%20 = OpAccessChain %19 %18 %21
%22 = OpLoad %5 %20
%23 = OpIMul %5 %22 %24
%26 = OpImageFetch %25 %14 %23
%27 = OpCompositeExtract %5 %26 0
%29 = OpIAdd %5 %23 %30
%28 = OpImageFetch %25 %14 %29
%31 = OpCompositeExtract %5 %28 0
%33 = OpIAdd %5 %23 %34
%32 = OpImageFetch %25 %14 %33
%35 = OpCompositeExtract %5 %32 0
%37 = OpIAdd %5 %23 %38
%36 = OpImageFetch %25 %14 %37
%39 = OpCompositeExtract %5 %36 0
%40 = OpCompositeConstruct %25 %27 %31 %35 %39
%41 = OpCompositeExtract %5 %40 0
%42 = OpCompositeExtract %5 %40 1
%43 = OpCompositeExtract %5 %40 2
%44 = OpCompositeExtract %5 %40 3
%45 = OpImageFetch %25 %15 %22
%46 = OpCompositeExtract %5 %45 0
%48 = OpINotEqual %47 %46 %49
%70 = OpCompositeConstruct %25 %41 %42 %43 %44
%69 = OpFunctionCall %5 %54 %48 %70
%71 = OpCompositeConstruct %25 %69 %69 %69 %69
OpImageWrite %13 %22 %71
OpReturn
OpFunctionEnd
%54 = OpFunction %5 None %51
%52 = OpFunctionParameter %47
%53 = OpFunctionParameter %25
%55 = OpLabel
%59 = OpGroupNonUniformBallot %25 %38 %60
%61 = OpBitwiseAnd %25 %59 %53
OpBranch %56
%56 = OpLabel
OpLoopMerge %58 %57 None
OpBranch %57
%57 = OpLabel
%62 = OpGroupNonUniformBroadcastFirst %25 %38 %61
%63 = OpIEqual %50 %61 %62
%64 = OpAll %47 %63
%65 = OpLogicalAnd %47 %64 %52
%66 = OpGroupNonUniformBallot %25 %38 %65
%67 = OpGroupNonUniformBallotBitCount %5 %38 ExclusiveScan %66
OpBranchConditional %64 %58 %56
%58 = OpLabel
OpReturnValue %67
OpFunctionEnd
#endif
