#version 460
#extension GL_KHR_shader_subgroup_quad : require
#extension GL_KHR_shader_subgroup_basic : require
#extension GL_KHR_shader_subgroup_shuffle : require
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = 0, binding = 0, r32ui) uniform readonly uimageBuffer _8;
layout(set = 0, binding = 1, r32ui) uniform writeonly uimageBuffer _9;

void main()
{
    uint _23 = (gl_WorkGroupID.x << 6u) + gl_LocalInvocationIndex;
    uvec4 _27 = imageLoad(_8, int(_23));
    uint _28 = _27.x;
    uint _40 = _23 * 2u;
    imageStore(_9, int(_40), uvec4(subgroupQuadBroadcast(_28, 1u)));
    imageStore(_9, int(_40 + 1u), uvec4(subgroupShuffle(_28, (gl_SubgroupInvocationID & 4294967292u) + (_28 & 3u))));
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 46
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpCapability GroupNonUniform
OpCapability GroupNonUniformShuffle
OpCapability GroupNonUniformQuad
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %13 %17 %33
OpExecutionMode %3 LocalSize 8 8 1
OpName %3 "main"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %8 NonWritable
OpDecorate %9 DescriptorSet 0
OpDecorate %9 Binding 1
OpDecorate %9 NonReadable
OpDecorate %13 BuiltIn LocalInvocationIndex
OpDecorate %17 BuiltIn WorkgroupId
OpDecorate %33 BuiltIn SubgroupLocalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%9 = OpVariable %7 UniformConstant
%12 = OpTypePointer Input %5
%13 = OpVariable %12 Input
%15 = OpTypeVector %5 3
%16 = OpTypePointer Input %15
%17 = OpVariable %16 Input
%19 = OpConstant %5 0
%22 = OpConstant %5 6
%25 = OpConstant %5 2
%26 = OpTypeVector %5 4
%30 = OpConstant %5 3
%31 = OpConstant %5 1
%33 = OpVariable %12 Input
%36 = OpConstant %5 4294967292
%3 = OpFunction %1 None %2
%4 = OpLabel
OpBranch %44
%44 = OpLabel
%10 = OpLoad %6 %9
%11 = OpLoad %6 %8
%14 = OpLoad %5 %13
%18 = OpAccessChain %12 %17 %19
%20 = OpLoad %5 %18
%21 = OpShiftLeftLogical %5 %20 %22
%23 = OpIAdd %5 %21 %14
%24 = OpShiftLeftLogical %5 %23 %25
%27 = OpImageRead %26 %11 %23
%28 = OpCompositeExtract %5 %27 0
%29 = OpGroupNonUniformQuadBroadcast %5 %30 %28 %31
%32 = OpBitwiseAnd %5 %28 %30
%34 = OpLoad %5 %33
%35 = OpBitwiseAnd %5 %34 %36
%37 = OpIAdd %5 %35 %32
%38 = OpGroupNonUniformShuffle %5 %30 %28 %37
%39 = OpShiftLeftLogical %5 %23 %30
%40 = OpIMul %5 %23 %25
%41 = OpCompositeConstruct %26 %29 %29 %29 %29
OpImageWrite %10 %40 %41
%42 = OpCompositeConstruct %26 %38 %38 %38 %38
%43 = OpIAdd %5 %40 %31
OpImageWrite %10 %43 %42
OpReturn
OpFunctionEnd
#endif
