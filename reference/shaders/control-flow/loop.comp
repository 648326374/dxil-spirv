#version 460
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, r32ui) uniform uimageBuffer _8;

uint _23;

void main()
{
    uint _20;
    if (!(gl_GlobalInvocationID.z == 0u))
    {
        uint _26;
        uint _27;
        _26 = 0u;
        _27 = 0u;
        uint _21;
        for (;;)
        {
            uint _30 = (_27 << 2u) >> 2u;
            _21 = uvec4(imageLoad(_8, int(_30)).x, imageLoad(_8, int(_30 + 1u)).x, imageLoad(_8, int(_30 + 2u)).x, imageLoad(_8, int(_30 + 3u)).x).x + _26;
            uint _28 = _27 + 1u;
            if (_28 == gl_GlobalInvocationID.z)
            {
                break;
            }
            else
            {
                _26 = _21;
                _27 = _28;
            }
        }
        _20 = _21;
    }
    else
    {
        _20 = 0u;
    }
    imageStore(_8, int(0u >> 2u), uvec4(_20));
}


#if 0
// LLVM disassembly
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%struct.RWByteAddressBuffer = type { i32 }

define void @main() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 0, i32 0, i1 false)
  %2 = call i32 @dx.op.threadId.i32(i32 93, i32 2)
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %15, label %4

4:                                                ; preds = %0
  br label %5

5:                                                ; preds = %5, %4
  %6 = phi i32 [ %11, %5 ], [ 0, %4 ]
  %7 = phi i32 [ %12, %5 ], [ 0, %4 ]
  %8 = shl i32 %7, 2
  %9 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %8, i32 undef)
  %10 = extractvalue %dx.types.ResRet.i32 %9, 0
  %11 = add i32 %10, %6
  %12 = add nuw i32 %7, 1
  %13 = icmp eq i32 %12, %2
  br i1 %13, label %14, label %5, !llvm.loop !10

14:                                               ; preds = %5
  br label %15

15:                                               ; preds = %14, %0
  %16 = phi i32 [ 0, %0 ], [ %11, %14 ]
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1, i32 0, i32 undef, i32 %16, i32 undef, i32 undef, i32 undef, i8 1)
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind
declare void @dx.op.bufferStore.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i8) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!7}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 5}
!3 = !{!"cs", i32 6, i32 0}
!4 = !{null, !5, null, null}
!5 = !{!6}
!6 = !{i32 0, %struct.RWByteAddressBuffer* undef, !"", i32 0, i32 0, i32 1, i32 11, i1 false, i1 false, i1 false, null}
!7 = !{void ()* @main, !"main", null, !4, !8}
!8 = !{i32 0, i64 16, i32 4, !9}
!9 = !{i32 1, i32 1, i32 1}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.unroll.disable"}
#endif
#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 53
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %12
OpExecutionMode %3 LocalSize 1 1 1
OpName %3 "main"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %12 BuiltIn GlobalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%10 = OpTypeVector %5 3
%11 = OpTypePointer Input %10
%12 = OpVariable %11 Input
%13 = OpTypePointer Input %5
%15 = OpConstant %5 2
%17 = OpTypeBool
%19 = OpConstant %5 0
%24 = OpTypeVector %5 4
%35 = OpConstant %5 1
%42 = OpConstant %5 3
%3 = OpFunction %1 None %2
%4 = OpLabel
%23 = OpUndef %5
OpBranch %47
%47 = OpLabel
%9 = OpLoad %6 %8
%14 = OpAccessChain %13 %12 %15
%16 = OpLoad %5 %14
%18 = OpIEqual %17 %16 %19
OpSelectionMerge %51 None
OpBranchConditional %18 %51 %48
%48 = OpLabel
OpBranch %49
%49 = OpLabel
%26 = OpPhi %5 %19 %48 %21 %49
%27 = OpPhi %5 %19 %48 %28 %49
%29 = OpShiftLeftLogical %5 %27 %15
%30 = OpShiftRightLogical %5 %29 %15
%31 = OpImageRead %24 %9 %30
%32 = OpCompositeExtract %5 %31 0
%34 = OpIAdd %5 %30 %35
%33 = OpImageRead %24 %9 %34
%36 = OpCompositeExtract %5 %33 0
%38 = OpIAdd %5 %30 %15
%37 = OpImageRead %24 %9 %38
%39 = OpCompositeExtract %5 %37 0
%41 = OpIAdd %5 %30 %42
%40 = OpImageRead %24 %9 %41
%43 = OpCompositeExtract %5 %40 0
%44 = OpCompositeConstruct %24 %32 %36 %39 %43
%45 = OpCompositeExtract %5 %44 0
%21 = OpIAdd %5 %45 %26
%28 = OpIAdd %5 %27 %35
%46 = OpIEqual %17 %28 %16
OpLoopMerge %50 %49 None
OpBranchConditional %46 %50 %49
%50 = OpLabel
OpBranch %51
%51 = OpLabel
%20 = OpPhi %5 %19 %47 %21 %50
%22 = OpShiftRightLogical %5 %19 %15
%25 = OpCompositeConstruct %24 %20 %20 %20 %20
OpImageWrite %9 %22 %25
OpReturn
OpFunctionEnd
#endif
