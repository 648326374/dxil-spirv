#version 460
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, r32ui) uniform uimageBuffer _8;

uint _34;

void main()
{
    uint _28;
    if (gl_GlobalInvocationID.x < 100u)
    {
        uint frontier_phi_3_1_ladder;
        if (!(gl_GlobalInvocationID.x == 0u))
        {
            uint _37;
            _37 = 0u;
            uint _31;
            uint frontier_phi_12;
            uint _39 = 0u;
            bool _40;
            for (;;)
            {
                _40 = gl_GlobalInvocationID.y == 0u;
                uint frontier_phi_8_pred;
                uint frontier_phi_8_pred_1;
                if (!_40)
                {
                    bool ladder_phi_20;
                    uint frontier_phi_20_pred;
                    uint frontier_phi_20_pred_1;
                    uint _49 = _39;
                    uint _50 = 0u;
                    for (;;)
                    {
                        if (imageLoad(_8, int(((_50 ^ _37) << 2u) >> 2u)).x == 100u)
                        {
                            ladder_phi_20 = true;
                            frontier_phi_20_pred = _39;
                            frontier_phi_20_pred_1 = imageLoad(_8, int(128u >> 2u)).x + _49;
                            break;
                        }
                        else
                        {
                            uint _45 = imageLoad(_8, int(((_37 << 2u) * _50) >> 2u)).x + _49;
                            uint _51 = _50 + 1u;
                            if (_51 < gl_GlobalInvocationID.y)
                            {
                                _49 = _45;
                                _50 = _51;
                                continue;
                            }
                            else
                            {
                                ladder_phi_20 = false;
                                frontier_phi_20_pred = _45;
                                frontier_phi_20_pred_1 = 0u;
                                break;
                            }
                        }
                    }
                    if (ladder_phi_20)
                    {
                        frontier_phi_12 = frontier_phi_20_pred_1;
                        break;
                    }
                    frontier_phi_8_pred = frontier_phi_20_pred;
                    frontier_phi_8_pred_1 = frontier_phi_20_pred_1;
                }
                else
                {
                    frontier_phi_8_pred = _39;
                    frontier_phi_8_pred_1 = 0u;
                }
                _31 = frontier_phi_8_pred;
                uint _38 = _37 + 1u;
                if (_38 < gl_GlobalInvocationID.x)
                {
                    _37 = _38;
                    _39 = _31;
                    continue;
                }
                else
                {
                    frontier_phi_12 = _31;
                    break;
                }
            }
            frontier_phi_3_1_ladder = frontier_phi_12;
        }
        else
        {
            frontier_phi_3_1_ladder = 0u;
        }
        _28 = frontier_phi_3_1_ladder;
    }
    else
    {
        uint frontier_phi_3_2_ladder;
        if (!(gl_GlobalInvocationID.z == 0u))
        {
            uint _41;
            _41 = 0u;
            uint _32;
            uint frontier_phi_14;
            uint _43 = 0u;
            bool _44;
            for (;;)
            {
                _44 = gl_GlobalInvocationID.y == 0u;
                uint frontier_phi_10_pred;
                uint frontier_phi_10_pred_1;
                if (!_44)
                {
                    bool ladder_phi_21;
                    uint frontier_phi_21_pred;
                    uint frontier_phi_21_pred_1;
                    uint _58 = 0u;
                    uint _60 = _43;
                    for (;;)
                    {
                        if (imageLoad(_8, int(((_58 ^ _41) << 2u) >> 2u)).x == 100u)
                        {
                            ladder_phi_21 = true;
                            frontier_phi_21_pred = _43;
                            frontier_phi_21_pred_1 = imageLoad(_8, int(128u >> 2u)).x + _60;
                            break;
                        }
                        else
                        {
                            uint _47 = imageLoad(_8, int(((_41 << 2u) * _58) >> 2u)).x + _60;
                            uint _59 = _58 + 1u;
                            if (_59 < gl_GlobalInvocationID.y)
                            {
                                _58 = _59;
                                _60 = _47;
                                continue;
                            }
                            else
                            {
                                ladder_phi_21 = false;
                                frontier_phi_21_pred = _47;
                                frontier_phi_21_pred_1 = 0u;
                                break;
                            }
                        }
                    }
                    if (ladder_phi_21)
                    {
                        frontier_phi_14 = frontier_phi_21_pred_1;
                        break;
                    }
                    frontier_phi_10_pred = frontier_phi_21_pred;
                    frontier_phi_10_pred_1 = frontier_phi_21_pred_1;
                }
                else
                {
                    frontier_phi_10_pred = _43;
                    frontier_phi_10_pred_1 = 0u;
                }
                _32 = frontier_phi_10_pred;
                uint _42 = _41 + 1u;
                if (_42 < gl_GlobalInvocationID.z)
                {
                    _41 = _42;
                    _43 = _32;
                    continue;
                }
                else
                {
                    frontier_phi_14 = _32;
                    break;
                }
            }
            frontier_phi_3_2_ladder = frontier_phi_14;
        }
        else
        {
            frontier_phi_3_2_ladder = 0u;
        }
        _28 = frontier_phi_3_2_ladder;
    }
    imageStore(_8, int(0u >> 2u), uvec4(_28));
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 135
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %12
OpExecutionMode %3 LocalSize 1 1 1
OpName %3 "main"
OpName %86 "ladder_phi_20"
OpName %89 "ladder_phi_21"
OpName %90 "frontier_phi_21.pred"
OpName %91 "frontier_phi_10.pred"
OpName %92 "frontier_phi_20.pred"
OpName %93 "frontier_phi_8.pred"
OpName %94 "frontier_phi_21.pred"
OpName %95 "frontier_phi_10.pred"
OpName %96 "frontier_phi_14"
OpName %97 "frontier_phi_3.2.ladder"
OpName %98 "frontier_phi_20.pred"
OpName %99 "frontier_phi_8.pred"
OpName %100 "frontier_phi_12"
OpName %101 "frontier_phi_3.1.ladder"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %12 BuiltIn GlobalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%10 = OpTypeVector %5 3
%11 = OpTypePointer Input %10
%12 = OpVariable %11 Input
%13 = OpTypePointer Input %5
%15 = OpConstant %5 0
%18 = OpConstant %5 1
%21 = OpConstant %5 2
%23 = OpTypeBool
%25 = OpConstant %5 100
%35 = OpTypeVector %5 4
%67 = OpConstant %5 128
%87 = OpConstantFalse %23
%88 = OpConstantTrue %23
%3 = OpFunction %1 None %2
%4 = OpLabel
%34 = OpUndef %5
OpBranch %102
%102 = OpLabel
%9 = OpLoad %6 %8
%14 = OpAccessChain %13 %12 %15
%16 = OpLoad %5 %14
%17 = OpAccessChain %13 %12 %18
%19 = OpLoad %5 %17
%20 = OpAccessChain %13 %12 %21
%22 = OpLoad %5 %20
%24 = OpULessThan %23 %16 %25
OpSelectionMerge %133 None
OpBranchConditional %24 %118 %103
%118 = OpLabel
%26 = OpIEqual %23 %16 %15
OpSelectionMerge %132 None
OpBranchConditional %26 %132 %119
%119 = OpLabel
OpBranch %120
%120 = OpLabel
%37 = OpPhi %5 %15 %119 %38 %130
%39 = OpPhi %5 %15 %119 %31 %130
%40 = OpIEqual %23 %19 %15
OpLoopMerge %131 %130 None
OpBranch %121
%121 = OpLabel
OpSelectionMerge %129 None
OpBranchConditional %40 %129 %122
%122 = OpLabel
OpBranch %123
%123 = OpLabel
%49 = OpPhi %5 %39 %122 %45 %125
%50 = OpPhi %5 %15 %122 %51 %125
%52 = OpBitwiseXor %5 %50 %37
%53 = OpShiftLeftLogical %5 %52 %21
%54 = OpShiftRightLogical %5 %53 %21
%55 = OpImageRead %35 %9 %54
%56 = OpCompositeExtract %5 %55 0
%57 = OpIEqual %23 %56 %25
OpLoopMerge %127 %125 None
OpBranchConditional %57 %126 %124
%126 = OpLabel
%68 = OpShiftRightLogical %5 %67 %21
%69 = OpImageRead %35 %9 %68
%70 = OpCompositeExtract %5 %69 0
%29 = OpIAdd %5 %70 %49
OpBranch %127
%124 = OpLabel
OpBranch %125
%125 = OpLabel
%71 = OpShiftLeftLogical %5 %37 %21
%72 = OpIMul %5 %71 %50
%73 = OpShiftRightLogical %5 %72 %21
%74 = OpImageRead %35 %9 %73
%75 = OpCompositeExtract %5 %74 0
%45 = OpIAdd %5 %75 %49
%51 = OpIAdd %5 %50 %18
%76 = OpULessThan %23 %51 %19
OpBranchConditional %76 %123 %127
%127 = OpLabel
%86 = OpPhi %23 %87 %125 %88 %126
%92 = OpPhi %5 %45 %125 %39 %126
%98 = OpPhi %5 %15 %125 %29 %126
OpSelectionMerge %128 None
OpBranchConditional %86 %131 %128
%128 = OpLabel
OpBranch %129
%129 = OpLabel
%93 = OpPhi %5 %39 %121 %92 %128
%99 = OpPhi %5 %15 %121 %98 %128
%31 = OpCopyObject %5 %93
OpBranch %130
%130 = OpLabel
%38 = OpIAdd %5 %37 %18
%46 = OpULessThan %23 %38 %16
OpBranchConditional %46 %120 %131
%131 = OpLabel
%100 = OpPhi %5 %31 %130 %98 %127
OpBranch %132
%132 = OpLabel
%101 = OpPhi %5 %15 %118 %100 %131
OpBranch %133
%103 = OpLabel
%27 = OpIEqual %23 %22 %15
OpSelectionMerge %117 None
OpBranchConditional %27 %117 %104
%104 = OpLabel
OpBranch %105
%105 = OpLabel
%41 = OpPhi %5 %15 %104 %42 %115
%43 = OpPhi %5 %15 %104 %32 %115
%44 = OpIEqual %23 %19 %15
OpLoopMerge %116 %115 None
OpBranch %106
%106 = OpLabel
OpSelectionMerge %114 None
OpBranchConditional %44 %114 %107
%107 = OpLabel
OpBranch %108
%108 = OpLabel
%58 = OpPhi %5 %15 %107 %59 %110
%60 = OpPhi %5 %43 %107 %47 %110
%61 = OpBitwiseXor %5 %58 %41
%62 = OpShiftLeftLogical %5 %61 %21
%63 = OpShiftRightLogical %5 %62 %21
%64 = OpImageRead %35 %9 %63
%65 = OpCompositeExtract %5 %64 0
%66 = OpIEqual %23 %65 %25
OpLoopMerge %112 %110 None
OpBranchConditional %66 %111 %109
%111 = OpLabel
%77 = OpShiftRightLogical %5 %67 %21
%78 = OpImageRead %35 %9 %77
%79 = OpCompositeExtract %5 %78 0
%30 = OpIAdd %5 %79 %60
OpBranch %112
%109 = OpLabel
OpBranch %110
%110 = OpLabel
%80 = OpShiftLeftLogical %5 %41 %21
%81 = OpIMul %5 %80 %58
%82 = OpShiftRightLogical %5 %81 %21
%83 = OpImageRead %35 %9 %82
%84 = OpCompositeExtract %5 %83 0
%47 = OpIAdd %5 %84 %60
%59 = OpIAdd %5 %58 %18
%85 = OpULessThan %23 %59 %19
OpBranchConditional %85 %108 %112
%112 = OpLabel
%89 = OpPhi %23 %87 %110 %88 %111
%90 = OpPhi %5 %47 %110 %43 %111
%94 = OpPhi %5 %15 %110 %30 %111
OpSelectionMerge %113 None
OpBranchConditional %89 %116 %113
%113 = OpLabel
OpBranch %114
%114 = OpLabel
%91 = OpPhi %5 %43 %106 %90 %113
%95 = OpPhi %5 %15 %106 %94 %113
%32 = OpCopyObject %5 %91
OpBranch %115
%115 = OpLabel
%42 = OpIAdd %5 %41 %18
%48 = OpULessThan %23 %42 %22
OpBranchConditional %48 %105 %116
%116 = OpLabel
%96 = OpPhi %5 %32 %115 %94 %112
OpBranch %117
%117 = OpLabel
%97 = OpPhi %5 %15 %103 %96 %116
OpBranch %133
%133 = OpLabel
%28 = OpPhi %5 %97 %117 %101 %132
%33 = OpShiftRightLogical %5 %15 %21
%36 = OpCompositeConstruct %35 %28 %28 %28 %28
OpImageWrite %9 %33 %36
OpReturn
OpFunctionEnd
#endif
