#version 460
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, r32ui) uniform uimageBuffer _8;

void main()
{
    uint _28;
    if (gl_GlobalInvocationID.x < 100u)
    {
        uint frontier_phi_3_1_ladder;
        if (gl_GlobalInvocationID.x == 0u)
        {
            frontier_phi_3_1_ladder = 0u;
        }
        else
        {
            uint _35;
            _35 = 0u;
            uint _31;
            uint _85;
            uint _89;
            uint frontier_phi_8_pred_1;
            uint frontier_phi_12;
            uint _37 = 0u;
            bool _38;
            for (;;)
            {
                _38 = gl_GlobalInvocationID.y == 0u;
                uint frontier_phi_8_pred;
                if (_38)
                {
                    frontier_phi_8_pred = _37;
                    frontier_phi_8_pred_1 = 0u;
                }
                else
                {
                    bool ladder_phi_20;
                    uint frontier_phi_20_pred;
                    uint _47 = _37;
                    uint _48 = 0u;
                    for (;;)
                    {
                        uint _50 = _48 ^ _35;
                        if (imageLoad(_8, int(_50)).x == 100u)
                        {
                            ladder_phi_20 = true;
                            frontier_phi_20_pred = imageLoad(_8, int(32u)).x + _47;
                            break;
                        }
                        else
                        {
                            uint _43 = imageLoad(_8, int(((_35 << 2u) * _48) >> 2u)).x + _47;
                            uint _49 = _48 + 1u;
                            _89 = _43;
                            if (_49 < gl_GlobalInvocationID.y)
                            {
                                _47 = _43;
                                _48 = _49;
                                continue;
                            }
                            else
                            {
                                ladder_phi_20 = false;
                                frontier_phi_20_pred = 0u;
                                break;
                            }
                        }
                    }
                    if (ladder_phi_20)
                    {
                        frontier_phi_12 = frontier_phi_20_pred;
                        break;
                    }
                    frontier_phi_8_pred = _89;
                    frontier_phi_8_pred_1 = frontier_phi_20_pred;
                }
                _31 = frontier_phi_8_pred;
                uint _36 = _35 + 1u;
                _85 = _31;
                if (_36 < gl_GlobalInvocationID.x)
                {
                    _35 = _36;
                    _37 = _31;
                    continue;
                }
                else
                {
                    frontier_phi_12 = frontier_phi_8_pred_1;
                    break;
                }
            }
            frontier_phi_3_1_ladder = frontier_phi_12;
        }
        _28 = frontier_phi_3_1_ladder;
    }
    else
    {
        uint frontier_phi_3_2_ladder;
        if (gl_GlobalInvocationID.z == 0u)
        {
            frontier_phi_3_2_ladder = 0u;
        }
        else
        {
            uint _39;
            _39 = 0u;
            uint _32;
            uint _87;
            uint _91;
            uint frontier_phi_10_pred_1;
            uint frontier_phi_14;
            uint _41 = 0u;
            bool _42;
            for (;;)
            {
                _42 = gl_GlobalInvocationID.y == 0u;
                uint frontier_phi_10_pred;
                if (_42)
                {
                    frontier_phi_10_pred = _41;
                    frontier_phi_10_pred_1 = 0u;
                }
                else
                {
                    bool ladder_phi_21;
                    uint frontier_phi_21_pred;
                    uint _55 = 0u;
                    uint _57 = _41;
                    for (;;)
                    {
                        uint _58 = _55 ^ _39;
                        if (imageLoad(_8, int(_58)).x == 100u)
                        {
                            ladder_phi_21 = true;
                            frontier_phi_21_pred = imageLoad(_8, int(32u)).x + _57;
                            break;
                        }
                        else
                        {
                            uint _45 = imageLoad(_8, int(((_39 << 2u) * _55) >> 2u)).x + _57;
                            uint _56 = _55 + 1u;
                            _91 = _45;
                            if (_56 < gl_GlobalInvocationID.y)
                            {
                                _55 = _56;
                                _57 = _45;
                                continue;
                            }
                            else
                            {
                                ladder_phi_21 = false;
                                frontier_phi_21_pred = 0u;
                                break;
                            }
                        }
                    }
                    if (ladder_phi_21)
                    {
                        frontier_phi_14 = frontier_phi_21_pred;
                        break;
                    }
                    frontier_phi_10_pred = _91;
                    frontier_phi_10_pred_1 = frontier_phi_21_pred;
                }
                _32 = frontier_phi_10_pred;
                uint _40 = _39 + 1u;
                _87 = _32;
                if (_40 < gl_GlobalInvocationID.z)
                {
                    _39 = _40;
                    _41 = _32;
                    continue;
                }
                else
                {
                    frontier_phi_14 = frontier_phi_10_pred_1;
                    break;
                }
            }
            frontier_phi_3_2_ladder = frontier_phi_14;
        }
        _28 = frontier_phi_3_2_ladder;
    }
    imageStore(_8, int(0u), uvec4(_28));
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 136
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %12
OpExecutionMode %3 LocalSize 1 1 1
OpName %3 "main"
OpName %80 "ladder_phi_20"
OpName %83 "ladder_phi_21"
OpName %93 "frontier_phi_10.pred"
OpName %94 "frontier_phi_8.pred"
OpName %95 "frontier_phi_21.pred"
OpName %96 "frontier_phi_10.pred"
OpName %97 "frontier_phi_14"
OpName %98 "frontier_phi_3.2.ladder"
OpName %99 "frontier_phi_20.pred"
OpName %100 "frontier_phi_8.pred"
OpName %101 "frontier_phi_12"
OpName %102 "frontier_phi_3.1.ladder"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %12 BuiltIn GlobalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%10 = OpTypeVector %5 3
%11 = OpTypePointer Input %10
%12 = OpVariable %11 Input
%13 = OpTypePointer Input %5
%15 = OpConstant %5 0
%18 = OpConstant %5 1
%21 = OpConstant %5 2
%23 = OpTypeBool
%25 = OpConstant %5 100
%33 = OpTypeVector %5 4
%63 = OpConstant %5 32
%81 = OpConstantFalse %23
%82 = OpConstantTrue %23
%84 = OpTypePointer Function %5
%3 = OpFunction %1 None %2
%4 = OpLabel
%85 = OpVariable %84 Function
%87 = OpVariable %84 Function
%89 = OpVariable %84 Function
%91 = OpVariable %84 Function
OpBranch %103
%103 = OpLabel
%9 = OpLoad %6 %8
%14 = OpAccessChain %13 %12 %15
%16 = OpLoad %5 %14
%17 = OpAccessChain %13 %12 %18
%19 = OpLoad %5 %17
%20 = OpAccessChain %13 %12 %21
%22 = OpLoad %5 %20
%24 = OpULessThan %23 %16 %25
OpSelectionMerge %134 None
OpBranchConditional %24 %119 %104
%119 = OpLabel
%26 = OpIEqual %23 %16 %15
OpSelectionMerge %133 None
OpBranchConditional %26 %133 %120
%120 = OpLabel
OpBranch %121
%121 = OpLabel
%35 = OpPhi %5 %15 %120 %36 %131
%37 = OpPhi %5 %15 %120 %31 %131
%38 = OpIEqual %23 %19 %15
OpLoopMerge %132 %131 None
OpBranch %122
%122 = OpLabel
OpSelectionMerge %130 None
OpBranchConditional %38 %130 %123
%123 = OpLabel
OpBranch %124
%124 = OpLabel
%47 = OpPhi %5 %37 %123 %43 %126
%48 = OpPhi %5 %15 %123 %49 %126
%50 = OpBitwiseXor %5 %48 %35
%51 = OpShiftLeftLogical %5 %50 %21
%52 = OpImageRead %33 %9 %50
%53 = OpCompositeExtract %5 %52 0
%54 = OpIEqual %23 %53 %25
OpLoopMerge %128 %126 None
OpBranchConditional %54 %127 %125
%127 = OpLabel
%64 = OpImageRead %33 %9 %63
%65 = OpCompositeExtract %5 %64 0
%29 = OpIAdd %5 %65 %47
OpBranch %128
%125 = OpLabel
OpBranch %126
%126 = OpLabel
%66 = OpShiftLeftLogical %5 %35 %21
%67 = OpIMul %5 %66 %48
%68 = OpShiftRightLogical %5 %67 %21
%69 = OpImageRead %33 %9 %68
%70 = OpCompositeExtract %5 %69 0
%43 = OpIAdd %5 %70 %47
%49 = OpIAdd %5 %48 %18
%71 = OpULessThan %23 %49 %19
OpStore %89 %43
OpBranchConditional %71 %124 %128
%128 = OpLabel
%80 = OpPhi %23 %81 %126 %82 %127
%99 = OpPhi %5 %15 %126 %29 %127
OpSelectionMerge %129 None
OpBranchConditional %80 %132 %129
%129 = OpLabel
%90 = OpLoad %5 %89
OpBranch %130
%130 = OpLabel
%94 = OpPhi %5 %37 %122 %90 %129
%100 = OpPhi %5 %15 %122 %99 %129
%31 = OpCopyObject %5 %94
OpBranch %131
%131 = OpLabel
%36 = OpIAdd %5 %35 %18
%44 = OpULessThan %23 %36 %16
OpStore %85 %31
OpBranchConditional %44 %121 %132
%132 = OpLabel
%101 = OpPhi %5 %100 %131 %99 %128
%86 = OpLoad %5 %85
OpBranch %133
%133 = OpLabel
%102 = OpPhi %5 %15 %119 %101 %132
OpBranch %134
%104 = OpLabel
%27 = OpIEqual %23 %22 %15
OpSelectionMerge %118 None
OpBranchConditional %27 %118 %105
%105 = OpLabel
OpBranch %106
%106 = OpLabel
%39 = OpPhi %5 %15 %105 %40 %116
%41 = OpPhi %5 %15 %105 %32 %116
%42 = OpIEqual %23 %19 %15
OpLoopMerge %117 %116 None
OpBranch %107
%107 = OpLabel
OpSelectionMerge %115 None
OpBranchConditional %42 %115 %108
%108 = OpLabel
OpBranch %109
%109 = OpLabel
%55 = OpPhi %5 %15 %108 %56 %111
%57 = OpPhi %5 %41 %108 %45 %111
%58 = OpBitwiseXor %5 %55 %39
%59 = OpShiftLeftLogical %5 %58 %21
%60 = OpImageRead %33 %9 %58
%61 = OpCompositeExtract %5 %60 0
%62 = OpIEqual %23 %61 %25
OpLoopMerge %113 %111 None
OpBranchConditional %62 %112 %110
%112 = OpLabel
%72 = OpImageRead %33 %9 %63
%73 = OpCompositeExtract %5 %72 0
%30 = OpIAdd %5 %73 %57
OpBranch %113
%110 = OpLabel
OpBranch %111
%111 = OpLabel
%74 = OpShiftLeftLogical %5 %39 %21
%75 = OpIMul %5 %74 %55
%76 = OpShiftRightLogical %5 %75 %21
%77 = OpImageRead %33 %9 %76
%78 = OpCompositeExtract %5 %77 0
%45 = OpIAdd %5 %78 %57
%56 = OpIAdd %5 %55 %18
%79 = OpULessThan %23 %56 %19
OpStore %91 %45
OpBranchConditional %79 %109 %113
%113 = OpLabel
%83 = OpPhi %23 %81 %111 %82 %112
%95 = OpPhi %5 %15 %111 %30 %112
OpSelectionMerge %114 None
OpBranchConditional %83 %117 %114
%114 = OpLabel
%92 = OpLoad %5 %91
OpBranch %115
%115 = OpLabel
%93 = OpPhi %5 %41 %107 %92 %114
%96 = OpPhi %5 %15 %107 %95 %114
%32 = OpCopyObject %5 %93
OpBranch %116
%116 = OpLabel
%40 = OpIAdd %5 %39 %18
%46 = OpULessThan %23 %40 %22
OpStore %87 %32
OpBranchConditional %46 %106 %117
%117 = OpLabel
%97 = OpPhi %5 %96 %116 %95 %113
%88 = OpLoad %5 %87
OpBranch %118
%118 = OpLabel
%98 = OpPhi %5 %15 %104 %97 %117
OpBranch %134
%134 = OpLabel
%28 = OpPhi %5 %98 %118 %102 %133
%34 = OpCompositeConstruct %33 %28 %28 %28 %28
OpImageWrite %9 %15 %34
OpReturn
OpFunctionEnd
#endif
