#version 460
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, r32ui) uniform uimageBuffer _8;

void main()
{
    uint _28;
    if (gl_GlobalInvocationID.x < 100u)
    {
        uint frontier_phi_3_1_ladder;
        if (!(gl_GlobalInvocationID.x == 0u))
        {
            uint _36;
            _36 = 0u;
            uint _31;
            uint frontier_phi_12;
            uint _38 = 0u;
            bool _39;
            for (;;)
            {
                _39 = gl_GlobalInvocationID.y == 0u;
                uint frontier_phi_8_pred;
                uint frontier_phi_8_pred_1;
                if (!_39)
                {
                    bool ladder_phi_20;
                    uint frontier_phi_20_pred;
                    uint frontier_phi_20_pred_1;
                    uint _48 = _38;
                    uint _49 = 0u;
                    for (;;)
                    {
                        if (imageLoad(_8, int(((_49 ^ _36) << 2u) >> 2u)).x == 100u)
                        {
                            ladder_phi_20 = true;
                            frontier_phi_20_pred = _38;
                            frontier_phi_20_pred_1 = imageLoad(_8, int(128u >> 2u)).x + _48;
                            break;
                        }
                        else
                        {
                            uint _44 = imageLoad(_8, int(((_36 << 2u) * _49) >> 2u)).x + _48;
                            uint _50 = _49 + 1u;
                            if (_50 < gl_GlobalInvocationID.y)
                            {
                                _48 = _44;
                                _49 = _50;
                                continue;
                            }
                            else
                            {
                                ladder_phi_20 = false;
                                frontier_phi_20_pred = _44;
                                frontier_phi_20_pred_1 = 0u;
                                break;
                            }
                        }
                    }
                    if (ladder_phi_20)
                    {
                        frontier_phi_12 = frontier_phi_20_pred_1;
                        break;
                    }
                    frontier_phi_8_pred = frontier_phi_20_pred;
                    frontier_phi_8_pred_1 = frontier_phi_20_pred_1;
                }
                else
                {
                    frontier_phi_8_pred = _38;
                    frontier_phi_8_pred_1 = 0u;
                }
                _31 = frontier_phi_8_pred;
                uint _37 = _36 + 1u;
                if (_37 < gl_GlobalInvocationID.x)
                {
                    _36 = _37;
                    _38 = _31;
                    continue;
                }
                else
                {
                    frontier_phi_12 = _31;
                    break;
                }
            }
            frontier_phi_3_1_ladder = frontier_phi_12;
        }
        else
        {
            frontier_phi_3_1_ladder = 0u;
        }
        _28 = frontier_phi_3_1_ladder;
    }
    else
    {
        uint frontier_phi_3_2_ladder;
        if (!(gl_GlobalInvocationID.z == 0u))
        {
            uint _40;
            _40 = 0u;
            uint _32;
            uint frontier_phi_14;
            uint _42 = 0u;
            bool _43;
            for (;;)
            {
                _43 = gl_GlobalInvocationID.y == 0u;
                uint frontier_phi_10_pred;
                uint frontier_phi_10_pred_1;
                if (!_43)
                {
                    bool ladder_phi_21;
                    uint frontier_phi_21_pred;
                    uint frontier_phi_21_pred_1;
                    uint _57 = 0u;
                    uint _59 = _42;
                    for (;;)
                    {
                        if (imageLoad(_8, int(((_57 ^ _40) << 2u) >> 2u)).x == 100u)
                        {
                            ladder_phi_21 = true;
                            frontier_phi_21_pred = _42;
                            frontier_phi_21_pred_1 = imageLoad(_8, int(128u >> 2u)).x + _59;
                            break;
                        }
                        else
                        {
                            uint _46 = imageLoad(_8, int(((_40 << 2u) * _57) >> 2u)).x + _59;
                            uint _58 = _57 + 1u;
                            if (_58 < gl_GlobalInvocationID.y)
                            {
                                _57 = _58;
                                _59 = _46;
                                continue;
                            }
                            else
                            {
                                ladder_phi_21 = false;
                                frontier_phi_21_pred = _46;
                                frontier_phi_21_pred_1 = 0u;
                                break;
                            }
                        }
                    }
                    if (ladder_phi_21)
                    {
                        frontier_phi_14 = frontier_phi_21_pred_1;
                        break;
                    }
                    frontier_phi_10_pred = frontier_phi_21_pred;
                    frontier_phi_10_pred_1 = frontier_phi_21_pred_1;
                }
                else
                {
                    frontier_phi_10_pred = _42;
                    frontier_phi_10_pred_1 = 0u;
                }
                _32 = frontier_phi_10_pred;
                uint _41 = _40 + 1u;
                if (_41 < gl_GlobalInvocationID.z)
                {
                    _40 = _41;
                    _42 = _32;
                    continue;
                }
                else
                {
                    frontier_phi_14 = _32;
                    break;
                }
            }
            frontier_phi_3_2_ladder = frontier_phi_14;
        }
        else
        {
            frontier_phi_3_2_ladder = 0u;
        }
        _28 = frontier_phi_3_2_ladder;
    }
    imageStore(_8, int(0u >> 2u), uvec4(_28));
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 134
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %12
OpExecutionMode %3 LocalSize 1 1 1
OpName %3 "main"
OpName %85 "ladder_phi_20"
OpName %88 "ladder_phi_21"
OpName %89 "frontier_phi_21.pred"
OpName %90 "frontier_phi_10.pred"
OpName %91 "frontier_phi_20.pred"
OpName %92 "frontier_phi_8.pred"
OpName %93 "frontier_phi_21.pred"
OpName %94 "frontier_phi_10.pred"
OpName %95 "frontier_phi_14"
OpName %96 "frontier_phi_3.2.ladder"
OpName %97 "frontier_phi_20.pred"
OpName %98 "frontier_phi_8.pred"
OpName %99 "frontier_phi_12"
OpName %100 "frontier_phi_3.1.ladder"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %12 BuiltIn GlobalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%10 = OpTypeVector %5 3
%11 = OpTypePointer Input %10
%12 = OpVariable %11 Input
%13 = OpTypePointer Input %5
%15 = OpConstant %5 0
%18 = OpConstant %5 1
%21 = OpConstant %5 2
%23 = OpTypeBool
%25 = OpConstant %5 100
%34 = OpTypeVector %5 4
%66 = OpConstant %5 128
%86 = OpConstantFalse %23
%87 = OpConstantTrue %23
%3 = OpFunction %1 None %2
%4 = OpLabel
OpBranch %101
%101 = OpLabel
%9 = OpLoad %6 %8
%14 = OpAccessChain %13 %12 %15
%16 = OpLoad %5 %14
%17 = OpAccessChain %13 %12 %18
%19 = OpLoad %5 %17
%20 = OpAccessChain %13 %12 %21
%22 = OpLoad %5 %20
%24 = OpULessThan %23 %16 %25
OpSelectionMerge %132 None
OpBranchConditional %24 %117 %102
%117 = OpLabel
%26 = OpIEqual %23 %16 %15
OpSelectionMerge %131 None
OpBranchConditional %26 %131 %118
%118 = OpLabel
OpBranch %119
%119 = OpLabel
%36 = OpPhi %5 %15 %118 %37 %129
%38 = OpPhi %5 %15 %118 %31 %129
%39 = OpIEqual %23 %19 %15
OpLoopMerge %130 %129 None
OpBranch %120
%120 = OpLabel
OpSelectionMerge %128 None
OpBranchConditional %39 %128 %121
%121 = OpLabel
OpBranch %122
%122 = OpLabel
%48 = OpPhi %5 %38 %121 %44 %124
%49 = OpPhi %5 %15 %121 %50 %124
%51 = OpBitwiseXor %5 %49 %36
%52 = OpShiftLeftLogical %5 %51 %21
%53 = OpShiftRightLogical %5 %52 %21
%54 = OpImageRead %34 %9 %53
%55 = OpCompositeExtract %5 %54 0
%56 = OpIEqual %23 %55 %25
OpLoopMerge %126 %124 None
OpBranchConditional %56 %125 %123
%125 = OpLabel
%67 = OpShiftRightLogical %5 %66 %21
%68 = OpImageRead %34 %9 %67
%69 = OpCompositeExtract %5 %68 0
%29 = OpIAdd %5 %69 %48
OpBranch %126
%123 = OpLabel
OpBranch %124
%124 = OpLabel
%70 = OpShiftLeftLogical %5 %36 %21
%71 = OpIMul %5 %70 %49
%72 = OpShiftRightLogical %5 %71 %21
%73 = OpImageRead %34 %9 %72
%74 = OpCompositeExtract %5 %73 0
%44 = OpIAdd %5 %74 %48
%50 = OpIAdd %5 %49 %18
%75 = OpULessThan %23 %50 %19
OpBranchConditional %75 %122 %126
%126 = OpLabel
%85 = OpPhi %23 %86 %124 %87 %125
%91 = OpPhi %5 %44 %124 %38 %125
%97 = OpPhi %5 %15 %124 %29 %125
OpSelectionMerge %127 None
OpBranchConditional %85 %130 %127
%127 = OpLabel
OpBranch %128
%128 = OpLabel
%92 = OpPhi %5 %38 %120 %91 %127
%98 = OpPhi %5 %15 %120 %97 %127
%31 = OpCopyObject %5 %92
OpBranch %129
%129 = OpLabel
%37 = OpIAdd %5 %36 %18
%45 = OpULessThan %23 %37 %16
OpBranchConditional %45 %119 %130
%130 = OpLabel
%99 = OpPhi %5 %31 %129 %97 %126
OpBranch %131
%131 = OpLabel
%100 = OpPhi %5 %15 %117 %99 %130
OpBranch %132
%102 = OpLabel
%27 = OpIEqual %23 %22 %15
OpSelectionMerge %116 None
OpBranchConditional %27 %116 %103
%103 = OpLabel
OpBranch %104
%104 = OpLabel
%40 = OpPhi %5 %15 %103 %41 %114
%42 = OpPhi %5 %15 %103 %32 %114
%43 = OpIEqual %23 %19 %15
OpLoopMerge %115 %114 None
OpBranch %105
%105 = OpLabel
OpSelectionMerge %113 None
OpBranchConditional %43 %113 %106
%106 = OpLabel
OpBranch %107
%107 = OpLabel
%57 = OpPhi %5 %15 %106 %58 %109
%59 = OpPhi %5 %42 %106 %46 %109
%60 = OpBitwiseXor %5 %57 %40
%61 = OpShiftLeftLogical %5 %60 %21
%62 = OpShiftRightLogical %5 %61 %21
%63 = OpImageRead %34 %9 %62
%64 = OpCompositeExtract %5 %63 0
%65 = OpIEqual %23 %64 %25
OpLoopMerge %111 %109 None
OpBranchConditional %65 %110 %108
%110 = OpLabel
%76 = OpShiftRightLogical %5 %66 %21
%77 = OpImageRead %34 %9 %76
%78 = OpCompositeExtract %5 %77 0
%30 = OpIAdd %5 %78 %59
OpBranch %111
%108 = OpLabel
OpBranch %109
%109 = OpLabel
%79 = OpShiftLeftLogical %5 %40 %21
%80 = OpIMul %5 %79 %57
%81 = OpShiftRightLogical %5 %80 %21
%82 = OpImageRead %34 %9 %81
%83 = OpCompositeExtract %5 %82 0
%46 = OpIAdd %5 %83 %59
%58 = OpIAdd %5 %57 %18
%84 = OpULessThan %23 %58 %19
OpBranchConditional %84 %107 %111
%111 = OpLabel
%88 = OpPhi %23 %86 %109 %87 %110
%89 = OpPhi %5 %46 %109 %42 %110
%93 = OpPhi %5 %15 %109 %30 %110
OpSelectionMerge %112 None
OpBranchConditional %88 %115 %112
%112 = OpLabel
OpBranch %113
%113 = OpLabel
%90 = OpPhi %5 %42 %105 %89 %112
%94 = OpPhi %5 %15 %105 %93 %112
%32 = OpCopyObject %5 %90
OpBranch %114
%114 = OpLabel
%41 = OpIAdd %5 %40 %18
%47 = OpULessThan %23 %41 %22
OpBranchConditional %47 %104 %115
%115 = OpLabel
%95 = OpPhi %5 %32 %114 %93 %111
OpBranch %116
%116 = OpLabel
%96 = OpPhi %5 %15 %102 %95 %115
OpBranch %132
%132 = OpLabel
%28 = OpPhi %5 %96 %116 %100 %131
%33 = OpShiftRightLogical %5 %15 %21
%35 = OpCompositeConstruct %34 %28 %28 %28 %28
OpImageWrite %9 %33 %35
OpReturn
OpFunctionEnd
#endif
