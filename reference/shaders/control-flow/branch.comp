#version 460
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, r32ui) uniform writeonly uimageBuffer _8;

uint _39;

void main()
{
    uint _23;
    if (!(gl_GlobalInvocationID.x == 10u))
    {
        _23 = 50u;
    }
    else
    {
        _23 = 40u;
    }
    uint _36;
    if (gl_GlobalInvocationID.x == 20u)
    {
        uint frontier_phi_9_3_ladder;
        if (gl_GlobalInvocationID.y == 30u)
        {
            frontier_phi_9_3_ladder = _23 + 20u;
        }
        else
        {
            frontier_phi_9_3_ladder = _23 * _23;
        }
        _36 = frontier_phi_9_3_ladder;
    }
    else
    {
        uint frontier_phi_9_4_ladder;
        if (gl_GlobalInvocationID.y == 40u)
        {
            frontier_phi_9_4_ladder = _23 + 70u;
        }
        else
        {
            frontier_phi_9_4_ladder = _23 * 10u;
        }
        _36 = frontier_phi_9_4_ladder;
    }
    imageStore(_8, int(0u >> 2u), uvec4(_36));
}


#if 0
// LLVM disassembly
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%struct.RWByteAddressBuffer = type { i32 }

define void @main() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 0, i32 0, i1 false)
  %2 = call i32 @dx.op.threadId.i32(i32 93, i32 0)
  %3 = call i32 @dx.op.threadId.i32(i32 93, i32 1)
  %4 = icmp eq i32 %2, 10
  br i1 %4, label %6, label %5, !dx.controlflow.hints !10

5:                                                ; preds = %0
  br label %6

6:                                                ; preds = %5, %0
  %7 = phi i32 [ 50, %5 ], [ 40, %0 ]
  %8 = icmp eq i32 %2, 20
  br i1 %8, label %9, label %15, !dx.controlflow.hints !11

9:                                                ; preds = %6
  %10 = icmp eq i32 %3, 30
  br i1 %10, label %11, label %13, !dx.controlflow.hints !12

11:                                               ; preds = %9
  %12 = add nuw nsw i32 %7, 20
  br label %21

13:                                               ; preds = %9
  %14 = mul nuw nsw i32 %7, %7
  br label %21

15:                                               ; preds = %6
  %16 = icmp eq i32 %3, 40
  br i1 %16, label %17, label %19, !dx.controlflow.hints !13

17:                                               ; preds = %15
  %18 = add nuw nsw i32 %7, 70
  br label %21

19:                                               ; preds = %15
  %20 = mul nuw nsw i32 %7, 10
  br label %21

21:                                               ; preds = %19, %17, %13, %11
  %22 = phi i32 [ %12, %11 ], [ %14, %13 ], [ %18, %17 ], [ %20, %19 ]
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1, i32 0, i32 undef, i32 %22, i32 undef, i32 undef, i32 undef, i8 1)
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #1

; Function Attrs: nounwind
declare void @dx.op.bufferStore.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i8) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!7}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 5}
!3 = !{!"cs", i32 6, i32 0}
!4 = !{null, !5, null, null}
!5 = !{!6}
!6 = !{i32 0, %struct.RWByteAddressBuffer* undef, !"", i32 0, i32 0, i32 1, i32 11, i1 false, i1 false, i1 false, null}
!7 = !{void ()* @main, !"main", null, !4, !8}
!8 = !{i32 0, i64 16, i32 4, !9}
!9 = !{i32 1, i32 1, i32 1}
!10 = distinct !{!10, !"dx.controlflow.hints", i32 1}
!11 = distinct !{!11, !"dx.controlflow.hints", i32 1}
!12 = distinct !{!12, !"dx.controlflow.hints", i32 1}
!13 = distinct !{!13, !"dx.controlflow.hints", i32 1}
#endif
#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 57
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %12
OpExecutionMode %3 LocalSize 1 1 1
OpName %3 "main"
OpName %42 "frontier_phi_9.4.ladder"
OpName %43 "frontier_phi_9.3.ladder"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %12 BuiltIn GlobalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%10 = OpTypeVector %5 3
%11 = OpTypePointer Input %10
%12 = OpVariable %11 Input
%13 = OpTypePointer Input %5
%15 = OpConstant %5 0
%18 = OpConstant %5 1
%20 = OpTypeBool
%22 = OpConstant %5 10
%24 = OpConstant %5 50
%25 = OpConstant %5 40
%27 = OpConstant %5 20
%29 = OpConstant %5 30
%34 = OpConstant %5 70
%38 = OpConstant %5 2
%40 = OpTypeVector %5 4
%3 = OpFunction %1 None %2
%4 = OpLabel
%39 = OpUndef %5
OpBranch %44
%44 = OpLabel
%9 = OpLoad %6 %8
%14 = OpAccessChain %13 %12 %15
%16 = OpLoad %5 %14
%17 = OpAccessChain %13 %12 %18
%19 = OpLoad %5 %17
%21 = OpIEqual %20 %16 %22
OpSelectionMerge %46 None
OpBranchConditional %21 %46 %45
%45 = OpLabel
OpBranch %46
%46 = OpLabel
%23 = OpPhi %5 %25 %44 %24 %45
%26 = OpIEqual %20 %16 %27
OpSelectionMerge %55 None
OpBranchConditional %26 %51 %47
%51 = OpLabel
%28 = OpIEqual %20 %19 %29
OpSelectionMerge %54 None
OpBranchConditional %28 %53 %52
%53 = OpLabel
%31 = OpIAdd %5 %23 %27
OpBranch %54
%52 = OpLabel
%32 = OpIMul %5 %23 %23
OpBranch %54
%54 = OpLabel
%43 = OpPhi %5 %31 %53 %32 %52
OpBranch %55
%47 = OpLabel
%30 = OpIEqual %20 %19 %25
OpSelectionMerge %50 None
OpBranchConditional %30 %49 %48
%49 = OpLabel
%33 = OpIAdd %5 %23 %34
OpBranch %50
%48 = OpLabel
%35 = OpIMul %5 %23 %22
OpBranch %50
%50 = OpLabel
%42 = OpPhi %5 %33 %49 %35 %48
OpBranch %55
%55 = OpLabel
%36 = OpPhi %5 %42 %50 %43 %54
%37 = OpShiftRightLogical %5 %15 %38
%41 = OpCompositeConstruct %40 %36 %36 %36 %36
OpImageWrite %9 %37 %41
OpReturn
OpFunctionEnd
#endif
