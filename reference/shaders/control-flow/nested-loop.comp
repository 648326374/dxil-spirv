#version 460
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, r32ui) uniform uimageBuffer _8;

uint _28;

void main()
{
    uint _25;
    if (!(gl_GlobalInvocationID.x == 0u))
    {
        uint _26;
        uint _31 = 0u;
        uint _33 = 0u;
        bool _34;
        for (;;)
        {
            _34 = gl_GlobalInvocationID.y == 0u;
            uint frontier_phi_4_pred;
            if (!_34)
            {
                uint _35;
                uint _37 = 0u;
                uint _39 = _33;
                bool _40;
                for (;;)
                {
                    _40 = gl_GlobalInvocationID.z == 0u;
                    uint frontier_phi_8_pred;
                    if (!_40)
                    {
                        uint _43;
                        uint _44;
                        _43 = _39;
                        _44 = 0u;
                        uint _41;
                        for (;;)
                        {
                            _41 = imageLoad(_8, int((((_37 ^ _31) ^ _44) << 2u) >> 2u)).x + _43;
                            uint _45 = _44 + 1u;
                            if (_45 == gl_GlobalInvocationID.z)
                            {
                                break;
                            }
                            else
                            {
                                _43 = _41;
                                _44 = _45;
                            }
                        }
                        frontier_phi_8_pred = _41;
                    }
                    else
                    {
                        frontier_phi_8_pred = _39;
                    }
                    _35 = frontier_phi_8_pred;
                    uint _38 = _37 + 1u;
                    if (_38 == gl_GlobalInvocationID.y)
                    {
                        break;
                    }
                    else
                    {
                        _37 = _38;
                        _39 = _35;
                        continue;
                    }
                }
                frontier_phi_4_pred = _35;
            }
            else
            {
                frontier_phi_4_pred = _33;
            }
            _26 = frontier_phi_4_pred;
            uint _32 = _31 + 1u;
            if (_32 == gl_GlobalInvocationID.x)
            {
                break;
            }
            else
            {
                _31 = _32;
                _33 = _26;
                continue;
            }
        }
        _25 = _26;
    }
    else
    {
        _25 = 0u;
    }
    imageStore(_8, int(0u >> 2u), uvec4(_25));
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 73
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %12
OpExecutionMode %3 LocalSize 1 1 1
OpName %3 "main"
OpName %53 "frontier_phi_8.pred"
OpName %54 "frontier_phi_4.pred"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %12 BuiltIn GlobalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%10 = OpTypeVector %5 3
%11 = OpTypePointer Input %10
%12 = OpVariable %11 Input
%13 = OpTypePointer Input %5
%15 = OpConstant %5 0
%18 = OpConstant %5 1
%21 = OpConstant %5 2
%23 = OpTypeBool
%29 = OpTypeVector %5 4
%3 = OpFunction %1 None %2
%4 = OpLabel
%28 = OpUndef %5
OpBranch %55
%55 = OpLabel
%9 = OpLoad %6 %8
%14 = OpAccessChain %13 %12 %15
%16 = OpLoad %5 %14
%17 = OpAccessChain %13 %12 %18
%19 = OpLoad %5 %17
%20 = OpAccessChain %13 %12 %21
%22 = OpLoad %5 %20
%24 = OpIEqual %23 %16 %15
OpSelectionMerge %71 None
OpBranchConditional %24 %71 %56
%56 = OpLabel
OpBranch %57
%57 = OpLabel
%31 = OpPhi %5 %15 %56 %32 %69
%33 = OpPhi %5 %15 %56 %26 %69
%34 = OpIEqual %23 %19 %15
OpLoopMerge %70 %69 None
OpBranch %58
%58 = OpLabel
OpSelectionMerge %68 None
OpBranchConditional %34 %68 %59
%59 = OpLabel
OpBranch %60
%60 = OpLabel
%37 = OpPhi %5 %15 %59 %38 %66
%39 = OpPhi %5 %33 %59 %35 %66
%40 = OpIEqual %23 %22 %15
OpLoopMerge %67 %66 None
OpBranch %61
%61 = OpLabel
OpSelectionMerge %65 None
OpBranchConditional %40 %65 %62
%62 = OpLabel
OpBranch %63
%63 = OpLabel
%43 = OpPhi %5 %39 %62 %41 %63
%44 = OpPhi %5 %15 %62 %45 %63
%46 = OpBitwiseXor %5 %37 %31
%47 = OpBitwiseXor %5 %46 %44
%48 = OpShiftLeftLogical %5 %47 %21
%49 = OpShiftRightLogical %5 %48 %21
%50 = OpImageRead %29 %9 %49
%51 = OpCompositeExtract %5 %50 0
%41 = OpIAdd %5 %51 %43
%45 = OpIAdd %5 %44 %18
%52 = OpIEqual %23 %45 %22
OpLoopMerge %64 %63 None
OpBranchConditional %52 %64 %63
%64 = OpLabel
OpBranch %65
%65 = OpLabel
%53 = OpPhi %5 %39 %61 %41 %64
%35 = OpCopyObject %5 %53
OpBranch %66
%66 = OpLabel
%38 = OpIAdd %5 %37 %18
%42 = OpIEqual %23 %38 %19
OpBranchConditional %42 %67 %60
%67 = OpLabel
OpBranch %68
%68 = OpLabel
%54 = OpPhi %5 %33 %58 %35 %67
%26 = OpCopyObject %5 %54
OpBranch %69
%69 = OpLabel
%32 = OpIAdd %5 %31 %18
%36 = OpIEqual %23 %32 %16
OpBranchConditional %36 %70 %57
%70 = OpLabel
OpBranch %71
%71 = OpLabel
%25 = OpPhi %5 %15 %55 %26 %70
%27 = OpShiftRightLogical %5 %15 %21
%30 = OpCompositeConstruct %29 %25 %25 %25 %25
OpImageWrite %9 %27 %30
OpReturn
OpFunctionEnd
#endif
