#version 460
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, r32ui) uniform uimageBuffer _8;

uint _28;

void main()
{
    uint _25;
    if (!(gl_GlobalInvocationID.x == 0u))
    {
        uint _26;
        uint _31 = 0u;
        uint _33 = 0u;
        bool _34;
        for (;;)
        {
            _34 = gl_GlobalInvocationID.y == 0u;
            uint frontier_phi_4_pred;
            if (!_34)
            {
                uint _35;
                uint _37 = 0u;
                uint _39 = _33;
                bool _40;
                for (;;)
                {
                    _40 = gl_GlobalInvocationID.z == 0u;
                    uint frontier_phi_8_pred;
                    if (!_40)
                    {
                        uint _43;
                        uint _44;
                        _43 = _39;
                        _44 = 0u;
                        uint _41;
                        for (;;)
                        {
                            uint _49 = (((_37 ^ _31) ^ _44) << 2u) >> 2u;
                            _41 = uvec4(imageLoad(_8, int(_49)).x, imageLoad(_8, int(_49 + 1u)).x, imageLoad(_8, int(_49 + 2u)).x, imageLoad(_8, int(_49 + 3u)).x).x + _43;
                            uint _45 = _44 + 1u;
                            if (_45 == gl_GlobalInvocationID.z)
                            {
                                break;
                            }
                            else
                            {
                                _43 = _41;
                                _44 = _45;
                            }
                        }
                        frontier_phi_8_pred = _41;
                    }
                    else
                    {
                        frontier_phi_8_pred = _39;
                    }
                    _35 = frontier_phi_8_pred;
                    uint _38 = _37 + 1u;
                    if (_38 == gl_GlobalInvocationID.y)
                    {
                        break;
                    }
                    else
                    {
                        _37 = _38;
                        _39 = _35;
                        continue;
                    }
                }
                frontier_phi_4_pred = _35;
            }
            else
            {
                frontier_phi_4_pred = _33;
            }
            _26 = frontier_phi_4_pred;
            uint _32 = _31 + 1u;
            if (_32 == gl_GlobalInvocationID.x)
            {
                break;
            }
            else
            {
                _31 = _32;
                _33 = _26;
                continue;
            }
        }
        _25 = _26;
    }
    else
    {
        _25 = 0u;
    }
    imageStore(_8, int(0u >> 2u), uvec4(_25));
}


#if 0
// LLVM disassembly
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%struct.RWByteAddressBuffer = type { i32 }

define void @main() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 0, i32 0, i1 false)
  %2 = call i32 @dx.op.threadId.i32(i32 93, i32 0)
  %3 = call i32 @dx.op.threadId.i32(i32 93, i32 1)
  %4 = call i32 @dx.op.threadId.i32(i32 93, i32 2)
  %5 = icmp eq i32 %2, 0
  br i1 %5, label %39, label %6

6:                                                ; preds = %0
  br label %7

7:                                                ; preds = %34, %6
  %8 = phi i32 [ %36, %34 ], [ 0, %6 ]
  %9 = phi i32 [ %35, %34 ], [ 0, %6 ]
  %10 = icmp eq i32 %3, 0
  br i1 %10, label %34, label %11

11:                                               ; preds = %7
  br label %12

12:                                               ; preds = %29, %11
  %13 = phi i32 [ %31, %29 ], [ 0, %11 ]
  %14 = phi i32 [ %30, %29 ], [ %9, %11 ]
  %15 = icmp eq i32 %4, 0
  br i1 %15, label %29, label %16

16:                                               ; preds = %12
  br label %17

17:                                               ; preds = %17, %16
  %18 = phi i32 [ %25, %17 ], [ %14, %16 ]
  %19 = phi i32 [ %26, %17 ], [ 0, %16 ]
  %20 = xor i32 %13, %8
  %21 = xor i32 %20, %19
  %22 = shl i32 %21, 2
  %23 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %22, i32 undef)
  %24 = extractvalue %dx.types.ResRet.i32 %23, 0
  %25 = add i32 %24, %18
  %26 = add nuw i32 %19, 1
  %27 = icmp eq i32 %26, %4
  br i1 %27, label %28, label %17, !llvm.loop !10

28:                                               ; preds = %17
  br label %29

29:                                               ; preds = %28, %12
  %30 = phi i32 [ %14, %12 ], [ %25, %28 ]
  %31 = add nuw i32 %13, 1
  %32 = icmp eq i32 %31, %3
  br i1 %32, label %33, label %12, !llvm.loop !12

33:                                               ; preds = %29
  br label %34

34:                                               ; preds = %33, %7
  %35 = phi i32 [ %9, %7 ], [ %30, %33 ]
  %36 = add nuw i32 %8, 1
  %37 = icmp eq i32 %36, %2
  br i1 %37, label %38, label %7, !llvm.loop !13

38:                                               ; preds = %34
  br label %39

39:                                               ; preds = %38, %0
  %40 = phi i32 [ 0, %0 ], [ %35, %38 ]
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1, i32 0, i32 undef, i32 %40, i32 undef, i32 undef, i32 undef, i8 1)
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind
declare void @dx.op.bufferStore.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i8) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!7}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 5}
!3 = !{!"cs", i32 6, i32 0}
!4 = !{null, !5, null, null}
!5 = !{!6}
!6 = !{i32 0, %struct.RWByteAddressBuffer* undef, !"", i32 0, i32 0, i32 1, i32 11, i1 false, i1 false, i1 false, null}
!7 = !{void ()* @main, !"main", null, !4, !8}
!8 = !{i32 0, i64 16, i32 4, !9}
!9 = !{i32 1, i32 1, i32 1}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.unroll.disable"}
!12 = distinct !{!12, !11}
!13 = distinct !{!13, !11}
#endif
#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 85
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %12
OpExecutionMode %3 LocalSize 1 1 1
OpName %3 "main"
OpName %65 "frontier_phi_8.pred"
OpName %66 "frontier_phi_4.pred"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %12 BuiltIn GlobalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%10 = OpTypeVector %5 3
%11 = OpTypePointer Input %10
%12 = OpVariable %11 Input
%13 = OpTypePointer Input %5
%15 = OpConstant %5 0
%18 = OpConstant %5 1
%21 = OpConstant %5 2
%23 = OpTypeBool
%29 = OpTypeVector %5 4
%60 = OpConstant %5 3
%3 = OpFunction %1 None %2
%4 = OpLabel
%28 = OpUndef %5
OpBranch %67
%67 = OpLabel
%9 = OpLoad %6 %8
%14 = OpAccessChain %13 %12 %15
%16 = OpLoad %5 %14
%17 = OpAccessChain %13 %12 %18
%19 = OpLoad %5 %17
%20 = OpAccessChain %13 %12 %21
%22 = OpLoad %5 %20
%24 = OpIEqual %23 %16 %15
OpSelectionMerge %83 None
OpBranchConditional %24 %83 %68
%68 = OpLabel
OpBranch %69
%69 = OpLabel
%31 = OpPhi %5 %15 %68 %32 %81
%33 = OpPhi %5 %15 %68 %26 %81
%34 = OpIEqual %23 %19 %15
OpLoopMerge %82 %81 None
OpBranch %70
%70 = OpLabel
OpSelectionMerge %80 None
OpBranchConditional %34 %80 %71
%71 = OpLabel
OpBranch %72
%72 = OpLabel
%37 = OpPhi %5 %15 %71 %38 %78
%39 = OpPhi %5 %33 %71 %35 %78
%40 = OpIEqual %23 %22 %15
OpLoopMerge %79 %78 None
OpBranch %73
%73 = OpLabel
OpSelectionMerge %77 None
OpBranchConditional %40 %77 %74
%74 = OpLabel
OpBranch %75
%75 = OpLabel
%43 = OpPhi %5 %39 %74 %41 %75
%44 = OpPhi %5 %15 %74 %45 %75
%46 = OpBitwiseXor %5 %37 %31
%47 = OpBitwiseXor %5 %46 %44
%48 = OpShiftLeftLogical %5 %47 %21
%49 = OpShiftRightLogical %5 %48 %21
%50 = OpImageRead %29 %9 %49
%51 = OpCompositeExtract %5 %50 0
%53 = OpIAdd %5 %49 %18
%52 = OpImageRead %29 %9 %53
%54 = OpCompositeExtract %5 %52 0
%56 = OpIAdd %5 %49 %21
%55 = OpImageRead %29 %9 %56
%57 = OpCompositeExtract %5 %55 0
%59 = OpIAdd %5 %49 %60
%58 = OpImageRead %29 %9 %59
%61 = OpCompositeExtract %5 %58 0
%62 = OpCompositeConstruct %29 %51 %54 %57 %61
%63 = OpCompositeExtract %5 %62 0
%41 = OpIAdd %5 %63 %43
%45 = OpIAdd %5 %44 %18
%64 = OpIEqual %23 %45 %22
OpLoopMerge %76 %75 None
OpBranchConditional %64 %76 %75
%76 = OpLabel
OpBranch %77
%77 = OpLabel
%65 = OpPhi %5 %39 %73 %41 %76
OpBranch %78
%78 = OpLabel
%35 = OpPhi %5 %65 %77
%38 = OpIAdd %5 %37 %18
%42 = OpIEqual %23 %38 %19
OpBranchConditional %42 %79 %72
%79 = OpLabel
OpBranch %80
%80 = OpLabel
%66 = OpPhi %5 %33 %70 %35 %79
OpBranch %81
%81 = OpLabel
%26 = OpPhi %5 %66 %80
%32 = OpIAdd %5 %31 %18
%36 = OpIEqual %23 %32 %16
OpBranchConditional %36 %82 %69
%82 = OpLabel
OpBranch %83
%83 = OpLabel
%25 = OpPhi %5 %15 %67 %26 %82
%27 = OpShiftRightLogical %5 %15 %21
%30 = OpCompositeConstruct %29 %25 %25 %25 %25
OpImageWrite %9 %27 %30
OpReturn
OpFunctionEnd
#endif
