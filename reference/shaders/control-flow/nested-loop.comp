#version 460
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, r32ui) uniform uimageBuffer _8;

void main()
{
    uint _25;
    if (!(gl_GlobalInvocationID.x == 0u))
    {
        uint _26;
        uint _30 = 0u;
        uint _32 = 0u;
        bool _33;
        for (;;)
        {
            _33 = gl_GlobalInvocationID.y == 0u;
            uint frontier_phi_4_pred;
            if (!_33)
            {
                uint _34;
                uint _36 = 0u;
                uint _38 = _32;
                bool _39;
                for (;;)
                {
                    _39 = gl_GlobalInvocationID.z == 0u;
                    uint frontier_phi_8_pred;
                    if (!_39)
                    {
                        uint _42;
                        uint _43;
                        _42 = _38;
                        _43 = 0u;
                        uint _40;
                        for (;;)
                        {
                            _40 = imageLoad(_8, int((((_36 ^ _30) ^ _43) << 2u) >> 2u)).x + _42;
                            uint _44 = _43 + 1u;
                            if (_44 == gl_GlobalInvocationID.z)
                            {
                                break;
                            }
                            else
                            {
                                _42 = _40;
                                _43 = _44;
                            }
                        }
                        frontier_phi_8_pred = _40;
                    }
                    else
                    {
                        frontier_phi_8_pred = _38;
                    }
                    _34 = frontier_phi_8_pred;
                    uint _37 = _36 + 1u;
                    if (_37 == gl_GlobalInvocationID.y)
                    {
                        break;
                    }
                    else
                    {
                        _36 = _37;
                        _38 = _34;
                        continue;
                    }
                }
                frontier_phi_4_pred = _34;
            }
            else
            {
                frontier_phi_4_pred = _32;
            }
            _26 = frontier_phi_4_pred;
            uint _31 = _30 + 1u;
            if (_31 == gl_GlobalInvocationID.x)
            {
                break;
            }
            else
            {
                _30 = _31;
                _32 = _26;
                continue;
            }
        }
        _25 = _26;
    }
    else
    {
        _25 = 0u;
    }
    imageStore(_8, int(0u >> 2u), uvec4(_25));
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 72
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %12
OpExecutionMode %3 LocalSize 1 1 1
OpName %3 "main"
OpName %52 "frontier_phi_8.pred"
OpName %53 "frontier_phi_4.pred"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %12 BuiltIn GlobalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%10 = OpTypeVector %5 3
%11 = OpTypePointer Input %10
%12 = OpVariable %11 Input
%13 = OpTypePointer Input %5
%15 = OpConstant %5 0
%18 = OpConstant %5 1
%21 = OpConstant %5 2
%23 = OpTypeBool
%28 = OpTypeVector %5 4
%3 = OpFunction %1 None %2
%4 = OpLabel
OpBranch %54
%54 = OpLabel
%9 = OpLoad %6 %8
%14 = OpAccessChain %13 %12 %15
%16 = OpLoad %5 %14
%17 = OpAccessChain %13 %12 %18
%19 = OpLoad %5 %17
%20 = OpAccessChain %13 %12 %21
%22 = OpLoad %5 %20
%24 = OpIEqual %23 %16 %15
OpSelectionMerge %70 None
OpBranchConditional %24 %70 %55
%55 = OpLabel
OpBranch %56
%56 = OpLabel
%30 = OpPhi %5 %15 %55 %31 %68
%32 = OpPhi %5 %15 %55 %26 %68
%33 = OpIEqual %23 %19 %15
OpLoopMerge %69 %68 None
OpBranch %57
%57 = OpLabel
OpSelectionMerge %67 None
OpBranchConditional %33 %67 %58
%58 = OpLabel
OpBranch %59
%59 = OpLabel
%36 = OpPhi %5 %15 %58 %37 %65
%38 = OpPhi %5 %32 %58 %34 %65
%39 = OpIEqual %23 %22 %15
OpLoopMerge %66 %65 None
OpBranch %60
%60 = OpLabel
OpSelectionMerge %64 None
OpBranchConditional %39 %64 %61
%61 = OpLabel
OpBranch %62
%62 = OpLabel
%42 = OpPhi %5 %38 %61 %40 %62
%43 = OpPhi %5 %15 %61 %44 %62
%45 = OpBitwiseXor %5 %36 %30
%46 = OpBitwiseXor %5 %45 %43
%47 = OpShiftLeftLogical %5 %46 %21
%48 = OpShiftRightLogical %5 %47 %21
%49 = OpImageRead %28 %9 %48
%50 = OpCompositeExtract %5 %49 0
%40 = OpIAdd %5 %50 %42
%44 = OpIAdd %5 %43 %18
%51 = OpIEqual %23 %44 %22
OpLoopMerge %63 %62 None
OpBranchConditional %51 %63 %62
%63 = OpLabel
OpBranch %64
%64 = OpLabel
%52 = OpPhi %5 %38 %60 %40 %63
%34 = OpCopyObject %5 %52
OpBranch %65
%65 = OpLabel
%37 = OpIAdd %5 %36 %18
%41 = OpIEqual %23 %37 %19
OpBranchConditional %41 %66 %59
%66 = OpLabel
OpBranch %67
%67 = OpLabel
%53 = OpPhi %5 %32 %57 %34 %66
%26 = OpCopyObject %5 %53
OpBranch %68
%68 = OpLabel
%31 = OpIAdd %5 %30 %18
%35 = OpIEqual %23 %31 %16
OpBranchConditional %35 %69 %56
%69 = OpLabel
OpBranch %70
%70 = OpLabel
%25 = OpPhi %5 %15 %54 %26 %69
%27 = OpShiftRightLogical %5 %15 %21
%29 = OpCompositeConstruct %28 %25 %25 %25 %25
OpImageWrite %9 %27 %29
OpReturn
OpFunctionEnd
#endif
