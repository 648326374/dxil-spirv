#version 460
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, r32ui) uniform uimageBuffer _8;

uint _24;

void main()
{
    uint _20;
    if (!(gl_GlobalInvocationID.z == 0u))
    {
        uint frontier_phi_6;
        uint _27 = 0u;
        uint _28 = 0u;
        uint _33;
        for (;;)
        {
            _33 = imageLoad(_8, int((_28 << 2u) >> 2u)).x;
            if (_33 == 30u)
            {
                frontier_phi_6 = imageLoad(_8, int(100u >> 2u)).x + _27;
                break;
            }
            else
            {
                uint _22 = _33 + _27;
                uint _29 = _28 + 1u;
                if (_29 < gl_GlobalInvocationID.z)
                {
                    _27 = _22;
                    _28 = _29;
                    continue;
                }
                else
                {
                    frontier_phi_6 = _22;
                    break;
                }
            }
        }
        _20 = frontier_phi_6;
    }
    else
    {
        _20 = 0u;
    }
    imageStore(_8, int(0u >> 2u), uvec4(_20));
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 52
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %12
OpExecutionMode %3 LocalSize 1 1 1
OpName %3 "main"
OpName %42 "frontier_phi_6"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %12 BuiltIn GlobalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%10 = OpTypeVector %5 3
%11 = OpTypePointer Input %10
%12 = OpVariable %11 Input
%13 = OpTypePointer Input %5
%15 = OpConstant %5 2
%17 = OpTypeBool
%19 = OpConstant %5 0
%25 = OpTypeVector %5 4
%35 = OpConstant %5 30
%36 = OpConstant %5 100
%40 = OpConstant %5 1
%3 = OpFunction %1 None %2
%4 = OpLabel
%24 = OpUndef %5
OpBranch %43
%43 = OpLabel
%9 = OpLoad %6 %8
%14 = OpAccessChain %13 %12 %15
%16 = OpLoad %5 %14
%18 = OpIEqual %17 %16 %19
OpSelectionMerge %50 None
OpBranchConditional %18 %50 %44
%44 = OpLabel
OpBranch %45
%45 = OpLabel
%27 = OpPhi %5 %19 %44 %22 %47
%28 = OpPhi %5 %19 %44 %29 %47
%30 = OpShiftLeftLogical %5 %28 %15
%31 = OpShiftRightLogical %5 %30 %15
%32 = OpImageRead %25 %9 %31
%33 = OpCompositeExtract %5 %32 0
%34 = OpIEqual %17 %33 %35
OpLoopMerge %49 %47 None
OpBranchConditional %34 %48 %46
%48 = OpLabel
%37 = OpShiftRightLogical %5 %36 %15
%38 = OpImageRead %25 %9 %37
%39 = OpCompositeExtract %5 %38 0
%21 = OpIAdd %5 %39 %27
OpBranch %49
%46 = OpLabel
OpBranch %47
%47 = OpLabel
%22 = OpIAdd %5 %33 %27
%29 = OpIAdd %5 %28 %40
%41 = OpULessThan %17 %29 %16
OpBranchConditional %41 %45 %49
%49 = OpLabel
%42 = OpPhi %5 %22 %47 %21 %48
OpBranch %50
%50 = OpLabel
%20 = OpPhi %5 %19 %43 %42 %49
%23 = OpShiftRightLogical %5 %19 %15
%26 = OpCompositeConstruct %25 %20 %20 %20 %20
OpImageWrite %9 %23 %26
OpReturn
OpFunctionEnd
#endif
