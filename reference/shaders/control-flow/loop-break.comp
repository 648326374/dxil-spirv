#version 460
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, r32ui) uniform uimageBuffer _8;

void main()
{
    uint _20;
    if (gl_GlobalInvocationID.z == 0u)
    {
        _20 = 0u;
    }
    else
    {
        uint _36;
        uint frontier_phi_4_break_5;
        uint _24 = 0u;
        uint _26 = 0u;
        uint _30;
        for (;;)
        {
            _30 = imageLoad(_8, int(_26)).x;
            if (_30 == 30u)
            {
                frontier_phi_4_break_5 = _24;
                break;
            }
            else
            {
                uint _25 = _30 + _24;
                uint _27 = _26 + 1u;
                _36 = _25;
                if (_27 < gl_GlobalInvocationID.z)
                {
                    _24 = _25;
                    _26 = _27;
                    continue;
                }
                else
                {
                    frontier_phi_4_break_5 = 0u;
                    break;
                }
            }
        }
        _20 = frontier_phi_4_break_5;
    }
    imageStore(_8, int(0u), uvec4(_20));
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 48
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %12
OpExecutionMode %3 LocalSize 1 1 1
OpName %3 "main"
OpName %38 "frontier_phi_4.break.5"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %12 BuiltIn GlobalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%10 = OpTypeVector %5 3
%11 = OpTypePointer Input %10
%12 = OpVariable %11 Input
%13 = OpTypePointer Input %5
%15 = OpConstant %5 2
%17 = OpTypeBool
%19 = OpConstant %5 0
%22 = OpTypeVector %5 4
%32 = OpConstant %5 30
%33 = OpConstant %5 1
%35 = OpTypePointer Function %5
%3 = OpFunction %1 None %2
%4 = OpLabel
%36 = OpVariable %35 Function
OpBranch %39
%39 = OpLabel
%9 = OpLoad %6 %8
%14 = OpAccessChain %13 %12 %15
%16 = OpLoad %5 %14
%18 = OpIEqual %17 %16 %19
OpSelectionMerge %46 None
OpBranchConditional %18 %46 %40
%40 = OpLabel
OpBranch %41
%41 = OpLabel
%24 = OpPhi %5 %19 %40 %25 %43
%26 = OpPhi %5 %19 %40 %27 %43
%28 = OpShiftLeftLogical %5 %26 %15
%29 = OpImageRead %22 %9 %26
%30 = OpCompositeExtract %5 %29 0
%31 = OpIEqual %17 %30 %32
OpLoopMerge %45 %43 None
OpBranchConditional %31 %44 %42
%44 = OpLabel
OpBranch %45
%42 = OpLabel
OpBranch %43
%43 = OpLabel
%25 = OpIAdd %5 %30 %24
%27 = OpIAdd %5 %26 %33
%34 = OpULessThan %17 %27 %16
OpStore %36 %25
OpBranchConditional %34 %41 %45
%45 = OpLabel
%38 = OpPhi %5 %19 %43 %24 %44
%37 = OpLoad %5 %36
OpBranch %46
%46 = OpLabel
%20 = OpPhi %5 %19 %39 %38 %45
%23 = OpCompositeConstruct %22 %20 %20 %20 %20
OpImageWrite %9 %19 %23
OpReturn
OpFunctionEnd
#endif
