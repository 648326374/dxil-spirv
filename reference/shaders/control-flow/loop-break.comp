#version 460
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, r32ui) uniform uimageBuffer _8;

void main()
{
    uint _20;
    if (!(gl_GlobalInvocationID.z == 0u))
    {
        uint frontier_phi_4_break_5;
        uint _25 = 0u;
        uint _27 = 0u;
        uint _32;
        for (;;)
        {
            _32 = imageLoad(_8, int((_27 << 2u) >> 2u)).x;
            if (_32 == 30u)
            {
                frontier_phi_4_break_5 = _25;
                break;
            }
            else
            {
                uint _26 = _32 + _25;
                uint _28 = _27 + 1u;
                if (_28 < gl_GlobalInvocationID.z)
                {
                    _25 = _26;
                    _27 = _28;
                    continue;
                }
                else
                {
                    frontier_phi_4_break_5 = _26;
                    break;
                }
            }
        }
        _20 = frontier_phi_4_break_5;
    }
    else
    {
        _20 = 0u;
    }
    imageStore(_8, int(0u >> 2u), uvec4(_20));
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 47
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %12
OpExecutionMode %3 LocalSize 1 1 1
OpName %3 "main"
OpName %37 "frontier_phi_4.break.5"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %12 BuiltIn GlobalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%10 = OpTypeVector %5 3
%11 = OpTypePointer Input %10
%12 = OpVariable %11 Input
%13 = OpTypePointer Input %5
%15 = OpConstant %5 2
%17 = OpTypeBool
%19 = OpConstant %5 0
%23 = OpTypeVector %5 4
%34 = OpConstant %5 30
%35 = OpConstant %5 1
%3 = OpFunction %1 None %2
%4 = OpLabel
OpBranch %38
%38 = OpLabel
%9 = OpLoad %6 %8
%14 = OpAccessChain %13 %12 %15
%16 = OpLoad %5 %14
%18 = OpIEqual %17 %16 %19
OpSelectionMerge %45 None
OpBranchConditional %18 %45 %39
%39 = OpLabel
OpBranch %40
%40 = OpLabel
%25 = OpPhi %5 %19 %39 %26 %42
%27 = OpPhi %5 %19 %39 %28 %42
%29 = OpShiftLeftLogical %5 %27 %15
%30 = OpShiftRightLogical %5 %29 %15
%31 = OpImageRead %23 %9 %30
%32 = OpCompositeExtract %5 %31 0
%33 = OpIEqual %17 %32 %34
OpLoopMerge %44 %42 None
OpBranchConditional %33 %43 %41
%43 = OpLabel
OpBranch %44
%41 = OpLabel
OpBranch %42
%42 = OpLabel
%26 = OpIAdd %5 %32 %25
%28 = OpIAdd %5 %27 %35
%36 = OpULessThan %17 %28 %16
OpBranchConditional %36 %40 %44
%44 = OpLabel
%37 = OpPhi %5 %26 %42 %25 %43
OpBranch %45
%45 = OpLabel
%20 = OpPhi %5 %19 %38 %37 %44
%22 = OpShiftRightLogical %5 %19 %15
%24 = OpCompositeConstruct %23 %20 %20 %20 %20
OpImageWrite %9 %22 %24
OpReturn
OpFunctionEnd
#endif
