#version 460
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, r32ui) uniform uimageBuffer _8;

void main()
{
    uint _25;
    if (!(gl_GlobalInvocationID.x == 0u))
    {
        uint _30;
        _30 = 0u;
        uint _26;
        uint _32 = 0u;
        bool _33;
        for (;;)
        {
            _33 = gl_GlobalInvocationID.y == 0u;
            uint frontier_phi_4_pred;
            if (!_33)
            {
                uint _37;
                _37 = 0u;
                uint _35;
                uint frontier_phi_12;
                uint _39 = _32;
                for (;;)
                {
                    if (imageLoad(_8, int((_37 << 7u) >> 2u)).x == 10u)
                    {
                        frontier_phi_12 = imageLoad(_8, int(4u >> 2u)).x + _39;
                        break;
                    }
                    else
                    {
                        uint frontier_phi_10_pred;
                        if (!(gl_GlobalInvocationID.z == 0u))
                        {
                            uint frontier_phi_16;
                            uint _55 = _39;
                            uint _56 = 0u;
                            for (;;)
                            {
                                if (imageLoad(_8, int((_56 << 7u) >> 2u)).x == 10u)
                                {
                                    frontier_phi_16 = imageLoad(_8, int(8u >> 2u)).x + _55;
                                    break;
                                }
                                else
                                {
                                    uint _53 = imageLoad(_8, int((((_37 ^ _30) ^ _56) << 2u) >> 2u)).x + _55;
                                    uint _57 = _56 + 1u;
                                    if (_57 < gl_GlobalInvocationID.z)
                                    {
                                        _55 = _53;
                                        _56 = _57;
                                        continue;
                                    }
                                    else
                                    {
                                        frontier_phi_16 = _53;
                                        break;
                                    }
                                }
                            }
                            frontier_phi_10_pred = frontier_phi_16;
                        }
                        else
                        {
                            frontier_phi_10_pred = _39;
                        }
                        _35 = frontier_phi_10_pred;
                        uint _38 = _37 + 1u;
                        if (_38 < gl_GlobalInvocationID.y)
                        {
                            _37 = _38;
                            _39 = _35;
                            continue;
                        }
                        else
                        {
                            frontier_phi_12 = _35;
                            break;
                        }
                    }
                }
                frontier_phi_4_pred = frontier_phi_12;
            }
            else
            {
                frontier_phi_4_pred = _32;
            }
            _26 = frontier_phi_4_pred;
            uint _31 = _30 + 1u;
            if (_31 == gl_GlobalInvocationID.x)
            {
                break;
            }
            else
            {
                _30 = _31;
                _32 = _26;
                continue;
            }
        }
        _25 = _26;
    }
    else
    {
        _25 = 0u;
    }
    imageStore(_8, int(0u >> 2u), uvec4(_25));
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 100
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %12
OpExecutionMode %3 LocalSize 1 1 1
OpName %3 "main"
OpName %74 "frontier_phi_16"
OpName %75 "frontier_phi_10.pred"
OpName %76 "frontier_phi_12"
OpName %77 "frontier_phi_4.pred"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %12 BuiltIn GlobalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%10 = OpTypeVector %5 3
%11 = OpTypePointer Input %10
%12 = OpVariable %11 Input
%13 = OpTypePointer Input %5
%15 = OpConstant %5 0
%18 = OpConstant %5 1
%21 = OpConstant %5 2
%23 = OpTypeBool
%28 = OpTypeVector %5 4
%41 = OpConstant %5 7
%46 = OpConstant %5 10
%47 = OpConstant %5 4
%63 = OpConstant %5 8
%3 = OpFunction %1 None %2
%4 = OpLabel
OpBranch %78
%78 = OpLabel
%9 = OpLoad %6 %8
%14 = OpAccessChain %13 %12 %15
%16 = OpLoad %5 %14
%17 = OpAccessChain %13 %12 %18
%19 = OpLoad %5 %17
%20 = OpAccessChain %13 %12 %21
%22 = OpLoad %5 %20
%24 = OpIEqual %23 %16 %15
OpSelectionMerge %98 None
OpBranchConditional %24 %98 %79
%79 = OpLabel
OpBranch %80
%80 = OpLabel
%30 = OpPhi %5 %15 %79 %31 %96
%32 = OpPhi %5 %15 %79 %26 %96
%33 = OpIEqual %23 %19 %15
OpLoopMerge %97 %96 None
OpBranch %81
%81 = OpLabel
OpSelectionMerge %95 None
OpBranchConditional %33 %95 %82
%82 = OpLabel
OpBranch %83
%83 = OpLabel
%37 = OpPhi %5 %15 %82 %38 %92
%39 = OpPhi %5 %32 %82 %35 %92
%40 = OpShiftLeftLogical %5 %37 %41
%42 = OpShiftRightLogical %5 %40 %21
%43 = OpImageRead %28 %9 %42
%44 = OpCompositeExtract %5 %43 0
%45 = OpIEqual %23 %44 %46
OpLoopMerge %94 %92 None
OpBranchConditional %45 %93 %84
%93 = OpLabel
%48 = OpShiftRightLogical %5 %47 %21
%49 = OpImageRead %28 %9 %48
%50 = OpCompositeExtract %5 %49 0
%34 = OpIAdd %5 %50 %39
OpBranch %94
%84 = OpLabel
%51 = OpIEqual %23 %22 %15
OpSelectionMerge %91 None
OpBranchConditional %51 %91 %85
%85 = OpLabel
OpBranch %86
%86 = OpLabel
%55 = OpPhi %5 %39 %85 %53 %88
%56 = OpPhi %5 %15 %85 %57 %88
%58 = OpShiftLeftLogical %5 %56 %41
%59 = OpShiftRightLogical %5 %58 %21
%60 = OpImageRead %28 %9 %59
%61 = OpCompositeExtract %5 %60 0
%62 = OpIEqual %23 %61 %46
OpLoopMerge %90 %88 None
OpBranchConditional %62 %89 %87
%89 = OpLabel
%64 = OpShiftRightLogical %5 %63 %21
%65 = OpImageRead %28 %9 %64
%66 = OpCompositeExtract %5 %65 0
%52 = OpIAdd %5 %66 %55
OpBranch %90
%87 = OpLabel
OpBranch %88
%88 = OpLabel
%67 = OpBitwiseXor %5 %37 %30
%68 = OpBitwiseXor %5 %67 %56
%69 = OpShiftLeftLogical %5 %68 %21
%70 = OpShiftRightLogical %5 %69 %21
%71 = OpImageRead %28 %9 %70
%72 = OpCompositeExtract %5 %71 0
%53 = OpIAdd %5 %72 %55
%57 = OpIAdd %5 %56 %18
%73 = OpULessThan %23 %57 %22
OpBranchConditional %73 %86 %90
%90 = OpLabel
%74 = OpPhi %5 %53 %88 %52 %89
OpBranch %91
%91 = OpLabel
%75 = OpPhi %5 %39 %84 %74 %90
%35 = OpCopyObject %5 %75
OpBranch %92
%92 = OpLabel
%38 = OpIAdd %5 %37 %18
%54 = OpULessThan %23 %38 %19
OpBranchConditional %54 %83 %94
%94 = OpLabel
%76 = OpPhi %5 %35 %92 %34 %93
OpBranch %95
%95 = OpLabel
%77 = OpPhi %5 %32 %81 %76 %94
%26 = OpCopyObject %5 %77
OpBranch %96
%96 = OpLabel
%31 = OpIAdd %5 %30 %18
%36 = OpIEqual %23 %31 %16
OpBranchConditional %36 %97 %80
%97 = OpLabel
OpBranch %98
%98 = OpLabel
%25 = OpPhi %5 %15 %78 %26 %97
%27 = OpShiftRightLogical %5 %15 %21
%29 = OpCompositeConstruct %28 %25 %25 %25 %25
OpImageWrite %9 %27 %29
OpReturn
OpFunctionEnd
#endif
