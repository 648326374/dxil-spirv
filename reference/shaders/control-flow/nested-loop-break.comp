#version 460
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, r32ui) uniform uimageBuffer _8;

uint _28;

void main()
{
    uint _25;
    if (!(gl_GlobalInvocationID.x == 0u))
    {
        uint _31;
        _31 = 0u;
        uint _26;
        uint _33 = 0u;
        bool _34;
        for (;;)
        {
            _34 = gl_GlobalInvocationID.y == 0u;
            uint frontier_phi_4_pred;
            if (!_34)
            {
                uint _38;
                _38 = 0u;
                uint _36;
                uint frontier_phi_12;
                uint _40 = _33;
                for (;;)
                {
                    if (imageLoad(_8, int((_38 << 7u) >> 2u)).x == 10u)
                    {
                        frontier_phi_12 = imageLoad(_8, int(4u >> 2u)).x + _40;
                        break;
                    }
                    else
                    {
                        uint frontier_phi_10_pred;
                        if (!(gl_GlobalInvocationID.z == 0u))
                        {
                            uint frontier_phi_16;
                            uint _56 = _40;
                            uint _57 = 0u;
                            for (;;)
                            {
                                if (imageLoad(_8, int((_57 << 7u) >> 2u)).x == 10u)
                                {
                                    frontier_phi_16 = imageLoad(_8, int(8u >> 2u)).x + _56;
                                    break;
                                }
                                else
                                {
                                    uint _54 = imageLoad(_8, int((((_38 ^ _31) ^ _57) << 2u) >> 2u)).x + _56;
                                    uint _58 = _57 + 1u;
                                    if (_58 < gl_GlobalInvocationID.z)
                                    {
                                        _56 = _54;
                                        _57 = _58;
                                        continue;
                                    }
                                    else
                                    {
                                        frontier_phi_16 = _54;
                                        break;
                                    }
                                }
                            }
                            frontier_phi_10_pred = frontier_phi_16;
                        }
                        else
                        {
                            frontier_phi_10_pred = _40;
                        }
                        _36 = frontier_phi_10_pred;
                        uint _39 = _38 + 1u;
                        if (_39 < gl_GlobalInvocationID.y)
                        {
                            _38 = _39;
                            _40 = _36;
                            continue;
                        }
                        else
                        {
                            frontier_phi_12 = _36;
                            break;
                        }
                    }
                }
                frontier_phi_4_pred = frontier_phi_12;
            }
            else
            {
                frontier_phi_4_pred = _33;
            }
            _26 = frontier_phi_4_pred;
            uint _32 = _31 + 1u;
            if (_32 == gl_GlobalInvocationID.x)
            {
                break;
            }
            else
            {
                _31 = _32;
                _33 = _26;
                continue;
            }
        }
        _25 = _26;
    }
    else
    {
        _25 = 0u;
    }
    imageStore(_8, int(0u >> 2u), uvec4(_25));
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 101
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %12
OpExecutionMode %3 LocalSize 1 1 1
OpName %3 "main"
OpName %75 "frontier_phi_16"
OpName %76 "frontier_phi_10.pred"
OpName %77 "frontier_phi_12"
OpName %78 "frontier_phi_4.pred"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %12 BuiltIn GlobalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%10 = OpTypeVector %5 3
%11 = OpTypePointer Input %10
%12 = OpVariable %11 Input
%13 = OpTypePointer Input %5
%15 = OpConstant %5 0
%18 = OpConstant %5 1
%21 = OpConstant %5 2
%23 = OpTypeBool
%29 = OpTypeVector %5 4
%42 = OpConstant %5 7
%47 = OpConstant %5 10
%48 = OpConstant %5 4
%64 = OpConstant %5 8
%3 = OpFunction %1 None %2
%4 = OpLabel
%28 = OpUndef %5
OpBranch %79
%79 = OpLabel
%9 = OpLoad %6 %8
%14 = OpAccessChain %13 %12 %15
%16 = OpLoad %5 %14
%17 = OpAccessChain %13 %12 %18
%19 = OpLoad %5 %17
%20 = OpAccessChain %13 %12 %21
%22 = OpLoad %5 %20
%24 = OpIEqual %23 %16 %15
OpSelectionMerge %99 None
OpBranchConditional %24 %99 %80
%80 = OpLabel
OpBranch %81
%81 = OpLabel
%31 = OpPhi %5 %15 %80 %32 %97
%33 = OpPhi %5 %15 %80 %26 %97
%34 = OpIEqual %23 %19 %15
OpLoopMerge %98 %97 None
OpBranch %82
%82 = OpLabel
OpSelectionMerge %96 None
OpBranchConditional %34 %96 %83
%83 = OpLabel
OpBranch %84
%84 = OpLabel
%38 = OpPhi %5 %15 %83 %39 %93
%40 = OpPhi %5 %33 %83 %36 %93
%41 = OpShiftLeftLogical %5 %38 %42
%43 = OpShiftRightLogical %5 %41 %21
%44 = OpImageRead %29 %9 %43
%45 = OpCompositeExtract %5 %44 0
%46 = OpIEqual %23 %45 %47
OpLoopMerge %95 %93 None
OpBranchConditional %46 %94 %85
%94 = OpLabel
%49 = OpShiftRightLogical %5 %48 %21
%50 = OpImageRead %29 %9 %49
%51 = OpCompositeExtract %5 %50 0
%35 = OpIAdd %5 %51 %40
OpBranch %95
%85 = OpLabel
%52 = OpIEqual %23 %22 %15
OpSelectionMerge %92 None
OpBranchConditional %52 %92 %86
%86 = OpLabel
OpBranch %87
%87 = OpLabel
%56 = OpPhi %5 %40 %86 %54 %89
%57 = OpPhi %5 %15 %86 %58 %89
%59 = OpShiftLeftLogical %5 %57 %42
%60 = OpShiftRightLogical %5 %59 %21
%61 = OpImageRead %29 %9 %60
%62 = OpCompositeExtract %5 %61 0
%63 = OpIEqual %23 %62 %47
OpLoopMerge %91 %89 None
OpBranchConditional %63 %90 %88
%90 = OpLabel
%65 = OpShiftRightLogical %5 %64 %21
%66 = OpImageRead %29 %9 %65
%67 = OpCompositeExtract %5 %66 0
%53 = OpIAdd %5 %67 %56
OpBranch %91
%88 = OpLabel
OpBranch %89
%89 = OpLabel
%68 = OpBitwiseXor %5 %38 %31
%69 = OpBitwiseXor %5 %68 %57
%70 = OpShiftLeftLogical %5 %69 %21
%71 = OpShiftRightLogical %5 %70 %21
%72 = OpImageRead %29 %9 %71
%73 = OpCompositeExtract %5 %72 0
%54 = OpIAdd %5 %73 %56
%58 = OpIAdd %5 %57 %18
%74 = OpULessThan %23 %58 %22
OpBranchConditional %74 %87 %91
%91 = OpLabel
%75 = OpPhi %5 %54 %89 %53 %90
OpBranch %92
%92 = OpLabel
%76 = OpPhi %5 %40 %85 %75 %91
%36 = OpCopyObject %5 %76
OpBranch %93
%93 = OpLabel
%39 = OpIAdd %5 %38 %18
%55 = OpULessThan %23 %39 %19
OpBranchConditional %55 %84 %95
%95 = OpLabel
%77 = OpPhi %5 %36 %93 %35 %94
OpBranch %96
%96 = OpLabel
%78 = OpPhi %5 %33 %82 %77 %95
%26 = OpCopyObject %5 %78
OpBranch %97
%97 = OpLabel
%32 = OpIAdd %5 %31 %18
%37 = OpIEqual %23 %32 %16
OpBranchConditional %37 %98 %81
%98 = OpLabel
OpBranch %99
%99 = OpLabel
%25 = OpPhi %5 %15 %79 %26 %98
%27 = OpShiftRightLogical %5 %15 %21
%30 = OpCompositeConstruct %29 %25 %25 %25 %25
OpImageWrite %9 %27 %30
OpReturn
OpFunctionEnd
#endif
