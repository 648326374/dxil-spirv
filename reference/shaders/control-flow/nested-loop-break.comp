#version 460
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, r32ui) uniform uimageBuffer _8;

void main()
{
    uint _25;
    if (gl_GlobalInvocationID.x == 0u)
    {
        _25 = 0u;
    }
    else
    {
        uint _29;
        uint _31;
        _29 = 0u;
        _31 = 0u;
        uint _26;
        uint _70;
        uint _72;
        bool _32;
        for (;;)
        {
            _32 = gl_GlobalInvocationID.y == 0u;
            uint frontier_phi_4_pred;
            if (_32)
            {
                frontier_phi_4_pred = _31;
            }
            else
            {
                uint _36;
                uint _38;
                _36 = 0u;
                _38 = _31;
                uint _34;
                uint frontier_phi_12;
                for (;;)
                {
                    if (imageLoad(_8, int(_36 * 32u)).x == 10u)
                    {
                        frontier_phi_12 = imageLoad(_8, int(1u)).x + _38;
                        break;
                    }
                    else
                    {
                        uint frontier_phi_10_pred;
                        if (gl_GlobalInvocationID.z == 0u)
                        {
                            frontier_phi_10_pred = _38;
                        }
                        else
                        {
                            uint frontier_phi_16;
                            uint _53 = _38;
                            uint _54 = 0u;
                            for (;;)
                            {
                                if (imageLoad(_8, int(_54 * 32u)).x == 10u)
                                {
                                    frontier_phi_16 = imageLoad(_8, int(2u)).x + _53;
                                    break;
                                }
                                else
                                {
                                    uint _64 = (_36 ^ _29) ^ _54;
                                    uint _51 = imageLoad(_8, int(_64)).x + _53;
                                    uint _55 = _54 + 1u;
                                    _72 = _51;
                                    if (_55 < gl_GlobalInvocationID.z)
                                    {
                                        _53 = _51;
                                        _54 = _55;
                                        continue;
                                    }
                                    else
                                    {
                                        frontier_phi_16 = _38;
                                        break;
                                    }
                                }
                            }
                            frontier_phi_10_pred = frontier_phi_16;
                        }
                        _34 = frontier_phi_10_pred;
                        uint _37 = _36 + 1u;
                        _70 = _34;
                        if (_37 < gl_GlobalInvocationID.y)
                        {
                            _36 = _37;
                            _38 = _34;
                            continue;
                        }
                        else
                        {
                            frontier_phi_12 = _31;
                            break;
                        }
                    }
                }
                frontier_phi_4_pred = frontier_phi_12;
            }
            _26 = frontier_phi_4_pred;
            uint _30 = _29 + 1u;
            if (_30 == gl_GlobalInvocationID.x)
            {
                break;
            }
            else
            {
                _29 = _30;
                _31 = _26;
                continue;
            }
        }
        _25 = _26;
    }
    imageStore(_8, int(0u), uvec4(_25));
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 100
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %12
OpExecutionMode %3 LocalSize 1 1 1
OpName %3 "main"
OpName %74 "frontier_phi_16"
OpName %75 "frontier_phi_10.pred"
OpName %76 "frontier_phi_12"
OpName %77 "frontier_phi_4.pred"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %12 BuiltIn GlobalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%10 = OpTypeVector %5 3
%11 = OpTypePointer Input %10
%12 = OpVariable %11 Input
%13 = OpTypePointer Input %5
%15 = OpConstant %5 0
%18 = OpConstant %5 1
%21 = OpConstant %5 2
%23 = OpTypeBool
%27 = OpTypeVector %5 4
%40 = OpConstant %5 7
%42 = OpConstant %5 32
%46 = OpConstant %5 10
%69 = OpTypePointer Function %5
%3 = OpFunction %1 None %2
%4 = OpLabel
%70 = OpVariable %69 Function
%72 = OpVariable %69 Function
OpBranch %78
%78 = OpLabel
%9 = OpLoad %6 %8
%14 = OpAccessChain %13 %12 %15
%16 = OpLoad %5 %14
%17 = OpAccessChain %13 %12 %18
%19 = OpLoad %5 %17
%20 = OpAccessChain %13 %12 %21
%22 = OpLoad %5 %20
%24 = OpIEqual %23 %16 %15
OpSelectionMerge %98 None
OpBranchConditional %24 %98 %79
%79 = OpLabel
OpBranch %80
%80 = OpLabel
%29 = OpPhi %5 %15 %79 %30 %96
%31 = OpPhi %5 %15 %79 %26 %96
%32 = OpIEqual %23 %19 %15
OpLoopMerge %97 %96 None
OpBranch %81
%81 = OpLabel
OpSelectionMerge %95 None
OpBranchConditional %32 %95 %82
%82 = OpLabel
OpBranch %83
%83 = OpLabel
%36 = OpPhi %5 %15 %82 %37 %92
%38 = OpPhi %5 %31 %82 %34 %92
%39 = OpShiftLeftLogical %5 %36 %40
%41 = OpIMul %5 %36 %42
%43 = OpImageRead %27 %9 %41
%44 = OpCompositeExtract %5 %43 0
%45 = OpIEqual %23 %44 %46
OpLoopMerge %94 %92 None
OpBranchConditional %45 %93 %84
%93 = OpLabel
%47 = OpImageRead %27 %9 %18
%48 = OpCompositeExtract %5 %47 0
%33 = OpIAdd %5 %48 %38
OpBranch %94
%84 = OpLabel
%49 = OpIEqual %23 %22 %15
OpSelectionMerge %91 None
OpBranchConditional %49 %91 %85
%85 = OpLabel
OpBranch %86
%86 = OpLabel
%53 = OpPhi %5 %38 %85 %51 %88
%54 = OpPhi %5 %15 %85 %55 %88
%56 = OpShiftLeftLogical %5 %54 %40
%57 = OpIMul %5 %54 %42
%58 = OpImageRead %27 %9 %57
%59 = OpCompositeExtract %5 %58 0
%60 = OpIEqual %23 %59 %46
OpLoopMerge %90 %88 None
OpBranchConditional %60 %89 %87
%89 = OpLabel
%61 = OpImageRead %27 %9 %21
%62 = OpCompositeExtract %5 %61 0
%50 = OpIAdd %5 %62 %53
OpBranch %90
%87 = OpLabel
OpBranch %88
%88 = OpLabel
%63 = OpBitwiseXor %5 %36 %29
%64 = OpBitwiseXor %5 %63 %54
%65 = OpShiftLeftLogical %5 %64 %21
%66 = OpImageRead %27 %9 %64
%67 = OpCompositeExtract %5 %66 0
%51 = OpIAdd %5 %67 %53
%55 = OpIAdd %5 %54 %18
%68 = OpULessThan %23 %55 %22
OpStore %72 %51
OpBranchConditional %68 %86 %90
%90 = OpLabel
%74 = OpPhi %5 %38 %88 %50 %89
%73 = OpLoad %5 %72
OpBranch %91
%91 = OpLabel
%75 = OpPhi %5 %38 %84 %74 %90
%34 = OpCopyObject %5 %75
OpBranch %92
%92 = OpLabel
%37 = OpIAdd %5 %36 %18
%52 = OpULessThan %23 %37 %19
OpStore %70 %34
OpBranchConditional %52 %83 %94
%94 = OpLabel
%76 = OpPhi %5 %31 %92 %33 %93
%71 = OpLoad %5 %70
OpBranch %95
%95 = OpLabel
%77 = OpPhi %5 %31 %81 %76 %94
%26 = OpCopyObject %5 %77
OpBranch %96
%96 = OpLabel
%30 = OpIAdd %5 %29 %18
%35 = OpIEqual %23 %30 %16
OpBranchConditional %35 %97 %80
%97 = OpLabel
OpBranch %98
%98 = OpLabel
%25 = OpPhi %5 %15 %78 %26 %97
%28 = OpCompositeConstruct %27 %25 %25 %25 %25
OpImageWrite %9 %15 %28
OpReturn
OpFunctionEnd
#endif
