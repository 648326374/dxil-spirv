#version 460
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, r32ui) uniform uimageBuffer _8;

void main()
{
    uint _23;
    if (gl_GlobalInvocationID.y == 0u)
    {
        _23 = 0u;
    }
    else
    {
        uint _27;
        uint _29;
        _27 = 0u;
        _29 = 0u;
        uint _24;
        uint _53;
        bool _30;
        for (;;)
        {
            _30 = gl_GlobalInvocationID.z == 0u;
            uint frontier_phi_4_pred;
            if (_30)
            {
                frontier_phi_4_pred = _29;
            }
            else
            {
                uint frontier_phi_10;
                uint _34 = _29;
                uint _35 = 0u;
                for (;;)
                {
                    if (imageLoad(_8, int(_35 * 32u)).x == 10u)
                    {
                        frontier_phi_10 = imageLoad(_8, int(2u)).x + _34;
                        break;
                    }
                    else
                    {
                        uint _47 = _35 ^ _27;
                        uint _32 = imageLoad(_8, int(_47)).x + _34;
                        uint _36 = _35 + 1u;
                        _53 = _32;
                        if (_36 < gl_GlobalInvocationID.z)
                        {
                            _34 = _32;
                            _35 = _36;
                            continue;
                        }
                        else
                        {
                            frontier_phi_10 = _29;
                            break;
                        }
                    }
                }
                frontier_phi_4_pred = frontier_phi_10;
            }
            _24 = frontier_phi_4_pred;
            uint _28 = _27 + 1u;
            if (_28 == gl_GlobalInvocationID.y)
            {
                break;
            }
            else
            {
                _27 = _28;
                _29 = _24;
                continue;
            }
        }
        _23 = _24;
    }
    imageStore(_8, int(0u), uvec4(_23));
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 72
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %12
OpExecutionMode %3 LocalSize 1 1 1
OpName %3 "main"
OpName %55 "frontier_phi_10"
OpName %56 "frontier_phi_4.pred"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %12 BuiltIn GlobalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%10 = OpTypeVector %5 3
%11 = OpTypePointer Input %10
%12 = OpVariable %11 Input
%13 = OpTypePointer Input %5
%15 = OpConstant %5 1
%18 = OpConstant %5 2
%20 = OpTypeBool
%22 = OpConstant %5 0
%25 = OpTypeVector %5 4
%38 = OpConstant %5 7
%40 = OpConstant %5 32
%44 = OpConstant %5 10
%52 = OpTypePointer Function %5
%3 = OpFunction %1 None %2
%4 = OpLabel
%53 = OpVariable %52 Function
OpBranch %57
%57 = OpLabel
%9 = OpLoad %6 %8
%14 = OpAccessChain %13 %12 %15
%16 = OpLoad %5 %14
%17 = OpAccessChain %13 %12 %18
%19 = OpLoad %5 %17
%21 = OpIEqual %20 %16 %22
OpSelectionMerge %70 None
OpBranchConditional %21 %70 %58
%58 = OpLabel
OpBranch %59
%59 = OpLabel
%27 = OpPhi %5 %22 %58 %28 %68
%29 = OpPhi %5 %22 %58 %24 %68
%30 = OpIEqual %20 %19 %22
OpLoopMerge %69 %68 None
OpBranch %60
%60 = OpLabel
OpSelectionMerge %67 None
OpBranchConditional %30 %67 %61
%61 = OpLabel
OpBranch %62
%62 = OpLabel
%34 = OpPhi %5 %29 %61 %32 %64
%35 = OpPhi %5 %22 %61 %36 %64
%37 = OpShiftLeftLogical %5 %35 %38
%39 = OpIMul %5 %35 %40
%41 = OpImageRead %25 %9 %39
%42 = OpCompositeExtract %5 %41 0
%43 = OpIEqual %20 %42 %44
OpLoopMerge %66 %64 None
OpBranchConditional %43 %65 %63
%65 = OpLabel
%45 = OpImageRead %25 %9 %18
%46 = OpCompositeExtract %5 %45 0
%31 = OpIAdd %5 %46 %34
OpBranch %66
%63 = OpLabel
OpBranch %64
%64 = OpLabel
%47 = OpBitwiseXor %5 %35 %27
%48 = OpShiftLeftLogical %5 %47 %18
%49 = OpImageRead %25 %9 %47
%50 = OpCompositeExtract %5 %49 0
%32 = OpIAdd %5 %50 %34
%36 = OpIAdd %5 %35 %15
%51 = OpULessThan %20 %36 %19
OpStore %53 %32
OpBranchConditional %51 %62 %66
%66 = OpLabel
%55 = OpPhi %5 %29 %64 %31 %65
%54 = OpLoad %5 %53
OpBranch %67
%67 = OpLabel
%56 = OpPhi %5 %29 %60 %55 %66
%24 = OpCopyObject %5 %56
OpBranch %68
%68 = OpLabel
%28 = OpIAdd %5 %27 %15
%33 = OpIEqual %20 %28 %16
OpBranchConditional %33 %69 %59
%69 = OpLabel
OpBranch %70
%70 = OpLabel
%23 = OpPhi %5 %22 %57 %24 %69
%26 = OpCompositeConstruct %25 %23 %23 %23 %23
OpImageWrite %9 %22 %26
OpReturn
OpFunctionEnd
#endif
