#version 460
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, r32ui) uniform uimageBuffer _8;

uint _26;

void main()
{
    uint _23;
    if (!(gl_GlobalInvocationID.y == 0u))
    {
        uint _29;
        _29 = 0u;
        uint _24;
        uint frontier_phi_4_pred;
        uint _31 = 0u;
        bool _32;
        for (;;)
        {
            _32 = gl_GlobalInvocationID.z == 0u;
            if (!_32)
            {
                uint frontier_phi_10;
                uint _36 = _31;
                uint _37 = 0u;
                for (;;)
                {
                    uint _41 = (_37 << 7u) >> 2u;
                    if (uvec4(imageLoad(_8, int(_41)).x, imageLoad(_8, int(_41 + 1u)).x, imageLoad(_8, int(_41 + 2u)).x, imageLoad(_8, int(_41 + 3u)).x).x == 10u)
                    {
                        uint _59 = 8u >> 2u;
                        frontier_phi_10 = uvec4(imageLoad(_8, int(_59)).x, imageLoad(_8, int(_59 + 1u)).x, imageLoad(_8, int(_59 + 2u)).x, imageLoad(_8, int(_59 + 3u)).x).x + _36;
                        break;
                    }
                    else
                    {
                        uint _75 = ((_37 ^ _29) << 2u) >> 2u;
                        uint _34 = uvec4(imageLoad(_8, int(_75)).x, imageLoad(_8, int(_75 + 1u)).x, imageLoad(_8, int(_75 + 2u)).x, imageLoad(_8, int(_75 + 3u)).x).x + _36;
                        uint _38 = _37 + 1u;
                        if (_38 < gl_GlobalInvocationID.z)
                        {
                            _36 = _34;
                            _37 = _38;
                            continue;
                        }
                        else
                        {
                            frontier_phi_10 = _34;
                            break;
                        }
                    }
                }
                frontier_phi_4_pred = frontier_phi_10;
            }
            else
            {
                frontier_phi_4_pred = _31;
            }
            uint _30 = _29 + 1u;
            _24 = frontier_phi_4_pred;
            if (_30 == gl_GlobalInvocationID.y)
            {
                break;
            }
            else
            {
                _29 = _30;
                _31 = _24;
                continue;
            }
        }
        _23 = _24;
    }
    else
    {
        _23 = 0u;
    }
    imageStore(_8, int(0u >> 2u), uvec4(_23));
}


#if 0
// LLVM disassembly
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%struct.RWByteAddressBuffer = type { i32 }

define void @main() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 0, i32 0, i1 false)
  %2 = call i32 @dx.op.threadId.i32(i32 93, i32 1)
  %3 = call i32 @dx.op.threadId.i32(i32 93, i32 2)
  %4 = icmp eq i32 %2, 0
  br i1 %4, label %36, label %5

5:                                                ; preds = %0
  br label %6

6:                                                ; preds = %31, %5
  %7 = phi i32 [ %33, %31 ], [ 0, %5 ]
  %8 = phi i32 [ %32, %31 ], [ 0, %5 ]
  %9 = icmp eq i32 %3, 0
  br i1 %9, label %31, label %10

10:                                               ; preds = %6
  br label %11

11:                                               ; preds = %22, %10
  %12 = phi i32 [ %27, %22 ], [ %8, %10 ]
  %13 = phi i32 [ %28, %22 ], [ 0, %10 ]
  %14 = shl i32 %13, 7
  %15 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %14, i32 undef)
  %16 = extractvalue %dx.types.ResRet.i32 %15, 0
  %17 = icmp eq i32 %16, 10
  br i1 %17, label %18, label %22

18:                                               ; preds = %11
  %19 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 8, i32 undef)
  %20 = extractvalue %dx.types.ResRet.i32 %19, 0
  %21 = add i32 %20, %12
  br label %31

22:                                               ; preds = %11
  %23 = xor i32 %13, %7
  %24 = shl i32 %23, 2
  %25 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %24, i32 undef)
  %26 = extractvalue %dx.types.ResRet.i32 %25, 0
  %27 = add i32 %26, %12
  %28 = add nuw i32 %13, 1
  %29 = icmp ult i32 %28, %3
  br i1 %29, label %11, label %30, !llvm.loop !10

30:                                               ; preds = %22
  br label %31

31:                                               ; preds = %30, %18, %6
  %32 = phi i32 [ %21, %18 ], [ %8, %6 ], [ %27, %30 ]
  %33 = add nuw i32 %7, 1
  %34 = icmp eq i32 %33, %2
  br i1 %34, label %35, label %6, !llvm.loop !12

35:                                               ; preds = %31
  br label %36

36:                                               ; preds = %35, %0
  %37 = phi i32 [ 0, %0 ], [ %32, %35 ]
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1, i32 0, i32 undef, i32 %37, i32 undef, i32 undef, i32 undef, i8 1)
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind
declare void @dx.op.bufferStore.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i8) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!7}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 5}
!3 = !{!"cs", i32 6, i32 0}
!4 = !{null, !5, null, null}
!5 = !{!6}
!6 = !{i32 0, %struct.RWByteAddressBuffer* undef, !"", i32 0, i32 0, i32 1, i32 11, i1 false, i1 false, i1 false, null}
!7 = !{void ()* @main, !"main", null, !4, !8}
!8 = !{i32 0, i64 16, i32 4, !9}
!9 = !{i32 1, i32 1, i32 1}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.unroll.disable"}
!12 = distinct !{!12, !11}
#endif
#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 107
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %12
OpExecutionMode %3 LocalSize 1 1 1
OpName %3 "main"
OpName %90 "frontier_phi_10"
OpName %91 "frontier_phi_4.pred"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %12 BuiltIn GlobalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%10 = OpTypeVector %5 3
%11 = OpTypePointer Input %10
%12 = OpVariable %11 Input
%13 = OpTypePointer Input %5
%15 = OpConstant %5 1
%18 = OpConstant %5 2
%20 = OpTypeBool
%22 = OpConstant %5 0
%27 = OpTypeVector %5 4
%40 = OpConstant %5 7
%52 = OpConstant %5 3
%57 = OpConstant %5 10
%58 = OpConstant %5 8
%3 = OpFunction %1 None %2
%4 = OpLabel
%26 = OpUndef %5
OpBranch %92
%92 = OpLabel
%9 = OpLoad %6 %8
%14 = OpAccessChain %13 %12 %15
%16 = OpLoad %5 %14
%17 = OpAccessChain %13 %12 %18
%19 = OpLoad %5 %17
%21 = OpIEqual %20 %16 %22
OpSelectionMerge %105 None
OpBranchConditional %21 %105 %93
%93 = OpLabel
OpBranch %94
%94 = OpLabel
%29 = OpPhi %5 %22 %93 %30 %103
%31 = OpPhi %5 %22 %93 %24 %103
%32 = OpIEqual %20 %19 %22
OpLoopMerge %104 %103 None
OpBranch %95
%95 = OpLabel
OpSelectionMerge %102 None
OpBranchConditional %32 %102 %96
%96 = OpLabel
OpBranch %97
%97 = OpLabel
%36 = OpPhi %5 %31 %96 %34 %99
%37 = OpPhi %5 %22 %96 %38 %99
%39 = OpShiftLeftLogical %5 %37 %40
%41 = OpShiftRightLogical %5 %39 %18
%42 = OpImageRead %27 %9 %41
%43 = OpCompositeExtract %5 %42 0
%45 = OpIAdd %5 %41 %15
%44 = OpImageRead %27 %9 %45
%46 = OpCompositeExtract %5 %44 0
%48 = OpIAdd %5 %41 %18
%47 = OpImageRead %27 %9 %48
%49 = OpCompositeExtract %5 %47 0
%51 = OpIAdd %5 %41 %52
%50 = OpImageRead %27 %9 %51
%53 = OpCompositeExtract %5 %50 0
%54 = OpCompositeConstruct %27 %43 %46 %49 %53
%55 = OpCompositeExtract %5 %54 0
%56 = OpIEqual %20 %55 %57
OpLoopMerge %101 %99 None
OpBranchConditional %56 %100 %98
%100 = OpLabel
%59 = OpShiftRightLogical %5 %58 %18
%60 = OpImageRead %27 %9 %59
%61 = OpCompositeExtract %5 %60 0
%63 = OpIAdd %5 %59 %15
%62 = OpImageRead %27 %9 %63
%64 = OpCompositeExtract %5 %62 0
%66 = OpIAdd %5 %59 %18
%65 = OpImageRead %27 %9 %66
%67 = OpCompositeExtract %5 %65 0
%69 = OpIAdd %5 %59 %52
%68 = OpImageRead %27 %9 %69
%70 = OpCompositeExtract %5 %68 0
%71 = OpCompositeConstruct %27 %61 %64 %67 %70
%72 = OpCompositeExtract %5 %71 0
%33 = OpIAdd %5 %72 %36
OpBranch %101
%98 = OpLabel
OpBranch %99
%99 = OpLabel
%73 = OpBitwiseXor %5 %37 %29
%74 = OpShiftLeftLogical %5 %73 %18
%75 = OpShiftRightLogical %5 %74 %18
%76 = OpImageRead %27 %9 %75
%77 = OpCompositeExtract %5 %76 0
%79 = OpIAdd %5 %75 %15
%78 = OpImageRead %27 %9 %79
%80 = OpCompositeExtract %5 %78 0
%82 = OpIAdd %5 %75 %18
%81 = OpImageRead %27 %9 %82
%83 = OpCompositeExtract %5 %81 0
%85 = OpIAdd %5 %75 %52
%84 = OpImageRead %27 %9 %85
%86 = OpCompositeExtract %5 %84 0
%87 = OpCompositeConstruct %27 %77 %80 %83 %86
%88 = OpCompositeExtract %5 %87 0
%34 = OpIAdd %5 %88 %36
%38 = OpIAdd %5 %37 %15
%89 = OpULessThan %20 %38 %19
OpBranchConditional %89 %97 %101
%101 = OpLabel
%90 = OpPhi %5 %34 %99 %33 %100
OpBranch %102
%102 = OpLabel
%91 = OpPhi %5 %31 %95 %90 %101
OpBranch %103
%103 = OpLabel
%30 = OpIAdd %5 %29 %15
%35 = OpIEqual %20 %30 %16
%24 = OpCopyObject %5 %91
OpBranchConditional %35 %104 %94
%104 = OpLabel
OpBranch %105
%105 = OpLabel
%23 = OpPhi %5 %22 %92 %24 %104
%25 = OpShiftRightLogical %5 %22 %18
%28 = OpCompositeConstruct %27 %23 %23 %23 %23
OpImageWrite %9 %25 %28
OpReturn
OpFunctionEnd
#endif
