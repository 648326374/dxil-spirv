#version 460
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, r32ui) uniform uimageBuffer _8;

uint _23;
uint _58;

void main()
{
    uint _19;
    if (!(gl_GlobalInvocationID.x == 0u))
    {
        uint _20;
        uint _26 = 0u;
        uint _27 = 0u;
        bool _33;
        for (;;)
        {
            _33 = imageLoad(_8, int((_27 << 2u) >> 2u)).x == 40u;
            uint frontier_phi_6_pred;
            for (;;)
            {
                uint _50;
                uint frontier_phi_8;
                if (_33)
                {
                    if (_27 == 10u)
                    {
                        frontier_phi_6_pred = _26;
                        break;
                    }
                    _50 = imageLoad(_8, int((_27 << 4u) >> 2u)).x;
                    frontier_phi_8 = _26;
                }
                else
                {
                    _50 = imageLoad(_8, int((_27 * 12u) >> 2u)).x;
                    frontier_phi_8 = _58;
                }
                frontier_phi_6_pred = (_50 + _26) + imageLoad(_8, int((_27 << 3u) >> 2u)).x;
                break;
            }
            _20 = frontier_phi_6_pred;
            uint _28 = _27 + 1u;
            if (_28 == gl_GlobalInvocationID.x)
            {
                break;
            }
            else
            {
                _26 = _20;
                _27 = _28;
                continue;
            }
        }
        _19 = _20;
    }
    else
    {
        _19 = 0u;
    }
    imageStore(_8, int(0u >> 2u), uvec4(_19));
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 76
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %12
OpExecutionMode %3 LocalSize 1 1 1
OpName %3 "main"
OpName %57 "frontier_phi_8"
OpName %60 "frontier_phi_6.pred"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %12 BuiltIn GlobalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%10 = OpTypeVector %5 3
%11 = OpTypePointer Input %10
%12 = OpVariable %11 Input
%13 = OpTypePointer Input %5
%15 = OpConstant %5 0
%17 = OpTypeBool
%22 = OpConstant %5 2
%24 = OpTypeVector %5 4
%34 = OpConstant %5 40
%36 = OpConstant %5 10
%38 = OpConstant %5 12
%43 = OpConstant %5 1
%46 = OpConstant %5 4
%53 = OpConstant %5 3
%59 = OpConstantTrue %17
%3 = OpFunction %1 None %2
%4 = OpLabel
%23 = OpUndef %5
%58 = OpUndef %5
OpBranch %61
%61 = OpLabel
%9 = OpLoad %6 %8
%14 = OpAccessChain %13 %12 %15
%16 = OpLoad %5 %14
%18 = OpIEqual %17 %16 %15
OpSelectionMerge %73 None
OpBranchConditional %18 %73 %62
%62 = OpLabel
OpBranch %63
%63 = OpLabel
%26 = OpPhi %5 %15 %62 %20 %71
%27 = OpPhi %5 %15 %62 %28 %71
%29 = OpShiftLeftLogical %5 %27 %22
%30 = OpShiftRightLogical %5 %29 %22
%31 = OpImageRead %24 %9 %30
%32 = OpCompositeExtract %5 %31 0
%33 = OpIEqual %17 %32 %34
OpLoopMerge %72 %71 None
OpBranch %64
%64 = OpLabel
OpLoopMerge %70 %74 None
OpBranch %65
%65 = OpLabel
OpSelectionMerge %69 None
OpBranchConditional %33 %67 %66
%67 = OpLabel
%35 = OpIEqual %17 %27 %36
OpSelectionMerge %68 None
OpBranchConditional %35 %70 %68
%68 = OpLabel
%45 = OpShiftLeftLogical %5 %27 %46
%47 = OpShiftRightLogical %5 %45 %22
%48 = OpImageRead %24 %9 %47
%49 = OpCompositeExtract %5 %48 0
OpBranch %69
%66 = OpLabel
%37 = OpIMul %5 %27 %38
%39 = OpShiftRightLogical %5 %37 %22
%40 = OpImageRead %24 %9 %39
%41 = OpCompositeExtract %5 %40 0
OpBranch %69
%69 = OpLabel
%50 = OpPhi %5 %41 %66 %49 %68
%57 = OpPhi %5 %58 %66 %26 %68
%51 = OpIAdd %5 %50 %26
%52 = OpShiftLeftLogical %5 %27 %53
%54 = OpShiftRightLogical %5 %52 %22
%55 = OpImageRead %24 %9 %54
%56 = OpCompositeExtract %5 %55 0
%42 = OpIAdd %5 %51 %56
OpBranch %70
%74 = OpLabel
OpBranch %64
%70 = OpLabel
%60 = OpPhi %5 %26 %67 %42 %69
%20 = OpCopyObject %5 %60
OpBranch %71
%71 = OpLabel
%28 = OpIAdd %5 %27 %43
%44 = OpIEqual %17 %28 %16
OpBranchConditional %44 %72 %63
%72 = OpLabel
OpBranch %73
%73 = OpLabel
%19 = OpPhi %5 %15 %61 %20 %72
%21 = OpShiftRightLogical %5 %15 %22
%25 = OpCompositeConstruct %24 %19 %19 %19 %19
OpImageWrite %9 %21 %25
OpReturn
OpFunctionEnd
#endif
