#version 460
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, r32ui) uniform uimageBuffer _8;

uint _22;

void main()
{
    if (!(gl_GlobalInvocationID.y == 0u))
    {
        uint _25 = 0u;
        for (;;)
        {
            switch (gl_GlobalInvocationID.x)
            {
                case 0u:
                {
                    imageStore(_8, int(0u), uvec4(imageLoad(_8, int(0u)).x));
                    break;
                }
                case 1u:
                {
                    imageStore(_8, int(40u), uvec4(imageLoad(_8, int(40u)).x));
                    break;
                }
                case 5u:
                {
                    imageStore(_8, int(60u), uvec4(imageLoad(_8, int(60u)).x));
                    break;
                }
                default:
                {
                    imageStore(_8, int(100u), uvec4(imageLoad(_8, int(100u)).x));
                    break;
                }
            }
            uint _26 = _25 + 1u;
            if (_26 == gl_GlobalInvocationID.y)
            {
                break;
            }
            else
            {
                _25 = _26;
                continue;
            }
        }
    }
    imageStore(_8, int(1u), uvec4(0u));
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 56
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %12
OpExecutionMode %3 LocalSize 1 1 1
OpName %3 "main"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %12 BuiltIn GlobalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%10 = OpTypeVector %5 3
%11 = OpTypePointer Input %10
%12 = OpVariable %11 Input
%13 = OpTypePointer Input %5
%15 = OpConstant %5 0
%18 = OpConstant %5 1
%20 = OpTypeBool
%23 = OpTypeVector %5 4
%27 = OpConstant %5 100
%34 = OpConstant %5 40
%38 = OpConstant %5 60
%3 = OpFunction %1 None %2
%4 = OpLabel
%22 = OpUndef %5
OpBranch %43
%43 = OpLabel
%9 = OpLoad %6 %8
%14 = OpAccessChain %13 %12 %15
%16 = OpLoad %5 %14
%17 = OpAccessChain %13 %12 %18
%19 = OpLoad %5 %17
%21 = OpIEqual %20 %19 %15
OpSelectionMerge %54 None
OpBranchConditional %21 %54 %44
%44 = OpLabel
OpBranch %45
%45 = OpLabel
%25 = OpPhi %5 %15 %44 %26 %52
OpLoopMerge %53 %52 None
OpBranch %46
%46 = OpLabel
OpSelectionMerge %51 None
OpSwitch %16 %50 0 %49 1 %48 5 %47
%50 = OpLabel
%28 = OpImageRead %23 %9 %27
%29 = OpCompositeExtract %5 %28 0
%30 = OpCompositeConstruct %23 %29 %29 %29 %29
OpImageWrite %9 %27 %30
OpBranch %51
%49 = OpLabel
%31 = OpImageRead %23 %9 %15
%32 = OpCompositeExtract %5 %31 0
%33 = OpCompositeConstruct %23 %32 %32 %32 %32
OpImageWrite %9 %15 %33
OpBranch %51
%48 = OpLabel
%35 = OpImageRead %23 %9 %34
%36 = OpCompositeExtract %5 %35 0
%37 = OpCompositeConstruct %23 %36 %36 %36 %36
OpImageWrite %9 %34 %37
OpBranch %51
%47 = OpLabel
%39 = OpImageRead %23 %9 %38
%40 = OpCompositeExtract %5 %39 0
%41 = OpCompositeConstruct %23 %40 %40 %40 %40
OpImageWrite %9 %38 %41
OpBranch %51
%51 = OpLabel
OpBranch %52
%52 = OpLabel
%26 = OpIAdd %5 %25 %18
%42 = OpIEqual %20 %26 %19
OpBranchConditional %42 %53 %45
%53 = OpLabel
OpBranch %54
%54 = OpLabel
%24 = OpCompositeConstruct %23 %15 %15 %15 %15
OpImageWrite %9 %18 %24
OpReturn
OpFunctionEnd
#endif
