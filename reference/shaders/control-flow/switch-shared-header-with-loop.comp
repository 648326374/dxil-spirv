#version 460
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, r32ui) uniform uimageBuffer _8;

uint _22;
uint _30;
uint _37;
uint _44;
uint _51;

void main()
{
    if (!(gl_GlobalInvocationID.y == 0u))
    {
        uint _25 = 0u;
        for (;;)
        {
            switch (gl_GlobalInvocationID.x)
            {
                case 0u:
                {
                    imageStore(_8, int(0u), uvec4(uvec2(imageLoad(_8, int(0u)).x, _37).x));
                    break;
                }
                case 1u:
                {
                    imageStore(_8, int(40u), uvec4(uvec2(imageLoad(_8, int(40u)).x, _44).x));
                    break;
                }
                case 5u:
                {
                    imageStore(_8, int(60u), uvec4(uvec2(imageLoad(_8, int(60u)).x, _51).x));
                    break;
                }
                default:
                {
                    imageStore(_8, int(100u), uvec4(uvec2(imageLoad(_8, int(100u)).x, _30).x));
                    break;
                }
            }
            uint _26 = _25 + 1u;
            if (_26 == gl_GlobalInvocationID.y)
            {
                break;
            }
            else
            {
                _25 = _26;
                continue;
            }
        }
    }
    imageStore(_8, int(1u), uvec4(0u));
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 69
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %12
OpExecutionMode %3 LocalSize 1 1 1
OpName %3 "main"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %12 BuiltIn GlobalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%10 = OpTypeVector %5 3
%11 = OpTypePointer Input %10
%12 = OpVariable %11 Input
%13 = OpTypePointer Input %5
%15 = OpConstant %5 0
%18 = OpConstant %5 1
%20 = OpTypeBool
%23 = OpTypeVector %5 4
%27 = OpConstant %5 100
%31 = OpTypeVector %5 2
%41 = OpConstant %5 40
%48 = OpConstant %5 60
%3 = OpFunction %1 None %2
%4 = OpLabel
%22 = OpUndef %5
%30 = OpUndef %5
%37 = OpUndef %5
%44 = OpUndef %5
%51 = OpUndef %5
OpBranch %56
%56 = OpLabel
%9 = OpLoad %6 %8
%14 = OpAccessChain %13 %12 %15
%16 = OpLoad %5 %14
%17 = OpAccessChain %13 %12 %18
%19 = OpLoad %5 %17
%21 = OpIEqual %20 %19 %15
OpSelectionMerge %67 None
OpBranchConditional %21 %67 %57
%57 = OpLabel
OpBranch %58
%58 = OpLabel
%25 = OpPhi %5 %15 %57 %26 %65
OpLoopMerge %66 %65 None
OpBranch %59
%59 = OpLabel
OpSelectionMerge %64 None
OpSwitch %16 %63 0 %62 1 %61 5 %60
%63 = OpLabel
%28 = OpImageRead %23 %9 %27
%29 = OpCompositeExtract %5 %28 0
%32 = OpCompositeConstruct %31 %29 %30
%33 = OpCompositeExtract %5 %32 0
%34 = OpCompositeConstruct %23 %33 %33 %33 %33
OpImageWrite %9 %27 %34
OpBranch %64
%62 = OpLabel
%35 = OpImageRead %23 %9 %15
%36 = OpCompositeExtract %5 %35 0
%38 = OpCompositeConstruct %31 %36 %37
%39 = OpCompositeExtract %5 %38 0
%40 = OpCompositeConstruct %23 %39 %39 %39 %39
OpImageWrite %9 %15 %40
OpBranch %64
%61 = OpLabel
%42 = OpImageRead %23 %9 %41
%43 = OpCompositeExtract %5 %42 0
%45 = OpCompositeConstruct %31 %43 %44
%46 = OpCompositeExtract %5 %45 0
%47 = OpCompositeConstruct %23 %46 %46 %46 %46
OpImageWrite %9 %41 %47
OpBranch %64
%60 = OpLabel
%49 = OpImageRead %23 %9 %48
%50 = OpCompositeExtract %5 %49 0
%52 = OpCompositeConstruct %31 %50 %51
%53 = OpCompositeExtract %5 %52 0
%54 = OpCompositeConstruct %23 %53 %53 %53 %53
OpImageWrite %9 %48 %54
OpBranch %64
%64 = OpLabel
OpBranch %65
%65 = OpLabel
%26 = OpIAdd %5 %25 %18
%55 = OpIEqual %20 %26 %19
OpBranchConditional %55 %66 %58
%66 = OpLabel
OpBranch %67
%67 = OpLabel
%24 = OpCompositeConstruct %23 %15 %15 %15 %15
OpImageWrite %9 %18 %24
OpReturn
OpFunctionEnd
#endif
